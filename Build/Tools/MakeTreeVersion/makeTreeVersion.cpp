/**************************************************************************
 * @doc 
 * 
 * @module  |
 * 
 * 
 * 
 * Copyright 1998 by MetraTech
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS", AND MetraTech MAKES NO
 * REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. By way of
 * example, but not limitation, MetraTech MAKES NO REPRESENTATIONS OR
 * WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE
 * OR THAT THE USE OF THE LICENSED SOFTWARE OR DOCUMENTATION WILL NOT
 * INFRINGE ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER
 * RIGHTS.
 *
 * Title to copyright in this software and any associated
 * documentation shall at all times remain with MetraTech, and USER
 * agrees to preserve the same.
 *
 * Created by: Kevin Fitzgerald
 * $Header$
 *
 * @index | 
 ***************************************************************************/

#include <iostream>
#include <fstream>
#include <string.h>

#define MAX_CHAR_SIZE 256
#define MAX_INT_SIZE  64
int main (int argc, char * argv[] )
{
  // local variables ...

  char treerev_withpath[MAX_CHAR_SIZE];
  char version_headfile_withpath[MAX_CHAR_SIZE];

  // keep the old way works. If user puts 1 parameter, use that one as
  // the directory name.

  if (argc == 1)
  {
	  strcpy(treerev_withpath, "TreeRev.txt");
	  strcpy(version_headfile_withpath, "..\\..\\include\\MTTreeRev.h");
  }
  else if (argc == 2)
  {
	  strcpy(treerev_withpath,	argv[1]);
	  strcat(treerev_withpath, "\\TreeRev.txt");
	  strcpy(version_headfile_withpath, argv[1]);
	  strcat(version_headfile_withpath, "\\..\\..\\include\\MTTreeRev.h");
  }
  else
  {
	  std::cout<<"Error:: too many parameters" << std::endl;
	  return 0;
  }

  char inbuf[MAX_CHAR_SIZE] ;
  std::fstream revfile ;
  std::ofstream outrevfile ;
  char strMajor[MAX_INT_SIZE], strMinor[MAX_INT_SIZE] ;
  char strRev[MAX_INT_SIZE], strBuildNum[MAX_INT_SIZE] ;
  char *pRevString=NULL;
  int nMajor, nMinor, nRev, nBuildNum ;
  int i ;

  // open the TreeRev.txt file ...
  revfile.open(treerev_withpath, std::ios::in) ;

  // read in the revision information ...
  revfile.getline(inbuf, MAX_CHAR_SIZE) ;
  
  if (revfile.fail())
  {
    std::cout << "ERROR: unable to read tree revision file." << std::endl ;
  }
  revfile.close() ;

  // get the parts of the tree revision ...
  pRevString = strstr (inbuf, "(") ;
  pRevString++ ;
  strcpy (strMajor, pRevString) ;
  for (i=0; i < strlen (strMajor) ; i++)
  {
    if (strMajor[i] == ',')
    {
      strMajor[i] = '\0';
      break ;
    }
  }
  pRevString = strstr (pRevString, ",") ;
  pRevString++ ;
  strcpy (strMinor, pRevString) ;
  for (i=0; i < strlen (strMinor) ; i++)
  {
    if (strMinor[i] == ',')
    {
      strMinor[i] = '\0';
      break ;
    }
  }
  pRevString = strstr (pRevString, ",") ;
  pRevString++ ;
  strcpy (strRev, pRevString) ;
  for (i=0; i < strlen (strRev) ; i++)
  {
    if (strRev[i] == ',')
    {
      strRev[i] = '\0';
      break ;
    }
  }
  pRevString = strstr (pRevString, ",") ;
  pRevString++ ;
  strcpy (strBuildNum, pRevString) ;
  for (i=0; i < strlen (strBuildNum) ; i++)
  {
    if (strBuildNum[i] == ')')
    {
      strBuildNum[i] = '\0';
      break ;
    }
  }

  // convert the strings to integers ...
  nMajor = atoi (strMajor) ;
  nMinor = atoi (strMinor) ;
  nRev = atoi (strRev) ;
  nBuildNum = atoi (strBuildNum) ;

  // increment the build number ...
  nBuildNum++ ;
  
  // create the new string and write the new file ...
  sprintf (inbuf, "Revision := (%d, %d, %d, %d)\n", nMajor, nMinor, nRev, nBuildNum) ;
  outrevfile.open("TreeRev.txt", std::ios::out | std::ios::trunc) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  outrevfile.close() ;

  // create new tree version file ...
  //outrevfile.open("..\\..\\..\\include\\MTTreeRev.h", std::ios::out | std::ios::trunc) ;
  outrevfile.open(version_headfile_withpath, std::ios::out | std::ios::trunc) ;
  strcpy (inbuf, "\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  strcpy (inbuf, "//\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  strcpy (inbuf, "// This file was generated by the MakeTreeVersion.exe\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  strcpy (inbuf, "// Please do not modify\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  strcpy (inbuf, "//\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  strcpy (inbuf, "\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_MAJOR_VERSION      %d\n", nMajor) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_MINOR_VERSION      %d\n", nMinor) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_REVISION           %d\n", nRev) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_BUILD_NUMBER       %d\n", nBuildNum) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_PRODUCTVERSION     %d,%d,%d,%d\n", 
    nMajor, nMinor, nRev, nBuildNum) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_FILEVERSION        %d,%d,%d,%d\n", 
    nMajor, nMinor, nRev, nBuildNum) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  strcpy (inbuf, "\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_MAJOR_VERSION_STR    \"%d\\0\"\n", nMajor) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_MINOR_VERSION_STR    \"%d\\0\"\n", nMinor) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_REVISION_STR         \"%d\\0\"\n", nRev) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_BUILD_NUMBER_STR     \"%d\\0\"\n", nBuildNum) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_COMPANYNAME_STR    \"MetraTech Corp.\\0\"\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_COPYRIGHT_STR    \"Copyright © 1998 MetraTech Corp. All rights reserved.\\0\"\n") ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_PRODUCTVERSION_STR    \"%d,%d,%d,%d\\0\"\n", 
    nMajor, nMinor, nRev, nBuildNum) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  sprintf (inbuf, "#define MT_FILEVERSION_STR       \"%d,%d,%d,%d\\0\"\n", 
    nMajor, nMinor, nRev, nBuildNum) ;
  outrevfile.write (inbuf, strlen (inbuf) + 1) ;
  outrevfile.close() ;
 
  return 0 ;
}