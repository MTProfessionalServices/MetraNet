group writeError;

writeErrorComposite(operatorName, serviceDefinitionName, inputPort, Properties) ::= <<
operator <operatorName> [<inputPort:{p | in "input_<p>" is svc_error_set_defaults_<p>("input")}; separator=",\n">]
(

-- Make sure that we have all of the properties that are necessary in the error interface.
<inputPort:{p | svc_error_set_defaults_<p>:expr[program="CREATE PROCEDURE p
@Usage.SessionID BINARY @_SessionID BINARY OUTPUT 
<Properties:{p | @<p.Name> <p.Type> OUTPUT}; separator = "\n"> 
AS
SET @_SessionID = @Usage.SessionID"];}; separator="\n">

<inputPort:{p | failed_txn_projection_<p>:project[
column="_ErrorCode", 
column="_ErrorString", 
column="_Plugin", 
column="_Module", 
column="_SessionID", 
column="Usage",
<Properties:{p | column="<p.Name>"}; separator = ",\n"> 
];
svc_error_set_defaults_<p> -> failed_txn_projection_<p>;}; separator="\n">

collect_errors:union_all[];
<inputPort:{p | failed_txn_projection_<p> -> collect_errors(<p>);}; separator="\n">

failed_txn_id:id_generator[id="id_failed_transaction", sequence="id_failed_txn", blockSize=1000];
collect_errors -> failed_txn_id;

failed_txn_batch_size:generate[program="CREATE PROCEDURE p @id_commit_unit INTEGER OUTPUT
AS
SET @id_commit_unit = CAST(@@RECORDCOUNT / 50000LL AS INTEGER)"];
failed_txn_id -> failed_txn_batch_size;

failed_txn_ss_message_copy:copy[columnlist=[column="id_commit_unit"]];

failed_txn_batch_size -> failed_txn_ss_message_copy;

failed_txn_ss_message_count:sort_group_by[key="id_commit_unit",
initialize="CREATE PROCEDURE p @session_count INTEGER
AS
SET @session_count = 0",
update="CREATE PROCEDURE p @session_count INTEGER
AS
SET @session_count = @session_count + 1"];
failed_txn_ss_message_copy(0) -> failed_txn_ss_message_count;

failed_txn_ss:id_generator[id="id_ss", sequence="id_dbqueuess", blockSize=100];
failed_txn_ss_message_count -> failed_txn_ss;

failed_txn_message:id_generator[id="id_message", sequence="id_dbqueuesch", blockSize=100];
failed_txn_ss -> failed_txn_message;

failed_txn_message_copy:copy[];
failed_txn_message -> failed_txn_message_copy;

failed_txn_message_write:sequential_file_write[filename="C:\scratch\testpi_message_load_%1%.mfd"];
failed_txn_message_copy(0) -> failed_txn_message_write; 

failed_txn_session_set_write:sequential_file_write[filename="C:\scratch\testpi_session_set_load_%1%.mfd"];
failed_txn_message_copy(1) -> failed_txn_session_set_write; 

failed_txn_ss_message_rename:rename[
from="id_commit_unit", to="tmp82342234545"];
failed_txn_message_copy(2) -> failed_txn_ss_message_rename;

failed_txn_ss_message_join:inner_merge_join[leftKey="tmp82342234545", rightKey="id_commit_unit"];
failed_txn_ss_message_rename -> failed_txn_ss_message_join("left");
failed_txn_ss_message_copy(1) -> failed_txn_ss_message_join("right");

payj_error_copy:copy[columnlist=[column="_ErrorCode", column="_ErrorString", column="_Plugin", column="_Module", column="Usage", column="id_failed_transaction", column="id_commit_unit", column="id_message", column="id_ss", column="session_count"],
columnlist=[
column="_SessionID",
column="id_ss", 
column="id_commit_unit",
<Properties:{p | column="<p.Name>"}; separator = ",\n"> 
]];
failed_txn_ss_message_join -> payj_error_copy;

payj_error_details_rename:rename[
from="_ErrorCode", to="n_Code",
from="_ErrorString", to="tx_ErrorMessage",
from="_Plugin", to="tx_Plugin",
from="_Module", to="tx_Module"];

payj_error_copy(0) -> payj_error_details_rename;

payj_error_details:expr[program="CREATE PROCEDURE p
@Usage.SessionID BINARY 
@Usage.AccountID INTEGER
@Usage.PayingAccount INTEGER
@tx_ErrorMessage NVARCHAR
@id_ss INTEGER
@tx_FailureServiceName NVARCHAR OUTPUT
@tx_FailureCompoundID BINARY OUTPUT
@tx_FailureCompoundID_encoded NVARCHAR OUTPUT
@tx_FailureID BINARY OUTPUT
@tx_FailureID_encoded NVARCHAR OUTPUT
@tx_Batch BINARY OUTPUT
@tx_Batch_encoded NVARCHAR OUTPUT
@n_Line INTEGER OUTPUT
@id_PossiblePayeeID INTEGER OUTPUT
@id_PossiblePayerID INTEGER OUTPUT
@dt_FailureTime DATETIME OUTPUT
@dt_MeteredTime DATETIME OUTPUT
@tx_Sender NVARCHAR OUTPUT
@tx_StageName NVARCHAR OUTPUT
@tx_Method NVARCHAR OUTPUT
@b_compound VARCHAR OUTPUT
@tx_errorcodemessage NVARCHAR OUTPUT
@State VARCHAR OUTPUT
@id_sch_ss INTEGER OUTPUT
@dt_StateLastModifiedTime DATETIME OUTPUT
AS
SET @tx_FailureServiceName = N'<serviceDefinitionName>'
SET @tx_FailureID = @Usage.SessionID
SET @tx_FailureID_encoded = CAST(base64(@tx_FailureID) AS NVARCHAR)
SET @tx_FailureCompoundID = @Usage.SessionID
SET @tx_FailureCompoundID_encoded = CAST(base64(@tx_FailureCompoundID) AS NVARCHAR)
SET @n_Line = -1
SET @id_PossiblePayeeID = CASE WHEN @Usage.AccountID IS NULL THEN -1 ELSE @Usage.AccountID END
SET @id_PossiblePayerID = CASE WHEN @Usage.PayingAccount IS NULL THEN -1 ELSE @Usage.PayingAccount END
SET @dt_FailureTime = getutcdate()
SET @dt_MeteredTime = @dt_FailureTime
SET @tx_Sender = N' '
SET @tx_StageName = N' '
SET @tx_Method = N' '
SET @b_compound = 'N'
SET @State = 'N'
SET @id_sch_ss = @id_ss
SET @tx_errorcodemessage = @tx_ErrorMessage
SET @dt_StateLastModifiedTime = getutcdate()
"];
payj_error_details_rename -> payj_error_details;

dn:sequential_file_write[filename="C:\scratch\testpi_service_error_load1_%1%.mfd"];
payj_error_details -> dn;

svc_error_rename:rename[
from="_SessionID", to="id_source_sess",
from="Description", to="c_Description",
from="Time", to="c_Time",
from="Duration", to="c_Duration",
from="Units", to="c_Units",
from="AccountName", to="c_AccountName",
from="DecProp1", to="c_DecProp1",
from="DecProp2", to="c_DecProp2",
from="DecProp3", to="c_DecProp3",
from="internalmtaccountid", to="c_internalmtaccountid"];
payj_error_copy(1) -> svc_error_rename;

svc_error_set_defaults:expr[program="CREATE PROCEDURE p 
@id_parent_source_sess BINARY OUTPUT
@id_external BINARY OUTPUT
@_IntervalID INTEGER OUTPUT
@_TransactionCookie NVARCHAR OUTPUT
@_Resubmit VARCHAR OUTPUT
AS
DECLARE @tmp INTEGER
SET @tmp = 1"];
svc_error_rename -> svc_error_set_defaults;

dn1:sequential_file_write[filename="C:\scratch\testpi_service_error_load2_%1%.mfd"];
svc_error_set_defaults -> dn1;
)
>>