using System;
using System.Collections.Generic;
using MetraTech.Core.Services.Test.Quoting.Domain;
using MetraTech.DataAccess;
using MetraTech.Domain.Quoting;
using MetraTech.Interop.MTProductCatalog;
using MetraTech.TestCommon;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace MetraTech.Core.Services.Test.Quoting
{
  [TestClass]
  public class QuotingBasicFunctionalTests
  {

    #region Setup/Teardown

    [ClassInitialize]
    public static void InitTests(TestContext testContext)
    {
      SharedTestCode.MakeSureServiceIsStarted("ActivityServices");
      SharedTestCode.MakeSureServiceIsStarted("Pipeline");
    }

    #endregion

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void BasicQuotingEndToEnd()
    {
      #region Prepare
      string testName = "Quote_Basic";
      string testShortName = "Q_Basic"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      // Create account
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1; //????
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      
      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";
      quoteImpl.Request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);

      expected.CountAccounts = quoteImpl.Request.Accounts.Count;
      expected.CountNRCs= pofConfiguration.CountNRCs * expected.CountAccounts;
      expected.CountFlatRCs = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * expected.CountAccounts);
      expected.CountUDRCs = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * expected.CountAccounts);

      expected.TotalForUDRCs = 30;

      expected.Total = (expected.CountFlatRCs * pofConfiguration.RCAmount) +
                                   (expected.CountUDRCs.Value * expected.TotalForUDRCs) +
                                   (expected.CountNRCs * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingProductOfferingWithoutAnyRCsOrNRCs()
    {
      #region Prepare

      string testName = "QuotingProductOfferingWithoutAnyRCsOrNRCs";
      string testShortName = "Q_PONoRCNoNRC"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given an account and a quote request for a Product Offering that has no RCs or NRCs, When quote is run Then it there is no error and total is zero";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      // Create account for test run
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 0;
      pofConfiguration.CountPairRCs = 0; //????

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      expected.Total = 0M;
      expected.Currency = ""; //Might be nice in future if currency picked up from PO but now if there is no usage, we don't see currency

      expected.CountNRCs = 0;
      expected.CountFlatRCs = 0;
      #endregion


      #region Test and Verify

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      #endregion
    }

    //[TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithMultipleProductOfferings()
    {
      #region Prepare

      string testName = "QuotingWithMultipleProductOfferings";
      string testShortName = "Q_MultiPO"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given an account and a quote request for more than one Product Offering, When quote is run Then it includes all the usage";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      expected.CountProducts = 4;

      // Create account for test run
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1; //????

      //Now generate the Product Offerings we need
      List<int> posToAdd = new List<int>();

      for (int i = 1; i < expected.CountProducts + 1; i++)
      {
        pofConfiguration.Name = testShortName + "_" + i;
        pofConfiguration.UniqueIdentifier = testRunUniqueIdentifier + "_" + i;
        IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
        Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
        posToAdd.Add(productOffering.ID);
      }

      //Values to use for verification
      expected.CountNRCs = expected.CountProducts * pofConfiguration.CountNRCs;
      expected.CountFlatRCs = expected.CountProducts * pofConfiguration.CountPairRCs * 2; //???

      decimal expectedQuoteTotal = expected.CountProducts * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.ProductOfferings.AddRange(posToAdd);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      #endregion
    }

    //[TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithMultipleAccounts()
    {
      #region Prepare

      string testName = "QuotingWithMultipleAccounts";
      string testShortName = "Q_MAcc"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given a quote request for multiple accounts and a Product Offering, When quote is run Then it includes all the usage";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      expected.CountAccounts = 4;

      // Create accounts
      var corpAccountHolders = new List<int>();

      for (int i = 1; i < expected.CountAccounts + 1; i++)
      {
        var corpAccountHolder = new CorporateAccountFactory(testShortName + "_" + i, testRunUniqueIdentifier);

        corpAccountHolder.Instantiate();

        Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
        corpAccountHolders.Add((int)corpAccountHolder.Item._AccountID);
      }

      // Create/Verify Product Offering Exists
      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1; //????

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      expected.CountNRCs = expected.CountAccounts * pofConfiguration.CountNRCs;
      expected.CountFlatRCs = expected.CountAccounts * pofConfiguration.CountPairRCs * 2; //???

      expected.Total = expected.CountAccounts * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      quoteImpl.Request.Accounts.AddRange(corpAccountHolders);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithAccountsWithDifferentPayersInOneSet()
    {
      #region Prepare

      string testName = "QuotingWithAccountsWithDifferentPayers";
      string testShortName = "Q_DifP"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.NowWithMilliSec; //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();


      // Create account #1 Corporate payer
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department payee
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department payee
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create account #4 Corporate self-payed non-payer
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor4 = corpAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

        expected.CountAccounts = 4;

      //Values to use for verification
        expected.CountNRCs = expected.CountAccounts * pofConfiguration.CountNRCs;
        expected.CountFlatRCs = expected.CountAccounts * pofConfiguration.CountPairRCs * 2;

        expected.Total = expected.CountAccounts * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor2);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor3);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor4);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithAccountsWithDifferentPayersInDifferentSet()
    {
      #region Prepare

      string testName = "QuotingWithAccountsWithDifferentPayersInDifferentSet";
      string testShortName = "Q_DifPS"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.NowWithMilliSec; //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      // Create account #1 Corporate payer
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department payee
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department outside of the account set
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create account #4 Department payee by an account outside of the account set
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor3;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor4 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

        expected.CountAccounts = 3;

      //Values to use for verification
      expected.CountNRCs = expected.CountAccounts * pofConfiguration.CountNRCs;
      expected.CountFlatRCs = expected.CountAccounts * pofConfiguration.CountPairRCs * 2;

      expected.Total = expected.CountAccounts * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor2);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor4);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";

      try
      {
        quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

        Assert.Fail("An exception should have been thrown due to missing payer account in the quote request");
      }
      catch (Exception ex)
      {
        Assert.IsTrue(ex.Message.Contains("All account payers must be included in the quote request"), "Wrong exception message: " + ex);
      }

      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithMultipleAccountsAndMultiplePOs()
    {
      #region Prepare
      string testName = "QuotingWithMultipleAccountsAndMultiplePOs";
      string testShortName = "Q_MAMPO"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given a quote request for multiple accounts and multiple Product Offerings, When quote is run Then it includes all the usage";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      expected.CountAccounts
        = expected.CountProducts = 4;

      // Create accounts
      var corpAccountHolders = new List<int>();

      for (int i = 1; i < expected.CountAccounts + 1; i++)
      {
        var corpAccountHolder = new CorporateAccountFactory(testShortName + i.ToString(), testRunUniqueIdentifier);

        corpAccountHolder.Instantiate();

        Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
        corpAccountHolders.Add((int)corpAccountHolder.Item._AccountID);
      }

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1; //????

      //Now generate the Product Offerings we need
      List<int> posToAdd = new List<int>();

      for (int i = 1; i < expected.CountProducts + 1; i++)
      {
        pofConfiguration.Name = testShortName + "_" + i;
        pofConfiguration.UniqueIdentifier = testRunUniqueIdentifier + "_" + i;
        IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
        Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
        posToAdd.Add(productOffering.ID);
      }

      //Values to use for verification
      expected.CountNRCs = expected.CountAccounts * expected.CountProducts * pofConfiguration.CountNRCs;
      expected.CountFlatRCs = expected.CountAccounts * expected.CountProducts * pofConfiguration.CountPairRCs * 2; //???

      expected.Total = expected.CountAccounts * expected.CountProducts * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      #endregion

      #region Test and Verify
      //Prepare request
      quoteImpl.Request.Accounts.AddRange(corpAccountHolders);
      quoteImpl.Request.ProductOfferings.AddRange(posToAdd);

      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithUDRCWithBadMetricValues()
    {
      #region Prepare

      string testName = "QuotingWithUDRCWithBadMetricValues";
      string testShortName = "Q_NMV"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      // Create account
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1; //????
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      expected.Total = (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2) + (pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      expected.CountNRCs = 1;
      expected.CountFlatRCs = 2;

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";
      quoteImpl.Request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering, idUDRC: 666666);
      string expectedExceptionMessage = "UDRC metrics not specified properly"; 
      try
      {
          quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

        Assert.Fail("Quote should've been failed because of wrong UDRC ID");
      }
      catch (Exception ex)
      {
          Assert.IsTrue(ex.Message.Contains(expectedExceptionMessage), String.Format("Recived error message : {0}", ex.Message));
      }

      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithGroupSubscription()
    {
      #region Prepare
      string testName = "QuotingWithGroupSubscription";
      string testShortName = "Q_GSub"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      // Create account #1 Corporate
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1;
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      
      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor2);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor3);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now.AddHours(1);
      quoteImpl.Request.Localization = "en-US";
      quoteImpl.Request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);
      quoteImpl.Request.SubscriptionParameters.CorporateAccountId = idAccountToQuoteFor;
      quoteImpl.Request.SubscriptionParameters.IsGroupSubscription = true;

      expected.CountAccounts = quoteImpl.Request.Accounts.Count;
      expected.CountNRCs = pofConfiguration.CountNRCs * expected.CountAccounts;
      expected.CountFlatRCs = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * expected.CountAccounts);
      expected.CountUDRCs = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * expected.CountAccounts);

      expected.TotalForUDRCs = 30;//introduce formula based on PT

      expected.Total = (expected.CountFlatRCs * pofConfiguration.RCAmount) +
                      (expected.CountUDRCs.Value * expected.TotalForUDRCs) +
                      (expected.CountNRCs * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification

      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);


      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void QuotingWithGroupSubscriptionTwoTimes()
    {
      #region Prepare
      string testName = "QuotingWithGroupSubscription";
      string testShortName = "Q_GSub"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      // Create account #1 Corporate
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1;
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      //decimal expectedQuoteTotal = (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2) + (pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor2);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor3);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now.AddHours(1);
      quoteImpl.Request.Localization = "en-US";
      quoteImpl.Request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);
      quoteImpl.Request.SubscriptionParameters.CorporateAccountId = idAccountToQuoteFor;
      quoteImpl.Request.SubscriptionParameters.IsGroupSubscription = true;

      expected.CountAccounts = quoteImpl.Request.Accounts.Count;
      expected.CountNRCs = pofConfiguration.CountNRCs * expected.CountAccounts;
      expected.CountFlatRCs = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * expected.CountAccounts);
      expected.CountUDRCs = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * expected.CountAccounts);

      expected.TotalForUDRCs = 30;//introduce formula based on PT

      expected.Total = (expected.CountFlatRCs * pofConfiguration.RCAmount) +
                                   (expected.CountUDRCs.Value * expected.TotalForUDRCs) +
                                   (expected.CountNRCs * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response1 = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      QuoteResponse response2 = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      Assert.AreEqual(response1.TotalAmount, response2.TotalAmount, "Total amount was different on the second run");


      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void SubscribeAfterQuoting()
    {
      #region Prepare
      string testName = "SubscribeAfterQuoting";
      string testShortName = "Q_SubA"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();

      // Create account
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1; //????
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      expected.Currency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now;
      quoteImpl.Request.Localization = "en-US";
      quoteImpl.Request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);

      expected.CountAccounts = quoteImpl.Request.Accounts.Count;
      expected.CountNRCs = pofConfiguration.CountNRCs * expected.CountAccounts;
      expected.CountFlatRCs = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * expected.CountAccounts);
      expected.CountUDRCs = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * expected.CountAccounts);

      expected.TotalForUDRCs = 30;

      expected.Total = (expected.CountFlatRCs * pofConfiguration.RCAmount) +
                                   (expected.CountUDRCs.Value * expected.TotalForUDRCs) +
                                   (expected.CountNRCs * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      MTSubscription subscription = null;
      MTPCAccount account = null;

      try
      {
        account = SharedTestCode.CurrentProductCatalog.GetAccount(idAccountToQuoteFor);

        var effDate = new MTPCTimeSpanClass
          {
            StartDate = quoteImpl.Request.EffectiveDate,
            StartDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE
          };

        object modifiedDate = MetraTime.Now;
        subscription = account.Subscribe(idProductOfferingToQuoteFor, effDate, out modifiedDate);
      }
      catch (Exception ex)
      {
        Assert.Fail("Creating subscription after quotion failed with exception: " + ex);
      }
      finally
      {
        if (subscription != null)
        {
          account.RemoveSubscription(subscription.ID);
        }
      }

      #endregion
    }

    [TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    public void SubscribeAfterQuotingWithGroupSubscription()
    {
      #region Prepare

      string testName = "SubscribeAfterQuotingWithGroupSubscription";
      string testShortName = "Q_GSubA";
        //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      QuoteImplementationData quoteImpl = new QuoteImplementationData();
      QuoteVerifyData expected = new QuoteVerifyData();


      // Create account #1 Corporate
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1;
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      //decimal expectedQuoteTotal = (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2) + (pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      expected.Currency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor2);
      quoteImpl.Request.Accounts.Add(idAccountToQuoteFor3);
      quoteImpl.Request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      quoteImpl.Request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      quoteImpl.Request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      quoteImpl.Request.ReportParameters = new ReportParams
        {
          PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault
        };
      quoteImpl.Request.EffectiveDate = MetraTime.Now;
      quoteImpl.Request.EffectiveEndDate = MetraTime.Now.AddHours(1);
      quoteImpl.Request.Localization = "en-US";
      quoteImpl.Request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);
      quoteImpl.Request.SubscriptionParameters.CorporateAccountId = idAccountToQuoteFor;
      quoteImpl.Request.SubscriptionParameters.IsGroupSubscription = true;

      expected.CountAccounts = quoteImpl.Request.Accounts.Count;
      expected.CountNRCs = pofConfiguration.CountNRCs * expected.CountAccounts;
      expected.CountFlatRCs = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * expected.CountAccounts);
      expected.CountUDRCs = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * expected.CountAccounts);

      expected.TotalForUDRCs = 30; //introduce formula based on PT

      expected.Total = (expected.CountFlatRCs * pofConfiguration.RCAmount) +
                                   (expected.CountUDRCs.Value * expected.TotalForUDRCs) +
                                   (expected.CountNRCs * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      quoteImpl.Response = QuotingTestScenarios.CreateQuoteAndVerifyResults(quoteImpl, expected);

      var createdGroupSubsciptions = new List<IMTGroupSubscription>();
      //create group subscription
      try
      {        
        var effectiveDate = new MTPCTimeSpanClass
          {
            StartDate = quoteImpl.Request.EffectiveDate,
            StartDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE,
            EndDate = quoteImpl.Request.EffectiveEndDate,
            EndDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE
          };

        //TODO: Figure out correct cycle for group sub or if it should be passed
        var groupSubscriptionCycle = new MTPCCycle
          {
            CycleTypeID = 1,
            EndDayOfMonth = 31
          };

        IMTGroupSubscription mtGroupSubscription = SharedTestCode.CurrentProductCatalog.CreateGroupSubscription();
        mtGroupSubscription.EffectiveDate = effectiveDate;
        mtGroupSubscription.ProductOfferingID = idProductOfferingToQuoteFor;
        mtGroupSubscription.ProportionalDistribution = true;
        mtGroupSubscription.Name = string.Format("TempQuoteGSForPO_{0}", idProductOfferingToQuoteFor);
        mtGroupSubscription.Description = "Group subscription for Quoting. ProductOffering: " +
                                          idProductOfferingToQuoteFor;
        mtGroupSubscription.SupportGroupOps = true;
        mtGroupSubscription.CorporateAccount = quoteImpl.Request.SubscriptionParameters.CorporateAccountId;
        mtGroupSubscription.Cycle = groupSubscriptionCycle;

        foreach (MTPriceableItem pi in SharedTestCode.CurrentProductCatalog.GetProductOffering(idProductOfferingToQuoteFor).GetPriceableItems())
        {
          switch (pi.Kind)
          {
            case MTPCEntityType.PCENTITY_TYPE_RECURRING:
                  mtGroupSubscription.SetChargeAccount(pi.ID, quoteImpl.Request.SubscriptionParameters.CorporateAccountId,
                                                   quoteImpl.Request.EffectiveDate, quoteImpl.Request.EffectiveEndDate);
              break;
            case MTPCEntityType.PCENTITY_TYPE_RECURRING_UNIT_DEPENDENT:
              {
                  mtGroupSubscription.SetChargeAccount(pi.ID, quoteImpl.Request.SubscriptionParameters.CorporateAccountId,
                                                     quoteImpl.Request.EffectiveDate, quoteImpl.Request.EffectiveEndDate);


                  if (quoteImpl.Request.SubscriptionParameters.UDRCValues.ContainsKey(idProductOfferingToQuoteFor.ToString()))
                {
                    foreach (var udrcInstanceValue in quoteImpl.Request.SubscriptionParameters.UDRCValues[idProductOfferingToQuoteFor.ToString()])
                  {
                    mtGroupSubscription.SetRecurringChargeUnitValue(udrcInstanceValue.UDRC_Id,
                                                                    udrcInstanceValue.Value,
                                                                    udrcInstanceValue.StartDate,
                                                                    udrcInstanceValue.EndDate);
                  }
                }
                break;
              }
          }
        }        

        mtGroupSubscription.Save();
        //createdGroupSubsciptions.Add(mtGroupSubscription);

        foreach (int idAccount in quoteImpl.Request.Accounts)
        {
          var mtGsubMember = new MTGSubMember
            {
              AccountID = idAccount,
              StartDate = quoteImpl.Request.EffectiveDate,
              EndDate = quoteImpl.Request.EffectiveEndDate
            };

          mtGroupSubscription.AddAccount(mtGsubMember);
        }

        mtGroupSubscription.Save();
        createdGroupSubsciptions.Add(mtGroupSubscription);
      }
      catch (Exception ex)
      {
        Assert.Fail("Creating group subscription after quoting failed with exception: " + ex);
      }
      finally
      {
        // Remove group subscriptions
        foreach (var subscription in createdGroupSubsciptions)
        {
          // Unsubscribe members
          foreach (var idAccount in quoteImpl.Request.Accounts)
          {
            IMTGSubMember gsmember = new MTGSubMemberClass();
            gsmember.AccountID = idAccount;

            if (subscription.FindMember(idAccount, quoteImpl.Request.EffectiveDate) != null)
            {
              subscription.UnsubscribeMember((MTGSubMember) gsmember);
            }
          }

          using (IMTNonServicedConnection conn = ConnectionManager.CreateNonServicedConnection())
          {
            using (IMTCallableStatement stmt = conn.CreateCallableStatement("REMOVEGSUBS_QUOTING"))
            {
              stmt.AddParam("p_id_sub", MTParameterType.Integer, subscription.ID);
              stmt.AddParam("p_systemdate", MTParameterType.DateTime, quoteImpl.Request.EffectiveDate);
              stmt.AddParam("p_status", MTParameterType.Integer, 0);
              stmt.ExecuteNonQuery();
            }

            using (var stmt = conn.CreateAdapterStatement("Queries\\Quoting", "__REMOVE_RC_METRIC_VALUES__"))
            {
              stmt.AddParam("%%ID_SUB%%", subscription.ID);
              stmt.ExecuteNonQuery();
            }
          }
        }
      }

      #endregion
    }

    //[TestMethod, MTFunctionalTest(TestAreas.Quoting)]
    //This test is now covered by the other test cases that include several NRCs and several RCs
    //public void QuotingProductOfferingWithSeveralRCsAndSeveralNRCs()
    //{
    //  #region Prepare

    //  var pofConfiguration = new ProductOfferingFactoryConfiguration();
    //  pofConfiguration.Name = "Quote_Basic";
    //  pofConfiguration.UniqueIdentifier = MetraTime.Now.ToString();

    //  // Create account
    //  CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(pofConfiguration.Name, pofConfiguration.UniqueIdentifier);
    //  corpAccountHolder.Instantiate();

    //  Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
    //  pofConfiguration.IdAccount = (int)corpAccountHolder.Item._AccountID;

    //  // Create/Verify Product Offering Exists
    //  pofConfiguration.RCAmount = 19.95M;
    //  pofConfiguration.NRCAmount = 29.95M;
    //  pofConfiguration.RCPerSubscriptionAmount = 9.95M;

    //  pofConfiguration.CountNRCs = 2;
    //  pofConfiguration.CountPairRCs = 2;

    //  IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
    //  Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
    //  int idProductOfferingToQuoteFor = productOffering.ID;

    //  //Values to use for verification
    //  pofConfiguration.TotalAmount = pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 +
    //                                 pofConfiguration.CountNRCs * pofConfiguration.NRCAmount;
    //  pofConfiguration.Currency = "USD";

    //  #endregion

    //  #region Test and Verify
    //  //Prepare request
    //  QuoteRequest request = new QuoteRequest();
    //  request.Accounts.Add(pofConfiguration.IdAccount);
    //  request.ProductOfferings.Add(idProductOfferingToQuoteFor);
    //  request.QuoteIdentifier = "MyQuoteId-1234";
    //  request.QuoteDescription = "Quote generated by Automated Test: " + "QuotingProductOfferingWithSeveralRCsAndSeveralNRCs";
    //  request.ReportParameters = new ReportParams(){PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault};
    //  request.EffectiveDate = MetraTime.Now;
    //  request.EffectiveEndDate = MetraTime.Now;
    //  request.Localization = "en-US";

    //  //Give request to testing scenario along with expected results for verification; get back response for further verification
    //  QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
    //                                                                            pofConfiguration.TotalAmount,
    //                                                                            pofConfiguration.Currency,
    //                                                                            pofConfiguration.CountPairRCs * 2,
    //                                                                            pofConfiguration.CountNRCs);
    //  #endregion
    //}

  }
}
