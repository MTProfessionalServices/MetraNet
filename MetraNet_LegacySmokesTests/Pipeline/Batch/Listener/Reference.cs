//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
// 
#pragma warning disable 1591

namespace MetraTech.BatchListener.Test.localhost {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ListenerSoap", Namespace="http://metratech.com/webservices")]
    public partial class Listener : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CreateOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoadByUIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAsActiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAsBackoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAsFailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAsDismissedOperationCompleted;
        
        private System.Threading.SendOrPostCallback MarkAsCompletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMeteredCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Listener() {
          this.Url = "http://localhost/Batch/Listener.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CreateCompletedEventHandler CreateCompleted;
        
        /// <remarks/>
        public event LoadByNameCompletedEventHandler LoadByNameCompleted;
        
        /// <remarks/>
        public event LoadByUIDCompletedEventHandler LoadByUIDCompleted;
        
        /// <remarks/>
        public event MarkAsActiveCompletedEventHandler MarkAsActiveCompleted;
        
        /// <remarks/>
        public event MarkAsBackoutCompletedEventHandler MarkAsBackoutCompleted;
        
        /// <remarks/>
        public event MarkAsFailedCompletedEventHandler MarkAsFailedCompleted;
        
        /// <remarks/>
        public event MarkAsDismissedCompletedEventHandler MarkAsDismissedCompleted;
        
        /// <remarks/>
        public event MarkAsCompletedCompletedEventHandler MarkAsCompletedCompleted;
        
        /// <remarks/>
        public event UpdateMeteredCountCompletedEventHandler UpdateMeteredCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/Create", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Create(BatchObject batchobject) {
            object[] results = this.Invoke("Create", new object[] {
                        batchobject});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAsync(BatchObject batchobject) {
            this.CreateAsync(batchobject, null);
        }
        
        /// <remarks/>
        public void CreateAsync(BatchObject batchobject, object userState) {
            if ((this.CreateOperationCompleted == null)) {
                this.CreateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOperationCompleted);
            }
            this.InvokeAsync("Create", new object[] {
                        batchobject}, this.CreateOperationCompleted, userState);
        }
        
        private void OnCreateOperationCompleted(object arg) {
            if ((this.CreateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateCompleted(this, new CreateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/LoadByName", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BatchObject LoadByName(string Name, string Namespace, string SequenceNumber) {
            object[] results = this.Invoke("LoadByName", new object[] {
                        Name,
                        Namespace,
                        SequenceNumber});
            return ((BatchObject)(results[0]));
        }
        
        /// <remarks/>
        public void LoadByNameAsync(string Name, string Namespace, string SequenceNumber) {
            this.LoadByNameAsync(Name, Namespace, SequenceNumber, null);
        }
        
        /// <remarks/>
        public void LoadByNameAsync(string Name, string Namespace, string SequenceNumber, object userState) {
            if ((this.LoadByNameOperationCompleted == null)) {
                this.LoadByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadByNameOperationCompleted);
            }
            this.InvokeAsync("LoadByName", new object[] {
                        Name,
                        Namespace,
                        SequenceNumber}, this.LoadByNameOperationCompleted, userState);
        }
        
        private void OnLoadByNameOperationCompleted(object arg) {
            if ((this.LoadByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadByNameCompleted(this, new LoadByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/LoadByUID", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BatchObject LoadByUID(string UID) {
            object[] results = this.Invoke("LoadByUID", new object[] {
                        UID});
            return ((BatchObject)(results[0]));
        }
        
        /// <remarks/>
        public void LoadByUIDAsync(string UID) {
            this.LoadByUIDAsync(UID, null);
        }
        
        /// <remarks/>
        public void LoadByUIDAsync(string UID, object userState) {
            if ((this.LoadByUIDOperationCompleted == null)) {
                this.LoadByUIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadByUIDOperationCompleted);
            }
            this.InvokeAsync("LoadByUID", new object[] {
                        UID}, this.LoadByUIDOperationCompleted, userState);
        }
        
        private void OnLoadByUIDOperationCompleted(object arg) {
            if ((this.LoadByUIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadByUIDCompleted(this, new LoadByUIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/MarkAsActive", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkAsActive(string UID, string Comment) {
            this.Invoke("MarkAsActive", new object[] {
                        UID,
                        Comment});
        }
        
        /// <remarks/>
        public void MarkAsActiveAsync(string UID, string Comment) {
            this.MarkAsActiveAsync(UID, Comment, null);
        }
        
        /// <remarks/>
        public void MarkAsActiveAsync(string UID, string Comment, object userState) {
            if ((this.MarkAsActiveOperationCompleted == null)) {
                this.MarkAsActiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAsActiveOperationCompleted);
            }
            this.InvokeAsync("MarkAsActive", new object[] {
                        UID,
                        Comment}, this.MarkAsActiveOperationCompleted, userState);
        }
        
        private void OnMarkAsActiveOperationCompleted(object arg) {
            if ((this.MarkAsActiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAsActiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/MarkAsBackout", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkAsBackout(string UID, string Comment) {
            this.Invoke("MarkAsBackout", new object[] {
                        UID,
                        Comment});
        }
        
        /// <remarks/>
        public void MarkAsBackoutAsync(string UID, string Comment) {
            this.MarkAsBackoutAsync(UID, Comment, null);
        }
        
        /// <remarks/>
        public void MarkAsBackoutAsync(string UID, string Comment, object userState) {
            if ((this.MarkAsBackoutOperationCompleted == null)) {
                this.MarkAsBackoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAsBackoutOperationCompleted);
            }
            this.InvokeAsync("MarkAsBackout", new object[] {
                        UID,
                        Comment}, this.MarkAsBackoutOperationCompleted, userState);
        }
        
        private void OnMarkAsBackoutOperationCompleted(object arg) {
            if ((this.MarkAsBackoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAsBackoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/MarkAsFailed", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkAsFailed(string UID, string Comment) {
            this.Invoke("MarkAsFailed", new object[] {
                        UID,
                        Comment});
        }
        
        /// <remarks/>
        public void MarkAsFailedAsync(string UID, string Comment) {
            this.MarkAsFailedAsync(UID, Comment, null);
        }
        
        /// <remarks/>
        public void MarkAsFailedAsync(string UID, string Comment, object userState) {
            if ((this.MarkAsFailedOperationCompleted == null)) {
                this.MarkAsFailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAsFailedOperationCompleted);
            }
            this.InvokeAsync("MarkAsFailed", new object[] {
                        UID,
                        Comment}, this.MarkAsFailedOperationCompleted, userState);
        }
        
        private void OnMarkAsFailedOperationCompleted(object arg) {
            if ((this.MarkAsFailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAsFailedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/MarkAsDismissed", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkAsDismissed(string UID, string Comment) {
            this.Invoke("MarkAsDismissed", new object[] {
                        UID,
                        Comment});
        }
        
        /// <remarks/>
        public void MarkAsDismissedAsync(string UID, string Comment) {
            this.MarkAsDismissedAsync(UID, Comment, null);
        }
        
        /// <remarks/>
        public void MarkAsDismissedAsync(string UID, string Comment, object userState) {
            if ((this.MarkAsDismissedOperationCompleted == null)) {
                this.MarkAsDismissedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAsDismissedOperationCompleted);
            }
            this.InvokeAsync("MarkAsDismissed", new object[] {
                        UID,
                        Comment}, this.MarkAsDismissedOperationCompleted, userState);
        }
        
        private void OnMarkAsDismissedOperationCompleted(object arg) {
            if ((this.MarkAsDismissedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAsDismissedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/MarkAsCompleted", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MarkAsCompleted(string UID, string Comment) {
            this.Invoke("MarkAsCompleted", new object[] {
                        UID,
                        Comment});
        }
        
        /// <remarks/>
        public void MarkAsCompletedAsync(string UID, string Comment) {
            this.MarkAsCompletedAsync(UID, Comment, null);
        }
        
        /// <remarks/>
        public void MarkAsCompletedAsync(string UID, string Comment, object userState) {
            if ((this.MarkAsCompletedOperationCompleted == null)) {
                this.MarkAsCompletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMarkAsCompletedOperationCompleted);
            }
            this.InvokeAsync("MarkAsCompleted", new object[] {
                        UID,
                        Comment}, this.MarkAsCompletedOperationCompleted, userState);
        }
        
        private void OnMarkAsCompletedOperationCompleted(object arg) {
            if ((this.MarkAsCompletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MarkAsCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://metratech.com/webservices/UpdateMeteredCount", RequestNamespace="http://metratech.com/webservices", ResponseNamespace="http://metratech.com/webservices", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMeteredCount(string UID, int MeteredCount) {
            this.Invoke("UpdateMeteredCount", new object[] {
                        UID,
                        MeteredCount});
        }
        
        /// <remarks/>
        public void UpdateMeteredCountAsync(string UID, int MeteredCount) {
            this.UpdateMeteredCountAsync(UID, MeteredCount, null);
        }
        
        /// <remarks/>
        public void UpdateMeteredCountAsync(string UID, int MeteredCount, object userState) {
            if ((this.UpdateMeteredCountOperationCompleted == null)) {
                this.UpdateMeteredCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMeteredCountOperationCompleted);
            }
            this.InvokeAsync("UpdateMeteredCount", new object[] {
                        UID,
                        MeteredCount}, this.UpdateMeteredCountOperationCompleted, userState);
        }
        
        private void OnUpdateMeteredCountOperationCompleted(object arg) {
            if ((this.UpdateMeteredCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMeteredCountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://metratech.com/webservices")]
    public partial class BatchObject {
        
        private int idField;
        
        private string nameField;
        
        private string namespaceField;
        
        private string statusField;
        
        private System.DateTime creationDateField;
        
        private string sourceField;
        
        private int completedCountField;
        
        private int expectedCountField;
        
        private int failureCountField;
        
        private string sequenceNumberField;
        
        private System.DateTime sourceCreationDateField;
        
        private string uIDField;
        
        private int meteredCountField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Namespace {
            get {
                return this.namespaceField;
            }
            set {
                this.namespaceField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public int CompletedCount {
            get {
                return this.completedCountField;
            }
            set {
                this.completedCountField = value;
            }
        }
        
        /// <remarks/>
        public int ExpectedCount {
            get {
                return this.expectedCountField;
            }
            set {
                this.expectedCountField = value;
            }
        }
        
        /// <remarks/>
        public int FailureCount {
            get {
                return this.failureCountField;
            }
            set {
                this.failureCountField = value;
            }
        }
        
        /// <remarks/>
        public string SequenceNumber {
            get {
                return this.sequenceNumberField;
            }
            set {
                this.sequenceNumberField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SourceCreationDate {
            get {
                return this.sourceCreationDateField;
            }
            set {
                this.sourceCreationDateField = value;
            }
        }
        
        /// <remarks/>
        public string UID {
            get {
                return this.uIDField;
            }
            set {
                this.uIDField = value;
            }
        }
        
        /// <remarks/>
        public int MeteredCount {
            get {
                return this.meteredCountField;
            }
            set {
                this.meteredCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void CreateCompletedEventHandler(object sender, CreateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void LoadByNameCompletedEventHandler(object sender, LoadByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BatchObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BatchObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void LoadByUIDCompletedEventHandler(object sender, LoadByUIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadByUIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoadByUIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BatchObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BatchObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MarkAsActiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MarkAsBackoutCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MarkAsFailedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MarkAsDismissedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void MarkAsCompletedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void UpdateMeteredCountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591