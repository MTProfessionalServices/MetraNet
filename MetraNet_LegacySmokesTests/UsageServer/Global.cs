//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MetraTech.UsageServer.Test {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class mt_config : DataSet {
        
        private enum_spacesDataTable tableenum_spaces;
        
        private enum_spaceDataTable tableenum_space;
        
        private enumsDataTable tableenums;
        
        private _enumDataTable table_enum;
        
        private entriesDataTable tableentries;
        
        private entryDataTable tableentry;
        
        private DataRelation relationentries_entry;
        
        private DataRelation relationenum_entries;
        
        private DataRelation relationenums_enum;
        
        private DataRelation relationenum_space_enums;
        
        private DataRelation relationenum_spaces_enum_space;
        
        public mt_config() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected mt_config(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["enum_spaces"] != null)) {
                    this.Tables.Add(new enum_spacesDataTable(ds.Tables["enum_spaces"]));
                }
                if ((ds.Tables["enum_space"] != null)) {
                    this.Tables.Add(new enum_spaceDataTable(ds.Tables["enum_space"]));
                }
                if ((ds.Tables["enums"] != null)) {
                    this.Tables.Add(new enumsDataTable(ds.Tables["enums"]));
                }
                if ((ds.Tables["enum"] != null)) {
                    this.Tables.Add(new _enumDataTable(ds.Tables["enum"]));
                }
                if ((ds.Tables["entries"] != null)) {
                    this.Tables.Add(new entriesDataTable(ds.Tables["entries"]));
                }
                if ((ds.Tables["entry"] != null)) {
                    this.Tables.Add(new entryDataTable(ds.Tables["entry"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public enum_spacesDataTable enum_spaces {
            get {
                return this.tableenum_spaces;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public enum_spaceDataTable enum_space {
            get {
                return this.tableenum_space;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public enumsDataTable enums {
            get {
                return this.tableenums;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public _enumDataTable _enum {
            get {
                return this.table_enum;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public entriesDataTable entries {
            get {
                return this.tableentries;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public entryDataTable entry {
            get {
                return this.tableentry;
            }
        }
        
        public override DataSet Clone() {
            mt_config cln = ((mt_config)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["enum_spaces"] != null)) {
                this.Tables.Add(new enum_spacesDataTable(ds.Tables["enum_spaces"]));
            }
            if ((ds.Tables["enum_space"] != null)) {
                this.Tables.Add(new enum_spaceDataTable(ds.Tables["enum_space"]));
            }
            if ((ds.Tables["enums"] != null)) {
                this.Tables.Add(new enumsDataTable(ds.Tables["enums"]));
            }
            if ((ds.Tables["enum"] != null)) {
                this.Tables.Add(new _enumDataTable(ds.Tables["enum"]));
            }
            if ((ds.Tables["entries"] != null)) {
                this.Tables.Add(new entriesDataTable(ds.Tables["entries"]));
            }
            if ((ds.Tables["entry"] != null)) {
                this.Tables.Add(new entryDataTable(ds.Tables["entry"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableenum_spaces = ((enum_spacesDataTable)(this.Tables["enum_spaces"]));
            if ((this.tableenum_spaces != null)) {
                this.tableenum_spaces.InitVars();
            }
            this.tableenum_space = ((enum_spaceDataTable)(this.Tables["enum_space"]));
            if ((this.tableenum_space != null)) {
                this.tableenum_space.InitVars();
            }
            this.tableenums = ((enumsDataTable)(this.Tables["enums"]));
            if ((this.tableenums != null)) {
                this.tableenums.InitVars();
            }
            this.table_enum = ((_enumDataTable)(this.Tables["enum"]));
            if ((this.table_enum != null)) {
                this.table_enum.InitVars();
            }
            this.tableentries = ((entriesDataTable)(this.Tables["entries"]));
            if ((this.tableentries != null)) {
                this.tableentries.InitVars();
            }
            this.tableentry = ((entryDataTable)(this.Tables["entry"]));
            if ((this.tableentry != null)) {
                this.tableentry.InitVars();
            }
            this.relationentries_entry = this.Relations["entries_entry"];
            this.relationenum_entries = this.Relations["enum_entries"];
            this.relationenums_enum = this.Relations["enums_enum"];
            this.relationenum_space_enums = this.Relations["enum_space_enums"];
            this.relationenum_spaces_enum_space = this.Relations["enum_spaces_enum_space"];
        }
        
        private void InitClass() {
            this.DataSetName = "mt_config";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableenum_spaces = new enum_spacesDataTable();
            this.Tables.Add(this.tableenum_spaces);
            this.tableenum_space = new enum_spaceDataTable();
            this.Tables.Add(this.tableenum_space);
            this.tableenums = new enumsDataTable();
            this.Tables.Add(this.tableenums);
            this.table_enum = new _enumDataTable();
            this.Tables.Add(this.table_enum);
            this.tableentries = new entriesDataTable();
            this.Tables.Add(this.tableentries);
            this.tableentry = new entryDataTable();
            this.Tables.Add(this.tableentry);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("enum_spaces_enum_space", new DataColumn[] {
                        this.tableenum_spaces.enum_spaces_IdColumn}, new DataColumn[] {
                        this.tableenum_space.enum_spaces_IdColumn});
            this.tableenum_space.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("enum_space_enums", new DataColumn[] {
                        this.tableenum_space.enum_space_IdColumn}, new DataColumn[] {
                        this.tableenums.enum_space_IdColumn});
            this.tableenums.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("enums_enum", new DataColumn[] {
                        this.tableenums.enums_IdColumn}, new DataColumn[] {
                        this.table_enum.enums_IdColumn});
            this.table_enum.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("enum_entries", new DataColumn[] {
                        this.table_enum.enum_IdColumn}, new DataColumn[] {
                        this.tableentries.enum_IdColumn});
            this.tableentries.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("entries_entry", new DataColumn[] {
                        this.tableentries.entries_IdColumn}, new DataColumn[] {
                        this.tableentry.entries_IdColumn});
            this.tableentry.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationentries_entry = new DataRelation("entries_entry", new DataColumn[] {
                        this.tableentries.entries_IdColumn}, new DataColumn[] {
                        this.tableentry.entries_IdColumn}, false);
            this.relationentries_entry.Nested = true;
            this.Relations.Add(this.relationentries_entry);
            this.relationenum_entries = new DataRelation("enum_entries", new DataColumn[] {
                        this.table_enum.enum_IdColumn}, new DataColumn[] {
                        this.tableentries.enum_IdColumn}, false);
            this.relationenum_entries.Nested = true;
            this.Relations.Add(this.relationenum_entries);
            this.relationenums_enum = new DataRelation("enums_enum", new DataColumn[] {
                        this.tableenums.enums_IdColumn}, new DataColumn[] {
                        this.table_enum.enums_IdColumn}, false);
            this.relationenums_enum.Nested = true;
            this.Relations.Add(this.relationenums_enum);
            this.relationenum_space_enums = new DataRelation("enum_space_enums", new DataColumn[] {
                        this.tableenum_space.enum_space_IdColumn}, new DataColumn[] {
                        this.tableenums.enum_space_IdColumn}, false);
            this.relationenum_space_enums.Nested = true;
            this.Relations.Add(this.relationenum_space_enums);
            this.relationenum_spaces_enum_space = new DataRelation("enum_spaces_enum_space", new DataColumn[] {
                        this.tableenum_spaces.enum_spaces_IdColumn}, new DataColumn[] {
                        this.tableenum_space.enum_spaces_IdColumn}, false);
            this.relationenum_spaces_enum_space.Nested = true;
            this.Relations.Add(this.relationenum_spaces_enum_space);
        }
        
        private bool ShouldSerializeenum_spaces() {
            return false;
        }
        
        private bool ShouldSerializeenum_space() {
            return false;
        }
        
        private bool ShouldSerializeenums() {
            return false;
        }
        
        private bool ShouldSerialize_enum() {
            return false;
        }
        
        private bool ShouldSerializeentries() {
            return false;
        }
        
        private bool ShouldSerializeentry() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void enum_spacesRowChangeEventHandler(object sender, enum_spacesRowChangeEvent e);
        
        public delegate void enum_spaceRowChangeEventHandler(object sender, enum_spaceRowChangeEvent e);
        
        public delegate void enumsRowChangeEventHandler(object sender, enumsRowChangeEvent e);
        
        public delegate void _enumRowChangeEventHandler(object sender, _enumRowChangeEvent e);
        
        public delegate void entriesRowChangeEventHandler(object sender, entriesRowChangeEvent e);
        
        public delegate void entryRowChangeEventHandler(object sender, entryRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enum_spacesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnenum_spaces_Id;
            
            internal enum_spacesDataTable() : 
                    base("enum_spaces") {
                this.InitClass();
            }
            
            internal enum_spacesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn enum_spaces_IdColumn {
                get {
                    return this.columnenum_spaces_Id;
                }
            }
            
            public enum_spacesRow this[int index] {
                get {
                    return ((enum_spacesRow)(this.Rows[index]));
                }
            }
            
            public event enum_spacesRowChangeEventHandler enum_spacesRowChanged;
            
            public event enum_spacesRowChangeEventHandler enum_spacesRowChanging;
            
            public event enum_spacesRowChangeEventHandler enum_spacesRowDeleted;
            
            public event enum_spacesRowChangeEventHandler enum_spacesRowDeleting;
            
            public void Addenum_spacesRow(enum_spacesRow row) {
                this.Rows.Add(row);
            }
            
            public enum_spacesRow Addenum_spacesRow() {
                enum_spacesRow rowenum_spacesRow = ((enum_spacesRow)(this.NewRow()));
                rowenum_spacesRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowenum_spacesRow);
                return rowenum_spacesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                enum_spacesDataTable cln = ((enum_spacesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new enum_spacesDataTable();
            }
            
            internal void InitVars() {
                this.columnenum_spaces_Id = this.Columns["enum_spaces_Id"];
            }
            
            private void InitClass() {
                this.columnenum_spaces_Id = new DataColumn("enum_spaces_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenum_spaces_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnenum_spaces_Id}, true));
                this.columnenum_spaces_Id.AutoIncrement = true;
                this.columnenum_spaces_Id.AllowDBNull = false;
                this.columnenum_spaces_Id.Unique = true;
            }
            
            public enum_spacesRow Newenum_spacesRow() {
                return ((enum_spacesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new enum_spacesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(enum_spacesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.enum_spacesRowChanged != null)) {
                    this.enum_spacesRowChanged(this, new enum_spacesRowChangeEvent(((enum_spacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.enum_spacesRowChanging != null)) {
                    this.enum_spacesRowChanging(this, new enum_spacesRowChangeEvent(((enum_spacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.enum_spacesRowDeleted != null)) {
                    this.enum_spacesRowDeleted(this, new enum_spacesRowChangeEvent(((enum_spacesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.enum_spacesRowDeleting != null)) {
                    this.enum_spacesRowDeleting(this, new enum_spacesRowChangeEvent(((enum_spacesRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeenum_spacesRow(enum_spacesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enum_spacesRow : DataRow {
            
            private enum_spacesDataTable tableenum_spaces;
            
            internal enum_spacesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableenum_spaces = ((enum_spacesDataTable)(this.Table));
            }
            
            public enum_spaceRow[] Getenum_spaceRows() {
                return ((enum_spaceRow[])(this.GetChildRows(this.Table.ChildRelations["enum_spaces_enum_space"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enum_spacesRowChangeEvent : EventArgs {
            
            private enum_spacesRow eventRow;
            
            private DataRowAction eventAction;
            
            public enum_spacesRowChangeEvent(enum_spacesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public enum_spacesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enum_spaceDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columndescription;
            
            private DataColumn columnname;
            
            private DataColumn columnenum_space_Id;
            
            private DataColumn columnenum_spaces_Id;
            
            internal enum_spaceDataTable() : 
                    base("enum_space") {
                this.InitClass();
            }
            
            internal enum_spaceDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn enum_space_IdColumn {
                get {
                    return this.columnenum_space_Id;
                }
            }
            
            internal DataColumn enum_spaces_IdColumn {
                get {
                    return this.columnenum_spaces_Id;
                }
            }
            
            public enum_spaceRow this[int index] {
                get {
                    return ((enum_spaceRow)(this.Rows[index]));
                }
            }
            
            public event enum_spaceRowChangeEventHandler enum_spaceRowChanged;
            
            public event enum_spaceRowChangeEventHandler enum_spaceRowChanging;
            
            public event enum_spaceRowChangeEventHandler enum_spaceRowDeleted;
            
            public event enum_spaceRowChangeEventHandler enum_spaceRowDeleting;
            
            public void Addenum_spaceRow(enum_spaceRow row) {
                this.Rows.Add(row);
            }
            
            public enum_spaceRow Addenum_spaceRow(string description, string name, enum_spacesRow parentenum_spacesRowByenum_spaces_enum_space) {
                enum_spaceRow rowenum_spaceRow = ((enum_spaceRow)(this.NewRow()));
                rowenum_spaceRow.ItemArray = new object[] {
                        description,
                        name,
                        null,
                        parentenum_spacesRowByenum_spaces_enum_space[0]};
                this.Rows.Add(rowenum_spaceRow);
                return rowenum_spaceRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                enum_spaceDataTable cln = ((enum_spaceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new enum_spaceDataTable();
            }
            
            internal void InitVars() {
                this.columndescription = this.Columns["description"];
                this.columnname = this.Columns["name"];
                this.columnenum_space_Id = this.Columns["enum_space_Id"];
                this.columnenum_spaces_Id = this.Columns["enum_spaces_Id"];
            }
            
            private void InitClass() {
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnenum_space_Id = new DataColumn("enum_space_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenum_space_Id);
                this.columnenum_spaces_Id = new DataColumn("enum_spaces_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenum_spaces_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnenum_space_Id}, true));
                this.columnname.Namespace = "";
                this.columnenum_space_Id.AutoIncrement = true;
                this.columnenum_space_Id.AllowDBNull = false;
                this.columnenum_space_Id.Unique = true;
            }
            
            public enum_spaceRow Newenum_spaceRow() {
                return ((enum_spaceRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new enum_spaceRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(enum_spaceRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.enum_spaceRowChanged != null)) {
                    this.enum_spaceRowChanged(this, new enum_spaceRowChangeEvent(((enum_spaceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.enum_spaceRowChanging != null)) {
                    this.enum_spaceRowChanging(this, new enum_spaceRowChangeEvent(((enum_spaceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.enum_spaceRowDeleted != null)) {
                    this.enum_spaceRowDeleted(this, new enum_spaceRowChangeEvent(((enum_spaceRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.enum_spaceRowDeleting != null)) {
                    this.enum_spaceRowDeleting(this, new enum_spaceRowChangeEvent(((enum_spaceRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeenum_spaceRow(enum_spaceRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enum_spaceRow : DataRow {
            
            private enum_spaceDataTable tableenum_space;
            
            internal enum_spaceRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableenum_space = ((enum_spaceDataTable)(this.Table));
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableenum_space.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableenum_space.descriptionColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableenum_space.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableenum_space.nameColumn] = value;
                }
            }
            
            public enum_spacesRow enum_spacesRow {
                get {
                    return ((enum_spacesRow)(this.GetParentRow(this.Table.ParentRelations["enum_spaces_enum_space"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["enum_spaces_enum_space"]);
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableenum_space.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.tableenum_space.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableenum_space.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableenum_space.nameColumn] = System.Convert.DBNull;
            }
            
            public enumsRow[] GetenumsRows() {
                return ((enumsRow[])(this.GetChildRows(this.Table.ChildRelations["enum_space_enums"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enum_spaceRowChangeEvent : EventArgs {
            
            private enum_spaceRow eventRow;
            
            private DataRowAction eventAction;
            
            public enum_spaceRowChangeEvent(enum_spaceRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public enum_spaceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enumsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnenums_Id;
            
            private DataColumn columnenum_space_Id;
            
            internal enumsDataTable() : 
                    base("enums") {
                this.InitClass();
            }
            
            internal enumsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn enums_IdColumn {
                get {
                    return this.columnenums_Id;
                }
            }
            
            internal DataColumn enum_space_IdColumn {
                get {
                    return this.columnenum_space_Id;
                }
            }
            
            public enumsRow this[int index] {
                get {
                    return ((enumsRow)(this.Rows[index]));
                }
            }
            
            public event enumsRowChangeEventHandler enumsRowChanged;
            
            public event enumsRowChangeEventHandler enumsRowChanging;
            
            public event enumsRowChangeEventHandler enumsRowDeleted;
            
            public event enumsRowChangeEventHandler enumsRowDeleting;
            
            public void AddenumsRow(enumsRow row) {
                this.Rows.Add(row);
            }
            
            public enumsRow AddenumsRow(enum_spaceRow parentenum_spaceRowByenum_space_enums) {
                enumsRow rowenumsRow = ((enumsRow)(this.NewRow()));
                rowenumsRow.ItemArray = new object[] {
                        null,
                        parentenum_spaceRowByenum_space_enums[2]};
                this.Rows.Add(rowenumsRow);
                return rowenumsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                enumsDataTable cln = ((enumsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new enumsDataTable();
            }
            
            internal void InitVars() {
                this.columnenums_Id = this.Columns["enums_Id"];
                this.columnenum_space_Id = this.Columns["enum_space_Id"];
            }
            
            private void InitClass() {
                this.columnenums_Id = new DataColumn("enums_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenums_Id);
                this.columnenum_space_Id = new DataColumn("enum_space_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenum_space_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnenums_Id}, true));
                this.columnenums_Id.AutoIncrement = true;
                this.columnenums_Id.AllowDBNull = false;
                this.columnenums_Id.Unique = true;
            }
            
            public enumsRow NewenumsRow() {
                return ((enumsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new enumsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(enumsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.enumsRowChanged != null)) {
                    this.enumsRowChanged(this, new enumsRowChangeEvent(((enumsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.enumsRowChanging != null)) {
                    this.enumsRowChanging(this, new enumsRowChangeEvent(((enumsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.enumsRowDeleted != null)) {
                    this.enumsRowDeleted(this, new enumsRowChangeEvent(((enumsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.enumsRowDeleting != null)) {
                    this.enumsRowDeleting(this, new enumsRowChangeEvent(((enumsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveenumsRow(enumsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enumsRow : DataRow {
            
            private enumsDataTable tableenums;
            
            internal enumsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableenums = ((enumsDataTable)(this.Table));
            }
            
            public enum_spaceRow enum_spaceRow {
                get {
                    return ((enum_spaceRow)(this.GetParentRow(this.Table.ParentRelations["enum_space_enums"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["enum_space_enums"]);
                }
            }
            
            public _enumRow[] GetenumRows() {
                return ((_enumRow[])(this.GetChildRows(this.Table.ChildRelations["enums_enum"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class enumsRowChangeEvent : EventArgs {
            
            private enumsRow eventRow;
            
            private DataRowAction eventAction;
            
            public enumsRowChangeEvent(enumsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public enumsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _enumDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columndescription;
            
            private DataColumn columnname;
            
            private DataColumn columnenum_Id;
            
            private DataColumn columnenums_Id;
            
            internal _enumDataTable() : 
                    base("enum") {
                this.InitClass();
            }
            
            internal _enumDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn enum_IdColumn {
                get {
                    return this.columnenum_Id;
                }
            }
            
            internal DataColumn enums_IdColumn {
                get {
                    return this.columnenums_Id;
                }
            }
            
            public _enumRow this[int index] {
                get {
                    return ((_enumRow)(this.Rows[index]));
                }
            }
            
            public event _enumRowChangeEventHandler _enumRowChanged;
            
            public event _enumRowChangeEventHandler _enumRowChanging;
            
            public event _enumRowChangeEventHandler _enumRowDeleted;
            
            public event _enumRowChangeEventHandler _enumRowDeleting;
            
            public void Add_enumRow(_enumRow row) {
                this.Rows.Add(row);
            }
            
            public _enumRow Add_enumRow(string description, string name, enumsRow parentenumsRowByenums_enum) {
                _enumRow row_enumRow = ((_enumRow)(this.NewRow()));
                row_enumRow.ItemArray = new object[] {
                        description,
                        name,
                        null,
                        parentenumsRowByenums_enum[0]};
                this.Rows.Add(row_enumRow);
                return row_enumRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                _enumDataTable cln = ((_enumDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new _enumDataTable();
            }
            
            internal void InitVars() {
                this.columndescription = this.Columns["description"];
                this.columnname = this.Columns["name"];
                this.columnenum_Id = this.Columns["enum_Id"];
                this.columnenums_Id = this.Columns["enums_Id"];
            }
            
            private void InitClass() {
                this.columndescription = new DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnenum_Id = new DataColumn("enum_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenum_Id);
                this.columnenums_Id = new DataColumn("enums_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenums_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnenum_Id}, true));
                this.columnname.Namespace = "";
                this.columnenum_Id.AutoIncrement = true;
                this.columnenum_Id.AllowDBNull = false;
                this.columnenum_Id.Unique = true;
            }
            
            public _enumRow New_enumRow() {
                return ((_enumRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new _enumRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(_enumRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this._enumRowChanged != null)) {
                    this._enumRowChanged(this, new _enumRowChangeEvent(((_enumRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this._enumRowChanging != null)) {
                    this._enumRowChanging(this, new _enumRowChangeEvent(((_enumRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this._enumRowDeleted != null)) {
                    this._enumRowDeleted(this, new _enumRowChangeEvent(((_enumRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this._enumRowDeleting != null)) {
                    this._enumRowDeleting(this, new _enumRowChangeEvent(((_enumRow)(e.Row)), e.Action));
                }
            }
            
            public void Remove_enumRow(_enumRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _enumRow : DataRow {
            
            private _enumDataTable table_enum;
            
            internal _enumRow(DataRowBuilder rb) : 
                    base(rb) {
                this.table_enum = ((_enumDataTable)(this.Table));
            }
            
            public string description {
                get {
                    try {
                        return ((string)(this[this.table_enum.descriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_enum.descriptionColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.table_enum.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.table_enum.nameColumn] = value;
                }
            }
            
            public enumsRow enumsRow {
                get {
                    return ((enumsRow)(this.GetParentRow(this.Table.ParentRelations["enums_enum"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["enums_enum"]);
                }
            }
            
            public bool IsdescriptionNull() {
                return this.IsNull(this.table_enum.descriptionColumn);
            }
            
            public void SetdescriptionNull() {
                this[this.table_enum.descriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.table_enum.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.table_enum.nameColumn] = System.Convert.DBNull;
            }
            
            public entriesRow[] GetentriesRows() {
                return ((entriesRow[])(this.GetChildRows(this.Table.ChildRelations["enum_entries"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class _enumRowChangeEvent : EventArgs {
            
            private _enumRow eventRow;
            
            private DataRowAction eventAction;
            
            public _enumRowChangeEvent(_enumRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public _enumRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class entriesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnentries_Id;
            
            private DataColumn columnenum_Id;
            
            internal entriesDataTable() : 
                    base("entries") {
                this.InitClass();
            }
            
            internal entriesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn entries_IdColumn {
                get {
                    return this.columnentries_Id;
                }
            }
            
            internal DataColumn enum_IdColumn {
                get {
                    return this.columnenum_Id;
                }
            }
            
            public entriesRow this[int index] {
                get {
                    return ((entriesRow)(this.Rows[index]));
                }
            }
            
            public event entriesRowChangeEventHandler entriesRowChanged;
            
            public event entriesRowChangeEventHandler entriesRowChanging;
            
            public event entriesRowChangeEventHandler entriesRowDeleted;
            
            public event entriesRowChangeEventHandler entriesRowDeleting;
            
            public void AddentriesRow(entriesRow row) {
                this.Rows.Add(row);
            }
            
            public entriesRow AddentriesRow(_enumRow parent_enumRowByenum_entries) {
                entriesRow rowentriesRow = ((entriesRow)(this.NewRow()));
                rowentriesRow.ItemArray = new object[] {
                        null,
                        parent_enumRowByenum_entries[2]};
                this.Rows.Add(rowentriesRow);
                return rowentriesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                entriesDataTable cln = ((entriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new entriesDataTable();
            }
            
            internal void InitVars() {
                this.columnentries_Id = this.Columns["entries_Id"];
                this.columnenum_Id = this.Columns["enum_Id"];
            }
            
            private void InitClass() {
                this.columnentries_Id = new DataColumn("entries_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnentries_Id);
                this.columnenum_Id = new DataColumn("enum_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnenum_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnentries_Id}, true));
                this.columnentries_Id.AutoIncrement = true;
                this.columnentries_Id.AllowDBNull = false;
                this.columnentries_Id.Unique = true;
            }
            
            public entriesRow NewentriesRow() {
                return ((entriesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new entriesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(entriesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.entriesRowChanged != null)) {
                    this.entriesRowChanged(this, new entriesRowChangeEvent(((entriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.entriesRowChanging != null)) {
                    this.entriesRowChanging(this, new entriesRowChangeEvent(((entriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.entriesRowDeleted != null)) {
                    this.entriesRowDeleted(this, new entriesRowChangeEvent(((entriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.entriesRowDeleting != null)) {
                    this.entriesRowDeleting(this, new entriesRowChangeEvent(((entriesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveentriesRow(entriesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class entriesRow : DataRow {
            
            private entriesDataTable tableentries;
            
            internal entriesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableentries = ((entriesDataTable)(this.Table));
            }
            
            public _enumRow _enumRow {
                get {
                    return ((_enumRow)(this.GetParentRow(this.Table.ParentRelations["enum_entries"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["enum_entries"]);
                }
            }
            
            public entryRow[] GetentryRows() {
                return ((entryRow[])(this.GetChildRows(this.Table.ChildRelations["entries_entry"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class entriesRowChangeEvent : EventArgs {
            
            private entriesRow eventRow;
            
            private DataRowAction eventAction;
            
            public entriesRowChangeEvent(entriesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public entriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class entryDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnvalue;
            
            private DataColumn columnname;
            
            private DataColumn columnentries_Id;
            
            internal entryDataTable() : 
                    base("entry") {
                this.InitClass();
            }
            
            internal entryDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn entries_IdColumn {
                get {
                    return this.columnentries_Id;
                }
            }
            
            public entryRow this[int index] {
                get {
                    return ((entryRow)(this.Rows[index]));
                }
            }
            
            public event entryRowChangeEventHandler entryRowChanged;
            
            public event entryRowChangeEventHandler entryRowChanging;
            
            public event entryRowChangeEventHandler entryRowDeleted;
            
            public event entryRowChangeEventHandler entryRowDeleting;
            
            public void AddentryRow(entryRow row) {
                this.Rows.Add(row);
            }
            
            public entryRow AddentryRow(string value, string name, entriesRow parententriesRowByentries_entry) {
                entryRow rowentryRow = ((entryRow)(this.NewRow()));
                rowentryRow.ItemArray = new object[] {
                        value,
                        name,
                        parententriesRowByentries_entry[0]};
                this.Rows.Add(rowentryRow);
                return rowentryRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                entryDataTable cln = ((entryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new entryDataTable();
            }
            
            internal void InitVars() {
                this.columnvalue = this.Columns["value"];
                this.columnname = this.Columns["name"];
                this.columnentries_Id = this.Columns["entries_Id"];
            }
            
            private void InitClass() {
                this.columnvalue = new DataColumn("value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvalue);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnentries_Id = new DataColumn("entries_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnentries_Id);
                this.columnname.Namespace = "";
            }
            
            public entryRow NewentryRow() {
                return ((entryRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new entryRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(entryRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.entryRowChanged != null)) {
                    this.entryRowChanged(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.entryRowChanging != null)) {
                    this.entryRowChanging(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.entryRowDeleted != null)) {
                    this.entryRowDeleted(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.entryRowDeleting != null)) {
                    this.entryRowDeleting(this, new entryRowChangeEvent(((entryRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveentryRow(entryRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class entryRow : DataRow {
            
            private entryDataTable tableentry;
            
            internal entryRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableentry = ((entryDataTable)(this.Table));
            }
            
            public string value {
                get {
                    try {
                        return ((string)(this[this.tableentry.valueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.valueColumn] = value;
                }
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableentry.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableentry.nameColumn] = value;
                }
            }
            
            public entriesRow entriesRow {
                get {
                    return ((entriesRow)(this.GetParentRow(this.Table.ParentRelations["entries_entry"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["entries_entry"]);
                }
            }
            
            public bool IsvalueNull() {
                return this.IsNull(this.tableentry.valueColumn);
            }
            
            public void SetvalueNull() {
                this[this.tableentry.valueColumn] = System.Convert.DBNull;
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableentry.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableentry.nameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class entryRowChangeEvent : EventArgs {
            
            private entryRow eventRow;
            
            private DataRowAction eventAction;
            
            public entryRowChangeEvent(entryRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public entryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
