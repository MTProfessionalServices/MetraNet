//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MetraTech.UsageServer.Test {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class CalendarTimeZoneData : DataSet {
        
        private CalendarDataTable tableCalendar;
        
        private CalendarCodeDataTable tableCalendarCode;
        
        private TimeSpanDataTable tableTimeSpan;
        
        private StartDataTable tableStart;
        
        private EndDataTable tableEnd;
        
        private TimeZonesDataTable tableTimeZones;
        
        private TimeZoneDataTable tableTimeZone;
        
        private DataRelation relationTimeSpan_Start;
        
        private DataRelation relationTimeSpan_End;
        
        private DataRelation relationCalendarCode_TimeSpan;
        
        private DataRelation relationCalendar_CalendarCode;
        
        private DataRelation relationTimeZones_TimeZone;
        
        public CalendarTimeZoneData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected CalendarTimeZoneData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Calendar"] != null)) {
                    this.Tables.Add(new CalendarDataTable(ds.Tables["Calendar"]));
                }
                if ((ds.Tables["CalendarCode"] != null)) {
                    this.Tables.Add(new CalendarCodeDataTable(ds.Tables["CalendarCode"]));
                }
                if ((ds.Tables["TimeSpan"] != null)) {
                    this.Tables.Add(new TimeSpanDataTable(ds.Tables["TimeSpan"]));
                }
                if ((ds.Tables["Start"] != null)) {
                    this.Tables.Add(new StartDataTable(ds.Tables["Start"]));
                }
                if ((ds.Tables["End"] != null)) {
                    this.Tables.Add(new EndDataTable(ds.Tables["End"]));
                }
                if ((ds.Tables["TimeZones"] != null)) {
                    this.Tables.Add(new TimeZonesDataTable(ds.Tables["TimeZones"]));
                }
                if ((ds.Tables["TimeZone"] != null)) {
                    this.Tables.Add(new TimeZoneDataTable(ds.Tables["TimeZone"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalendarDataTable Calendar {
            get {
                return this.tableCalendar;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CalendarCodeDataTable CalendarCode {
            get {
                return this.tableCalendarCode;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeSpanDataTable TimeSpan {
            get {
                return this.tableTimeSpan;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StartDataTable Start {
            get {
                return this.tableStart;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EndDataTable End {
            get {
                return this.tableEnd;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeZonesDataTable TimeZones {
            get {
                return this.tableTimeZones;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TimeZoneDataTable TimeZone {
            get {
                return this.tableTimeZone;
            }
        }
        
        public override DataSet Clone() {
            CalendarTimeZoneData cln = ((CalendarTimeZoneData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Calendar"] != null)) {
                this.Tables.Add(new CalendarDataTable(ds.Tables["Calendar"]));
            }
            if ((ds.Tables["CalendarCode"] != null)) {
                this.Tables.Add(new CalendarCodeDataTable(ds.Tables["CalendarCode"]));
            }
            if ((ds.Tables["TimeSpan"] != null)) {
                this.Tables.Add(new TimeSpanDataTable(ds.Tables["TimeSpan"]));
            }
            if ((ds.Tables["Start"] != null)) {
                this.Tables.Add(new StartDataTable(ds.Tables["Start"]));
            }
            if ((ds.Tables["End"] != null)) {
                this.Tables.Add(new EndDataTable(ds.Tables["End"]));
            }
            if ((ds.Tables["TimeZones"] != null)) {
                this.Tables.Add(new TimeZonesDataTable(ds.Tables["TimeZones"]));
            }
            if ((ds.Tables["TimeZone"] != null)) {
                this.Tables.Add(new TimeZoneDataTable(ds.Tables["TimeZone"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCalendar = ((CalendarDataTable)(this.Tables["Calendar"]));
            if ((this.tableCalendar != null)) {
                this.tableCalendar.InitVars();
            }
            this.tableCalendarCode = ((CalendarCodeDataTable)(this.Tables["CalendarCode"]));
            if ((this.tableCalendarCode != null)) {
                this.tableCalendarCode.InitVars();
            }
            this.tableTimeSpan = ((TimeSpanDataTable)(this.Tables["TimeSpan"]));
            if ((this.tableTimeSpan != null)) {
                this.tableTimeSpan.InitVars();
            }
            this.tableStart = ((StartDataTable)(this.Tables["Start"]));
            if ((this.tableStart != null)) {
                this.tableStart.InitVars();
            }
            this.tableEnd = ((EndDataTable)(this.Tables["End"]));
            if ((this.tableEnd != null)) {
                this.tableEnd.InitVars();
            }
            this.tableTimeZones = ((TimeZonesDataTable)(this.Tables["TimeZones"]));
            if ((this.tableTimeZones != null)) {
                this.tableTimeZones.InitVars();
            }
            this.tableTimeZone = ((TimeZoneDataTable)(this.Tables["TimeZone"]));
            if ((this.tableTimeZone != null)) {
                this.tableTimeZone.InitVars();
            }
            this.relationTimeSpan_Start = this.Relations["TimeSpan_Start"];
            this.relationTimeSpan_End = this.Relations["TimeSpan_End"];
            this.relationCalendarCode_TimeSpan = this.Relations["CalendarCode_TimeSpan"];
            this.relationCalendar_CalendarCode = this.Relations["Calendar_CalendarCode"];
            this.relationTimeZones_TimeZone = this.Relations["TimeZones_TimeZone"];
        }
        
        private void InitClass() {
            this.DataSetName = "CalendarTimeZoneData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/TimeZoneTest.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableCalendar = new CalendarDataTable();
            this.Tables.Add(this.tableCalendar);
            this.tableCalendarCode = new CalendarCodeDataTable();
            this.Tables.Add(this.tableCalendarCode);
            this.tableTimeSpan = new TimeSpanDataTable();
            this.Tables.Add(this.tableTimeSpan);
            this.tableStart = new StartDataTable();
            this.Tables.Add(this.tableStart);
            this.tableEnd = new EndDataTable();
            this.Tables.Add(this.tableEnd);
            this.tableTimeZones = new TimeZonesDataTable();
            this.Tables.Add(this.tableTimeZones);
            this.tableTimeZone = new TimeZoneDataTable();
            this.Tables.Add(this.tableTimeZone);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Calendar_CalendarCode", new DataColumn[] {
                        this.tableCalendar.Calendar_IdColumn}, new DataColumn[] {
                        this.tableCalendarCode.Calendar_IdColumn});
            this.tableCalendarCode.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CalendarCode_TimeSpan", new DataColumn[] {
                        this.tableCalendarCode.CalendarCode_IdColumn}, new DataColumn[] {
                        this.tableTimeSpan.CalendarCode_IdColumn});
            this.tableTimeSpan.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimeSpan_Start", new DataColumn[] {
                        this.tableTimeSpan.TimeSpan_IdColumn}, new DataColumn[] {
                        this.tableStart.TimeSpan_IdColumn});
            this.tableStart.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimeSpan_End", new DataColumn[] {
                        this.tableTimeSpan.TimeSpan_IdColumn}, new DataColumn[] {
                        this.tableEnd.TimeSpan_IdColumn});
            this.tableEnd.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("TimeZones_TimeZone", new DataColumn[] {
                        this.tableTimeZones.TimeZones_IdColumn}, new DataColumn[] {
                        this.tableTimeZone.TimeZones_IdColumn});
            this.tableTimeZone.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationTimeSpan_Start = new DataRelation("TimeSpan_Start", new DataColumn[] {
                        this.tableTimeSpan.TimeSpan_IdColumn}, new DataColumn[] {
                        this.tableStart.TimeSpan_IdColumn}, false);
            this.relationTimeSpan_Start.Nested = true;
            this.Relations.Add(this.relationTimeSpan_Start);
            this.relationTimeSpan_End = new DataRelation("TimeSpan_End", new DataColumn[] {
                        this.tableTimeSpan.TimeSpan_IdColumn}, new DataColumn[] {
                        this.tableEnd.TimeSpan_IdColumn}, false);
            this.relationTimeSpan_End.Nested = true;
            this.Relations.Add(this.relationTimeSpan_End);
            this.relationCalendarCode_TimeSpan = new DataRelation("CalendarCode_TimeSpan", new DataColumn[] {
                        this.tableCalendarCode.CalendarCode_IdColumn}, new DataColumn[] {
                        this.tableTimeSpan.CalendarCode_IdColumn}, false);
            this.relationCalendarCode_TimeSpan.Nested = true;
            this.Relations.Add(this.relationCalendarCode_TimeSpan);
            this.relationCalendar_CalendarCode = new DataRelation("Calendar_CalendarCode", new DataColumn[] {
                        this.tableCalendar.Calendar_IdColumn}, new DataColumn[] {
                        this.tableCalendarCode.Calendar_IdColumn}, false);
            this.relationCalendar_CalendarCode.Nested = true;
            this.Relations.Add(this.relationCalendar_CalendarCode);
            this.relationTimeZones_TimeZone = new DataRelation("TimeZones_TimeZone", new DataColumn[] {
                        this.tableTimeZones.TimeZones_IdColumn}, new DataColumn[] {
                        this.tableTimeZone.TimeZones_IdColumn}, false);
            this.relationTimeZones_TimeZone.Nested = true;
            this.Relations.Add(this.relationTimeZones_TimeZone);
        }
        
        private bool ShouldSerializeCalendar() {
            return false;
        }
        
        private bool ShouldSerializeCalendarCode() {
            return false;
        }
        
        private bool ShouldSerializeTimeSpan() {
            return false;
        }
        
        private bool ShouldSerializeStart() {
            return false;
        }
        
        private bool ShouldSerializeEnd() {
            return false;
        }
        
        private bool ShouldSerializeTimeZones() {
            return false;
        }
        
        private bool ShouldSerializeTimeZone() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CalendarRowChangeEventHandler(object sender, CalendarRowChangeEvent e);
        
        public delegate void CalendarCodeRowChangeEventHandler(object sender, CalendarCodeRowChangeEvent e);
        
        public delegate void TimeSpanRowChangeEventHandler(object sender, TimeSpanRowChangeEvent e);
        
        public delegate void StartRowChangeEventHandler(object sender, StartRowChangeEvent e);
        
        public delegate void EndRowChangeEventHandler(object sender, EndRowChangeEvent e);
        
        public delegate void TimeZonesRowChangeEventHandler(object sender, TimeZonesRowChangeEvent e);
        
        public delegate void TimeZoneRowChangeEventHandler(object sender, TimeZoneRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalendarDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCalendar_Id;
            
            internal CalendarDataTable() : 
                    base("Calendar") {
                this.InitClass();
            }
            
            internal CalendarDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Calendar_IdColumn {
                get {
                    return this.columnCalendar_Id;
                }
            }
            
            public CalendarRow this[int index] {
                get {
                    return ((CalendarRow)(this.Rows[index]));
                }
            }
            
            public event CalendarRowChangeEventHandler CalendarRowChanged;
            
            public event CalendarRowChangeEventHandler CalendarRowChanging;
            
            public event CalendarRowChangeEventHandler CalendarRowDeleted;
            
            public event CalendarRowChangeEventHandler CalendarRowDeleting;
            
            public void AddCalendarRow(CalendarRow row) {
                this.Rows.Add(row);
            }
            
            public CalendarRow AddCalendarRow() {
                CalendarRow rowCalendarRow = ((CalendarRow)(this.NewRow()));
                rowCalendarRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowCalendarRow);
                return rowCalendarRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CalendarDataTable cln = ((CalendarDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CalendarDataTable();
            }
            
            internal void InitVars() {
                this.columnCalendar_Id = this.Columns["Calendar_Id"];
            }
            
            private void InitClass() {
                this.columnCalendar_Id = new DataColumn("Calendar_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCalendar_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCalendar_Id}, true));
                this.columnCalendar_Id.AutoIncrement = true;
                this.columnCalendar_Id.AllowDBNull = false;
                this.columnCalendar_Id.Unique = true;
            }
            
            public CalendarRow NewCalendarRow() {
                return ((CalendarRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CalendarRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CalendarRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalendarRowChanged != null)) {
                    this.CalendarRowChanged(this, new CalendarRowChangeEvent(((CalendarRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalendarRowChanging != null)) {
                    this.CalendarRowChanging(this, new CalendarRowChangeEvent(((CalendarRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalendarRowDeleted != null)) {
                    this.CalendarRowDeleted(this, new CalendarRowChangeEvent(((CalendarRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalendarRowDeleting != null)) {
                    this.CalendarRowDeleting(this, new CalendarRowChangeEvent(((CalendarRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCalendarRow(CalendarRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalendarRow : DataRow {
            
            private CalendarDataTable tableCalendar;
            
            internal CalendarRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalendar = ((CalendarDataTable)(this.Table));
            }
            
            public CalendarCodeRow[] GetCalendarCodeRows() {
                return ((CalendarCodeRow[])(this.GetChildRows(this.Table.ChildRelations["Calendar_CalendarCode"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalendarRowChangeEvent : EventArgs {
            
            private CalendarRow eventRow;
            
            private DataRowAction eventAction;
            
            public CalendarRowChangeEvent(CalendarRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CalendarRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalendarCodeDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnCalendarCode_Id;
            
            private DataColumn columnCalendar_Id;
            
            internal CalendarCodeDataTable() : 
                    base("CalendarCode") {
                this.InitClass();
            }
            
            internal CalendarCodeDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn CalendarCode_IdColumn {
                get {
                    return this.columnCalendarCode_Id;
                }
            }
            
            internal DataColumn Calendar_IdColumn {
                get {
                    return this.columnCalendar_Id;
                }
            }
            
            public CalendarCodeRow this[int index] {
                get {
                    return ((CalendarCodeRow)(this.Rows[index]));
                }
            }
            
            public event CalendarCodeRowChangeEventHandler CalendarCodeRowChanged;
            
            public event CalendarCodeRowChangeEventHandler CalendarCodeRowChanging;
            
            public event CalendarCodeRowChangeEventHandler CalendarCodeRowDeleted;
            
            public event CalendarCodeRowChangeEventHandler CalendarCodeRowDeleting;
            
            public void AddCalendarCodeRow(CalendarCodeRow row) {
                this.Rows.Add(row);
            }
            
            public CalendarCodeRow AddCalendarCodeRow(string name, CalendarRow parentCalendarRowByCalendar_CalendarCode) {
                CalendarCodeRow rowCalendarCodeRow = ((CalendarCodeRow)(this.NewRow()));
                rowCalendarCodeRow.ItemArray = new object[] {
                        name,
                        null,
                        parentCalendarRowByCalendar_CalendarCode[0]};
                this.Rows.Add(rowCalendarCodeRow);
                return rowCalendarCodeRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CalendarCodeDataTable cln = ((CalendarCodeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CalendarCodeDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnCalendarCode_Id = this.Columns["CalendarCode_Id"];
                this.columnCalendar_Id = this.Columns["Calendar_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnCalendarCode_Id = new DataColumn("CalendarCode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCalendarCode_Id);
                this.columnCalendar_Id = new DataColumn("Calendar_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCalendar_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCalendarCode_Id}, true));
                this.columnname.Namespace = "";
                this.columnCalendarCode_Id.AutoIncrement = true;
                this.columnCalendarCode_Id.AllowDBNull = false;
                this.columnCalendarCode_Id.Unique = true;
            }
            
            public CalendarCodeRow NewCalendarCodeRow() {
                return ((CalendarCodeRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CalendarCodeRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CalendarCodeRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CalendarCodeRowChanged != null)) {
                    this.CalendarCodeRowChanged(this, new CalendarCodeRowChangeEvent(((CalendarCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CalendarCodeRowChanging != null)) {
                    this.CalendarCodeRowChanging(this, new CalendarCodeRowChangeEvent(((CalendarCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CalendarCodeRowDeleted != null)) {
                    this.CalendarCodeRowDeleted(this, new CalendarCodeRowChangeEvent(((CalendarCodeRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CalendarCodeRowDeleting != null)) {
                    this.CalendarCodeRowDeleting(this, new CalendarCodeRowChangeEvent(((CalendarCodeRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCalendarCodeRow(CalendarCodeRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalendarCodeRow : DataRow {
            
            private CalendarCodeDataTable tableCalendarCode;
            
            internal CalendarCodeRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCalendarCode = ((CalendarCodeDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableCalendarCode.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCalendarCode.nameColumn] = value;
                }
            }
            
            public CalendarRow CalendarRow {
                get {
                    return ((CalendarRow)(this.GetParentRow(this.Table.ParentRelations["Calendar_CalendarCode"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Calendar_CalendarCode"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableCalendarCode.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableCalendarCode.nameColumn] = System.Convert.DBNull;
            }
            
            public TimeSpanRow[] GetTimeSpanRows() {
                return ((TimeSpanRow[])(this.GetChildRows(this.Table.ChildRelations["CalendarCode_TimeSpan"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CalendarCodeRowChangeEvent : EventArgs {
            
            private CalendarCodeRow eventRow;
            
            private DataRowAction eventAction;
            
            public CalendarCodeRowChangeEvent(CalendarCodeRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CalendarCodeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeSpanDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTimeSpan_Id;
            
            private DataColumn columnCalendarCode_Id;
            
            internal TimeSpanDataTable() : 
                    base("TimeSpan") {
                this.InitClass();
            }
            
            internal TimeSpanDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TimeSpan_IdColumn {
                get {
                    return this.columnTimeSpan_Id;
                }
            }
            
            internal DataColumn CalendarCode_IdColumn {
                get {
                    return this.columnCalendarCode_Id;
                }
            }
            
            public TimeSpanRow this[int index] {
                get {
                    return ((TimeSpanRow)(this.Rows[index]));
                }
            }
            
            public event TimeSpanRowChangeEventHandler TimeSpanRowChanged;
            
            public event TimeSpanRowChangeEventHandler TimeSpanRowChanging;
            
            public event TimeSpanRowChangeEventHandler TimeSpanRowDeleted;
            
            public event TimeSpanRowChangeEventHandler TimeSpanRowDeleting;
            
            public void AddTimeSpanRow(TimeSpanRow row) {
                this.Rows.Add(row);
            }
            
            public TimeSpanRow AddTimeSpanRow(CalendarCodeRow parentCalendarCodeRowByCalendarCode_TimeSpan) {
                TimeSpanRow rowTimeSpanRow = ((TimeSpanRow)(this.NewRow()));
                rowTimeSpanRow.ItemArray = new object[] {
                        null,
                        parentCalendarCodeRowByCalendarCode_TimeSpan[1]};
                this.Rows.Add(rowTimeSpanRow);
                return rowTimeSpanRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TimeSpanDataTable cln = ((TimeSpanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TimeSpanDataTable();
            }
            
            internal void InitVars() {
                this.columnTimeSpan_Id = this.Columns["TimeSpan_Id"];
                this.columnCalendarCode_Id = this.Columns["CalendarCode_Id"];
            }
            
            private void InitClass() {
                this.columnTimeSpan_Id = new DataColumn("TimeSpan_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTimeSpan_Id);
                this.columnCalendarCode_Id = new DataColumn("CalendarCode_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCalendarCode_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTimeSpan_Id}, true));
                this.columnTimeSpan_Id.AutoIncrement = true;
                this.columnTimeSpan_Id.AllowDBNull = false;
                this.columnTimeSpan_Id.Unique = true;
            }
            
            public TimeSpanRow NewTimeSpanRow() {
                return ((TimeSpanRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TimeSpanRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TimeSpanRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeSpanRowChanged != null)) {
                    this.TimeSpanRowChanged(this, new TimeSpanRowChangeEvent(((TimeSpanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeSpanRowChanging != null)) {
                    this.TimeSpanRowChanging(this, new TimeSpanRowChangeEvent(((TimeSpanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeSpanRowDeleted != null)) {
                    this.TimeSpanRowDeleted(this, new TimeSpanRowChangeEvent(((TimeSpanRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeSpanRowDeleting != null)) {
                    this.TimeSpanRowDeleting(this, new TimeSpanRowChangeEvent(((TimeSpanRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimeSpanRow(TimeSpanRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeSpanRow : DataRow {
            
            private TimeSpanDataTable tableTimeSpan;
            
            internal TimeSpanRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeSpan = ((TimeSpanDataTable)(this.Table));
            }
            
            public CalendarCodeRow CalendarCodeRow {
                get {
                    return ((CalendarCodeRow)(this.GetParentRow(this.Table.ParentRelations["CalendarCode_TimeSpan"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CalendarCode_TimeSpan"]);
                }
            }
            
            public StartRow[] GetStartRows() {
                return ((StartRow[])(this.GetChildRows(this.Table.ChildRelations["TimeSpan_Start"])));
            }
            
            public EndRow[] GetEndRows() {
                return ((EndRow[])(this.GetChildRows(this.Table.ChildRelations["TimeSpan_End"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeSpanRowChangeEvent : EventArgs {
            
            private TimeSpanRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimeSpanRowChangeEvent(TimeSpanRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimeSpanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StartDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnhour;
            
            private DataColumn columnminute;
            
            private DataColumn columnsecond;
            
            private DataColumn columnTimeSpan_Id;
            
            internal StartDataTable() : 
                    base("Start") {
                this.InitClass();
            }
            
            internal StartDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn hourColumn {
                get {
                    return this.columnhour;
                }
            }
            
            internal DataColumn minuteColumn {
                get {
                    return this.columnminute;
                }
            }
            
            internal DataColumn secondColumn {
                get {
                    return this.columnsecond;
                }
            }
            
            internal DataColumn TimeSpan_IdColumn {
                get {
                    return this.columnTimeSpan_Id;
                }
            }
            
            public StartRow this[int index] {
                get {
                    return ((StartRow)(this.Rows[index]));
                }
            }
            
            public event StartRowChangeEventHandler StartRowChanged;
            
            public event StartRowChangeEventHandler StartRowChanging;
            
            public event StartRowChangeEventHandler StartRowDeleted;
            
            public event StartRowChangeEventHandler StartRowDeleting;
            
            public void AddStartRow(StartRow row) {
                this.Rows.Add(row);
            }
            
            public StartRow AddStartRow(long hour, long minute, long second, TimeSpanRow parentTimeSpanRowByTimeSpan_Start) {
                StartRow rowStartRow = ((StartRow)(this.NewRow()));
                rowStartRow.ItemArray = new object[] {
                        hour,
                        minute,
                        second,
                        parentTimeSpanRowByTimeSpan_Start[0]};
                this.Rows.Add(rowStartRow);
                return rowStartRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                StartDataTable cln = ((StartDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new StartDataTable();
            }
            
            internal void InitVars() {
                this.columnhour = this.Columns["hour"];
                this.columnminute = this.Columns["minute"];
                this.columnsecond = this.Columns["second"];
                this.columnTimeSpan_Id = this.Columns["TimeSpan_Id"];
            }
            
            private void InitClass() {
                this.columnhour = new DataColumn("hour", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnhour);
                this.columnminute = new DataColumn("minute", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnminute);
                this.columnsecond = new DataColumn("second", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnsecond);
                this.columnTimeSpan_Id = new DataColumn("TimeSpan_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTimeSpan_Id);
                this.columnhour.Namespace = "";
                this.columnminute.Namespace = "";
                this.columnsecond.Namespace = "";
            }
            
            public StartRow NewStartRow() {
                return ((StartRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new StartRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(StartRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StartRowChanged != null)) {
                    this.StartRowChanged(this, new StartRowChangeEvent(((StartRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StartRowChanging != null)) {
                    this.StartRowChanging(this, new StartRowChangeEvent(((StartRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StartRowDeleted != null)) {
                    this.StartRowDeleted(this, new StartRowChangeEvent(((StartRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StartRowDeleting != null)) {
                    this.StartRowDeleting(this, new StartRowChangeEvent(((StartRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveStartRow(StartRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StartRow : DataRow {
            
            private StartDataTable tableStart;
            
            internal StartRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableStart = ((StartDataTable)(this.Table));
            }
            
            public long hour {
                get {
                    try {
                        return ((long)(this[this.tableStart.hourColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStart.hourColumn] = value;
                }
            }
            
            public long minute {
                get {
                    try {
                        return ((long)(this[this.tableStart.minuteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStart.minuteColumn] = value;
                }
            }
            
            public long second {
                get {
                    try {
                        return ((long)(this[this.tableStart.secondColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStart.secondColumn] = value;
                }
            }
            
            public TimeSpanRow TimeSpanRow {
                get {
                    return ((TimeSpanRow)(this.GetParentRow(this.Table.ParentRelations["TimeSpan_Start"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TimeSpan_Start"]);
                }
            }
            
            public bool IshourNull() {
                return this.IsNull(this.tableStart.hourColumn);
            }
            
            public void SethourNull() {
                this[this.tableStart.hourColumn] = System.Convert.DBNull;
            }
            
            public bool IsminuteNull() {
                return this.IsNull(this.tableStart.minuteColumn);
            }
            
            public void SetminuteNull() {
                this[this.tableStart.minuteColumn] = System.Convert.DBNull;
            }
            
            public bool IssecondNull() {
                return this.IsNull(this.tableStart.secondColumn);
            }
            
            public void SetsecondNull() {
                this[this.tableStart.secondColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class StartRowChangeEvent : EventArgs {
            
            private StartRow eventRow;
            
            private DataRowAction eventAction;
            
            public StartRowChangeEvent(StartRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public StartRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EndDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnhour;
            
            private DataColumn columnminute;
            
            private DataColumn columnsecond;
            
            private DataColumn columnTimeSpan_Id;
            
            internal EndDataTable() : 
                    base("End") {
                this.InitClass();
            }
            
            internal EndDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn hourColumn {
                get {
                    return this.columnhour;
                }
            }
            
            internal DataColumn minuteColumn {
                get {
                    return this.columnminute;
                }
            }
            
            internal DataColumn secondColumn {
                get {
                    return this.columnsecond;
                }
            }
            
            internal DataColumn TimeSpan_IdColumn {
                get {
                    return this.columnTimeSpan_Id;
                }
            }
            
            public EndRow this[int index] {
                get {
                    return ((EndRow)(this.Rows[index]));
                }
            }
            
            public event EndRowChangeEventHandler EndRowChanged;
            
            public event EndRowChangeEventHandler EndRowChanging;
            
            public event EndRowChangeEventHandler EndRowDeleted;
            
            public event EndRowChangeEventHandler EndRowDeleting;
            
            public void AddEndRow(EndRow row) {
                this.Rows.Add(row);
            }
            
            public EndRow AddEndRow(long hour, long minute, long second, TimeSpanRow parentTimeSpanRowByTimeSpan_End) {
                EndRow rowEndRow = ((EndRow)(this.NewRow()));
                rowEndRow.ItemArray = new object[] {
                        hour,
                        minute,
                        second,
                        parentTimeSpanRowByTimeSpan_End[0]};
                this.Rows.Add(rowEndRow);
                return rowEndRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EndDataTable cln = ((EndDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EndDataTable();
            }
            
            internal void InitVars() {
                this.columnhour = this.Columns["hour"];
                this.columnminute = this.Columns["minute"];
                this.columnsecond = this.Columns["second"];
                this.columnTimeSpan_Id = this.Columns["TimeSpan_Id"];
            }
            
            private void InitClass() {
                this.columnhour = new DataColumn("hour", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnhour);
                this.columnminute = new DataColumn("minute", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnminute);
                this.columnsecond = new DataColumn("second", typeof(long), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnsecond);
                this.columnTimeSpan_Id = new DataColumn("TimeSpan_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTimeSpan_Id);
                this.columnhour.Namespace = "";
                this.columnminute.Namespace = "";
                this.columnsecond.Namespace = "";
            }
            
            public EndRow NewEndRow() {
                return ((EndRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EndRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EndRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EndRowChanged != null)) {
                    this.EndRowChanged(this, new EndRowChangeEvent(((EndRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EndRowChanging != null)) {
                    this.EndRowChanging(this, new EndRowChangeEvent(((EndRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EndRowDeleted != null)) {
                    this.EndRowDeleted(this, new EndRowChangeEvent(((EndRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EndRowDeleting != null)) {
                    this.EndRowDeleting(this, new EndRowChangeEvent(((EndRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEndRow(EndRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EndRow : DataRow {
            
            private EndDataTable tableEnd;
            
            internal EndRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEnd = ((EndDataTable)(this.Table));
            }
            
            public long hour {
                get {
                    try {
                        return ((long)(this[this.tableEnd.hourColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnd.hourColumn] = value;
                }
            }
            
            public long minute {
                get {
                    try {
                        return ((long)(this[this.tableEnd.minuteColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnd.minuteColumn] = value;
                }
            }
            
            public long second {
                get {
                    try {
                        return ((long)(this[this.tableEnd.secondColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEnd.secondColumn] = value;
                }
            }
            
            public TimeSpanRow TimeSpanRow {
                get {
                    return ((TimeSpanRow)(this.GetParentRow(this.Table.ParentRelations["TimeSpan_End"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TimeSpan_End"]);
                }
            }
            
            public bool IshourNull() {
                return this.IsNull(this.tableEnd.hourColumn);
            }
            
            public void SethourNull() {
                this[this.tableEnd.hourColumn] = System.Convert.DBNull;
            }
            
            public bool IsminuteNull() {
                return this.IsNull(this.tableEnd.minuteColumn);
            }
            
            public void SetminuteNull() {
                this[this.tableEnd.minuteColumn] = System.Convert.DBNull;
            }
            
            public bool IssecondNull() {
                return this.IsNull(this.tableEnd.secondColumn);
            }
            
            public void SetsecondNull() {
                this[this.tableEnd.secondColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EndRowChangeEvent : EventArgs {
            
            private EndRow eventRow;
            
            private DataRowAction eventAction;
            
            public EndRowChangeEvent(EndRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EndRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeZonesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnTimeZones_Id;
            
            internal TimeZonesDataTable() : 
                    base("TimeZones") {
                this.InitClass();
            }
            
            internal TimeZonesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn TimeZones_IdColumn {
                get {
                    return this.columnTimeZones_Id;
                }
            }
            
            public TimeZonesRow this[int index] {
                get {
                    return ((TimeZonesRow)(this.Rows[index]));
                }
            }
            
            public event TimeZonesRowChangeEventHandler TimeZonesRowChanged;
            
            public event TimeZonesRowChangeEventHandler TimeZonesRowChanging;
            
            public event TimeZonesRowChangeEventHandler TimeZonesRowDeleted;
            
            public event TimeZonesRowChangeEventHandler TimeZonesRowDeleting;
            
            public void AddTimeZonesRow(TimeZonesRow row) {
                this.Rows.Add(row);
            }
            
            public TimeZonesRow AddTimeZonesRow() {
                TimeZonesRow rowTimeZonesRow = ((TimeZonesRow)(this.NewRow()));
                rowTimeZonesRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowTimeZonesRow);
                return rowTimeZonesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TimeZonesDataTable cln = ((TimeZonesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TimeZonesDataTable();
            }
            
            internal void InitVars() {
                this.columnTimeZones_Id = this.Columns["TimeZones_Id"];
            }
            
            private void InitClass() {
                this.columnTimeZones_Id = new DataColumn("TimeZones_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTimeZones_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnTimeZones_Id}, true));
                this.columnTimeZones_Id.AutoIncrement = true;
                this.columnTimeZones_Id.AllowDBNull = false;
                this.columnTimeZones_Id.Unique = true;
            }
            
            public TimeZonesRow NewTimeZonesRow() {
                return ((TimeZonesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TimeZonesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TimeZonesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeZonesRowChanged != null)) {
                    this.TimeZonesRowChanged(this, new TimeZonesRowChangeEvent(((TimeZonesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeZonesRowChanging != null)) {
                    this.TimeZonesRowChanging(this, new TimeZonesRowChangeEvent(((TimeZonesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeZonesRowDeleted != null)) {
                    this.TimeZonesRowDeleted(this, new TimeZonesRowChangeEvent(((TimeZonesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeZonesRowDeleting != null)) {
                    this.TimeZonesRowDeleting(this, new TimeZonesRowChangeEvent(((TimeZonesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimeZonesRow(TimeZonesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeZonesRow : DataRow {
            
            private TimeZonesDataTable tableTimeZones;
            
            internal TimeZonesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeZones = ((TimeZonesDataTable)(this.Table));
            }
            
            public TimeZoneRow[] GetTimeZoneRows() {
                return ((TimeZoneRow[])(this.GetChildRows(this.Table.ChildRelations["TimeZones_TimeZone"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeZonesRowChangeEvent : EventArgs {
            
            private TimeZonesRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimeZonesRowChangeEvent(TimeZonesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimeZonesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeZoneDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnwindowsName;
            
            private DataColumn columnuseWindowsTimeZone;
            
            private DataColumn columnTimeZones_Id;
            
            internal TimeZoneDataTable() : 
                    base("TimeZone") {
                this.InitClass();
            }
            
            internal TimeZoneDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn windowsNameColumn {
                get {
                    return this.columnwindowsName;
                }
            }
            
            internal DataColumn useWindowsTimeZoneColumn {
                get {
                    return this.columnuseWindowsTimeZone;
                }
            }
            
            internal DataColumn TimeZones_IdColumn {
                get {
                    return this.columnTimeZones_Id;
                }
            }
            
            public TimeZoneRow this[int index] {
                get {
                    return ((TimeZoneRow)(this.Rows[index]));
                }
            }
            
            public event TimeZoneRowChangeEventHandler TimeZoneRowChanged;
            
            public event TimeZoneRowChangeEventHandler TimeZoneRowChanging;
            
            public event TimeZoneRowChangeEventHandler TimeZoneRowDeleted;
            
            public event TimeZoneRowChangeEventHandler TimeZoneRowDeleting;
            
            public void AddTimeZoneRow(TimeZoneRow row) {
                this.Rows.Add(row);
            }
            
            public TimeZoneRow AddTimeZoneRow(string windowsName, bool useWindowsTimeZone, TimeZonesRow parentTimeZonesRowByTimeZones_TimeZone) {
                TimeZoneRow rowTimeZoneRow = ((TimeZoneRow)(this.NewRow()));
                rowTimeZoneRow.ItemArray = new object[] {
                        windowsName,
                        useWindowsTimeZone,
                        parentTimeZonesRowByTimeZones_TimeZone[0]};
                this.Rows.Add(rowTimeZoneRow);
                return rowTimeZoneRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TimeZoneDataTable cln = ((TimeZoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TimeZoneDataTable();
            }
            
            internal void InitVars() {
                this.columnwindowsName = this.Columns["windowsName"];
                this.columnuseWindowsTimeZone = this.Columns["useWindowsTimeZone"];
                this.columnTimeZones_Id = this.Columns["TimeZones_Id"];
            }
            
            private void InitClass() {
                this.columnwindowsName = new DataColumn("windowsName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnwindowsName);
                this.columnuseWindowsTimeZone = new DataColumn("useWindowsTimeZone", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnuseWindowsTimeZone);
                this.columnTimeZones_Id = new DataColumn("TimeZones_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnTimeZones_Id);
                this.columnwindowsName.Namespace = "";
                this.columnuseWindowsTimeZone.Namespace = "";
            }
            
            public TimeZoneRow NewTimeZoneRow() {
                return ((TimeZoneRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TimeZoneRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TimeZoneRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TimeZoneRowChanged != null)) {
                    this.TimeZoneRowChanged(this, new TimeZoneRowChangeEvent(((TimeZoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TimeZoneRowChanging != null)) {
                    this.TimeZoneRowChanging(this, new TimeZoneRowChangeEvent(((TimeZoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TimeZoneRowDeleted != null)) {
                    this.TimeZoneRowDeleted(this, new TimeZoneRowChangeEvent(((TimeZoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TimeZoneRowDeleting != null)) {
                    this.TimeZoneRowDeleting(this, new TimeZoneRowChangeEvent(((TimeZoneRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTimeZoneRow(TimeZoneRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeZoneRow : DataRow {
            
            private TimeZoneDataTable tableTimeZone;
            
            internal TimeZoneRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTimeZone = ((TimeZoneDataTable)(this.Table));
            }
            
            public string windowsName {
                get {
                    try {
                        return ((string)(this[this.tableTimeZone.windowsNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeZone.windowsNameColumn] = value;
                }
            }
            
            public bool useWindowsTimeZone {
                get {
                    try {
                        return ((bool)(this[this.tableTimeZone.useWindowsTimeZoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTimeZone.useWindowsTimeZoneColumn] = value;
                }
            }
            
            public TimeZonesRow TimeZonesRow {
                get {
                    return ((TimeZonesRow)(this.GetParentRow(this.Table.ParentRelations["TimeZones_TimeZone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TimeZones_TimeZone"]);
                }
            }
            
            public bool IswindowsNameNull() {
                return this.IsNull(this.tableTimeZone.windowsNameColumn);
            }
            
            public void SetwindowsNameNull() {
                this[this.tableTimeZone.windowsNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsuseWindowsTimeZoneNull() {
                return this.IsNull(this.tableTimeZone.useWindowsTimeZoneColumn);
            }
            
            public void SetuseWindowsTimeZoneNull() {
                this[this.tableTimeZone.useWindowsTimeZoneColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TimeZoneRowChangeEvent : EventArgs {
            
            private TimeZoneRow eventRow;
            
            private DataRowAction eventAction;
            
            public TimeZoneRowChangeEvent(TimeZoneRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TimeZoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
