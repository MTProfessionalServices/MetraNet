//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MetraTech.UsageServer.Test {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class xmlconfig : DataSet {
        
        private mtconfigdataDataTable tablemtconfigdata;
        
        private timezoneDataTable tabletimezone;
        
        private qn_GMT_offsetDataTable tableqn_GMT_offset;
        
        private DataRelation relationtimezone_qn_GMT_offset;
        
        private DataRelation relationmtconfigdata_timezone;
        
        public xmlconfig() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected xmlconfig(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["mtconfigdata"] != null)) {
                    this.Tables.Add(new mtconfigdataDataTable(ds.Tables["mtconfigdata"]));
                }
                if ((ds.Tables["timezone"] != null)) {
                    this.Tables.Add(new timezoneDataTable(ds.Tables["timezone"]));
                }
                if ((ds.Tables["qn_GMT_offset"] != null)) {
                    this.Tables.Add(new qn_GMT_offsetDataTable(ds.Tables["qn_GMT_offset"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mtconfigdataDataTable mtconfigdata {
            get {
                return this.tablemtconfigdata;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public timezoneDataTable timezone {
            get {
                return this.tabletimezone;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public qn_GMT_offsetDataTable qn_GMT_offset {
            get {
                return this.tableqn_GMT_offset;
            }
        }
        
        public override DataSet Clone() {
            xmlconfig cln = ((xmlconfig)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["mtconfigdata"] != null)) {
                this.Tables.Add(new mtconfigdataDataTable(ds.Tables["mtconfigdata"]));
            }
            if ((ds.Tables["timezone"] != null)) {
                this.Tables.Add(new timezoneDataTable(ds.Tables["timezone"]));
            }
            if ((ds.Tables["qn_GMT_offset"] != null)) {
                this.Tables.Add(new qn_GMT_offsetDataTable(ds.Tables["qn_GMT_offset"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablemtconfigdata = ((mtconfigdataDataTable)(this.Tables["mtconfigdata"]));
            if ((this.tablemtconfigdata != null)) {
                this.tablemtconfigdata.InitVars();
            }
            this.tabletimezone = ((timezoneDataTable)(this.Tables["timezone"]));
            if ((this.tabletimezone != null)) {
                this.tabletimezone.InitVars();
            }
            this.tableqn_GMT_offset = ((qn_GMT_offsetDataTable)(this.Tables["qn_GMT_offset"]));
            if ((this.tableqn_GMT_offset != null)) {
                this.tableqn_GMT_offset.InitVars();
            }
            this.relationtimezone_qn_GMT_offset = this.Relations["timezone_qn_GMT_offset"];
            this.relationmtconfigdata_timezone = this.Relations["mtconfigdata_timezone"];
        }
        
        private void InitClass() {
            this.DataSetName = "xmlconfig";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/timezone.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tablemtconfigdata = new mtconfigdataDataTable();
            this.Tables.Add(this.tablemtconfigdata);
            this.tabletimezone = new timezoneDataTable();
            this.Tables.Add(this.tabletimezone);
            this.tableqn_GMT_offset = new qn_GMT_offsetDataTable();
            this.Tables.Add(this.tableqn_GMT_offset);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("mtconfigdata_timezone", new DataColumn[] {
                        this.tablemtconfigdata.mtconfigdata_IdColumn}, new DataColumn[] {
                        this.tabletimezone.mtconfigdata_IdColumn});
            this.tabletimezone.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("timezone_qn_GMT_offset", new DataColumn[] {
                        this.tabletimezone.timezone_IdColumn}, new DataColumn[] {
                        this.tableqn_GMT_offset.timezone_IdColumn});
            this.tableqn_GMT_offset.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationtimezone_qn_GMT_offset = new DataRelation("timezone_qn_GMT_offset", new DataColumn[] {
                        this.tabletimezone.timezone_IdColumn}, new DataColumn[] {
                        this.tableqn_GMT_offset.timezone_IdColumn}, false);
            this.relationtimezone_qn_GMT_offset.Nested = true;
            this.Relations.Add(this.relationtimezone_qn_GMT_offset);
            this.relationmtconfigdata_timezone = new DataRelation("mtconfigdata_timezone", new DataColumn[] {
                        this.tablemtconfigdata.mtconfigdata_IdColumn}, new DataColumn[] {
                        this.tabletimezone.mtconfigdata_IdColumn}, false);
            this.relationmtconfigdata_timezone.Nested = true;
            this.Relations.Add(this.relationmtconfigdata_timezone);
        }
        
        private bool ShouldSerializemtconfigdata() {
            return false;
        }
        
        private bool ShouldSerializetimezone() {
            return false;
        }
        
        private bool ShouldSerializeqn_GMT_offset() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void mtconfigdataRowChangeEventHandler(object sender, mtconfigdataRowChangeEvent e);
        
        public delegate void timezoneRowChangeEventHandler(object sender, timezoneRowChangeEvent e);
        
        public delegate void qn_GMT_offsetRowChangeEventHandler(object sender, qn_GMT_offsetRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mtconfigdataDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmtconfigdata_Id;
            
            internal mtconfigdataDataTable() : 
                    base("mtconfigdata") {
                this.InitClass();
            }
            
            internal mtconfigdataDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn mtconfigdata_IdColumn {
                get {
                    return this.columnmtconfigdata_Id;
                }
            }
            
            public mtconfigdataRow this[int index] {
                get {
                    return ((mtconfigdataRow)(this.Rows[index]));
                }
            }
            
            public event mtconfigdataRowChangeEventHandler mtconfigdataRowChanged;
            
            public event mtconfigdataRowChangeEventHandler mtconfigdataRowChanging;
            
            public event mtconfigdataRowChangeEventHandler mtconfigdataRowDeleted;
            
            public event mtconfigdataRowChangeEventHandler mtconfigdataRowDeleting;
            
            public void AddmtconfigdataRow(mtconfigdataRow row) {
                this.Rows.Add(row);
            }
            
            public mtconfigdataRow AddmtconfigdataRow() {
                mtconfigdataRow rowmtconfigdataRow = ((mtconfigdataRow)(this.NewRow()));
                rowmtconfigdataRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowmtconfigdataRow);
                return rowmtconfigdataRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                mtconfigdataDataTable cln = ((mtconfigdataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new mtconfigdataDataTable();
            }
            
            internal void InitVars() {
                this.columnmtconfigdata_Id = this.Columns["mtconfigdata_Id"];
            }
            
            private void InitClass() {
                this.columnmtconfigdata_Id = new DataColumn("mtconfigdata_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnmtconfigdata_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnmtconfigdata_Id}, true));
                this.columnmtconfigdata_Id.AutoIncrement = true;
                this.columnmtconfigdata_Id.AllowDBNull = false;
                this.columnmtconfigdata_Id.Unique = true;
            }
            
            public mtconfigdataRow NewmtconfigdataRow() {
                return ((mtconfigdataRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new mtconfigdataRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(mtconfigdataRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mtconfigdataRowChanged != null)) {
                    this.mtconfigdataRowChanged(this, new mtconfigdataRowChangeEvent(((mtconfigdataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mtconfigdataRowChanging != null)) {
                    this.mtconfigdataRowChanging(this, new mtconfigdataRowChangeEvent(((mtconfigdataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mtconfigdataRowDeleted != null)) {
                    this.mtconfigdataRowDeleted(this, new mtconfigdataRowChangeEvent(((mtconfigdataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mtconfigdataRowDeleting != null)) {
                    this.mtconfigdataRowDeleting(this, new mtconfigdataRowChangeEvent(((mtconfigdataRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovemtconfigdataRow(mtconfigdataRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mtconfigdataRow : DataRow {
            
            private mtconfigdataDataTable tablemtconfigdata;
            
            internal mtconfigdataRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemtconfigdata = ((mtconfigdataDataTable)(this.Table));
            }
            
            public timezoneRow[] GettimezoneRows() {
                return ((timezoneRow[])(this.GetChildRows(this.Table.ChildRelations["mtconfigdata_timezone"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mtconfigdataRowChangeEvent : EventArgs {
            
            private mtconfigdataRow eventRow;
            
            private DataRowAction eventAction;
            
            public mtconfigdataRowChangeEvent(mtconfigdataRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public mtconfigdataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class timezoneDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnid_timezone;
            
            private DataColumn columnnm_timezone;
            
            private DataColumn columntx_timezone_info;
            
            private DataColumn columntx_DLST;
            
            private DataColumn columndescription_id;
            
            private DataColumn columnuseWindowsTimeZone;
            
            private DataColumn columntimezone_Id;
            
            private DataColumn columnmtconfigdata_Id;
            
            internal timezoneDataTable() : 
                    base("timezone") {
                this.InitClass();
            }
            
            internal timezoneDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn id_timezoneColumn {
                get {
                    return this.columnid_timezone;
                }
            }
            
            internal DataColumn nm_timezoneColumn {
                get {
                    return this.columnnm_timezone;
                }
            }
            
            internal DataColumn tx_timezone_infoColumn {
                get {
                    return this.columntx_timezone_info;
                }
            }
            
            internal DataColumn tx_DLSTColumn {
                get {
                    return this.columntx_DLST;
                }
            }
            
            internal DataColumn description_idColumn {
                get {
                    return this.columndescription_id;
                }
            }
            
            internal DataColumn useWindowsTimeZoneColumn {
                get {
                    return this.columnuseWindowsTimeZone;
                }
            }
            
            internal DataColumn timezone_IdColumn {
                get {
                    return this.columntimezone_Id;
                }
            }
            
            internal DataColumn mtconfigdata_IdColumn {
                get {
                    return this.columnmtconfigdata_Id;
                }
            }
            
            public timezoneRow this[int index] {
                get {
                    return ((timezoneRow)(this.Rows[index]));
                }
            }
            
            public event timezoneRowChangeEventHandler timezoneRowChanged;
            
            public event timezoneRowChangeEventHandler timezoneRowChanging;
            
            public event timezoneRowChangeEventHandler timezoneRowDeleted;
            
            public event timezoneRowChangeEventHandler timezoneRowDeleting;
            
            public void AddtimezoneRow(timezoneRow row) {
                this.Rows.Add(row);
            }
            
            public timezoneRow AddtimezoneRow(int id_timezone, string nm_timezone, string tx_timezone_info, string tx_DLST, string description_id, bool useWindowsTimeZone, mtconfigdataRow parentmtconfigdataRowBymtconfigdata_timezone) {
                timezoneRow rowtimezoneRow = ((timezoneRow)(this.NewRow()));
                rowtimezoneRow.ItemArray = new object[] {
                        id_timezone,
                        nm_timezone,
                        tx_timezone_info,
                        tx_DLST,
                        description_id,
                        useWindowsTimeZone,
                        null,
                        parentmtconfigdataRowBymtconfigdata_timezone[0]};
                this.Rows.Add(rowtimezoneRow);
                return rowtimezoneRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                timezoneDataTable cln = ((timezoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new timezoneDataTable();
            }
            
            internal void InitVars() {
                this.columnid_timezone = this.Columns["id_timezone"];
                this.columnnm_timezone = this.Columns["nm_timezone"];
                this.columntx_timezone_info = this.Columns["tx_timezone_info"];
                this.columntx_DLST = this.Columns["tx_DLST"];
                this.columndescription_id = this.Columns["description_id"];
                this.columnuseWindowsTimeZone = this.Columns["useWindowsTimeZone"];
                this.columntimezone_Id = this.Columns["timezone_Id"];
                this.columnmtconfigdata_Id = this.Columns["mtconfigdata_Id"];
            }
            
            private void InitClass() {
                this.columnid_timezone = new DataColumn("id_timezone", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnid_timezone);
                this.columnnm_timezone = new DataColumn("nm_timezone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnm_timezone);
                this.columntx_timezone_info = new DataColumn("tx_timezone_info", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntx_timezone_info);
                this.columntx_DLST = new DataColumn("tx_DLST", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntx_DLST);
                this.columndescription_id = new DataColumn("description_id", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndescription_id);
                this.columnuseWindowsTimeZone = new DataColumn("useWindowsTimeZone", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuseWindowsTimeZone);
                this.columntimezone_Id = new DataColumn("timezone_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columntimezone_Id);
                this.columnmtconfigdata_Id = new DataColumn("mtconfigdata_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnmtconfigdata_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columntimezone_Id}, true));
                this.columnuseWindowsTimeZone.DefaultValue = true;
                this.columntimezone_Id.AutoIncrement = true;
                this.columntimezone_Id.AllowDBNull = false;
                this.columntimezone_Id.Unique = true;
            }
            
            public timezoneRow NewtimezoneRow() {
                return ((timezoneRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new timezoneRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(timezoneRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.timezoneRowChanged != null)) {
                    this.timezoneRowChanged(this, new timezoneRowChangeEvent(((timezoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.timezoneRowChanging != null)) {
                    this.timezoneRowChanging(this, new timezoneRowChangeEvent(((timezoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.timezoneRowDeleted != null)) {
                    this.timezoneRowDeleted(this, new timezoneRowChangeEvent(((timezoneRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.timezoneRowDeleting != null)) {
                    this.timezoneRowDeleting(this, new timezoneRowChangeEvent(((timezoneRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetimezoneRow(timezoneRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class timezoneRow : DataRow {
            
            private timezoneDataTable tabletimezone;
            
            internal timezoneRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletimezone = ((timezoneDataTable)(this.Table));
            }
            
            public int id_timezone {
                get {
                    try {
                        return ((int)(this[this.tabletimezone.id_timezoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimezone.id_timezoneColumn] = value;
                }
            }
            
            public string nm_timezone {
                get {
                    try {
                        return ((string)(this[this.tabletimezone.nm_timezoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimezone.nm_timezoneColumn] = value;
                }
            }
            
            public string tx_timezone_info {
                get {
                    try {
                        return ((string)(this[this.tabletimezone.tx_timezone_infoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimezone.tx_timezone_infoColumn] = value;
                }
            }
            
            public string tx_DLST {
                get {
                    try {
                        return ((string)(this[this.tabletimezone.tx_DLSTColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimezone.tx_DLSTColumn] = value;
                }
            }
            
            public string description_id {
                get {
                    try {
                        return ((string)(this[this.tabletimezone.description_idColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimezone.description_idColumn] = value;
                }
            }
            
            public bool useWindowsTimeZone {
                get {
                    try {
                        return ((bool)(this[this.tabletimezone.useWindowsTimeZoneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletimezone.useWindowsTimeZoneColumn] = value;
                }
            }
            
            public mtconfigdataRow mtconfigdataRow {
                get {
                    return ((mtconfigdataRow)(this.GetParentRow(this.Table.ParentRelations["mtconfigdata_timezone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mtconfigdata_timezone"]);
                }
            }
            
            public bool Isid_timezoneNull() {
                return this.IsNull(this.tabletimezone.id_timezoneColumn);
            }
            
            public void Setid_timezoneNull() {
                this[this.tabletimezone.id_timezoneColumn] = System.Convert.DBNull;
            }
            
            public bool Isnm_timezoneNull() {
                return this.IsNull(this.tabletimezone.nm_timezoneColumn);
            }
            
            public void Setnm_timezoneNull() {
                this[this.tabletimezone.nm_timezoneColumn] = System.Convert.DBNull;
            }
            
            public bool Istx_timezone_infoNull() {
                return this.IsNull(this.tabletimezone.tx_timezone_infoColumn);
            }
            
            public void Settx_timezone_infoNull() {
                this[this.tabletimezone.tx_timezone_infoColumn] = System.Convert.DBNull;
            }
            
            public bool Istx_DLSTNull() {
                return this.IsNull(this.tabletimezone.tx_DLSTColumn);
            }
            
            public void Settx_DLSTNull() {
                this[this.tabletimezone.tx_DLSTColumn] = System.Convert.DBNull;
            }
            
            public bool Isdescription_idNull() {
                return this.IsNull(this.tabletimezone.description_idColumn);
            }
            
            public void Setdescription_idNull() {
                this[this.tabletimezone.description_idColumn] = System.Convert.DBNull;
            }
            
            public bool IsuseWindowsTimeZoneNull() {
                return this.IsNull(this.tabletimezone.useWindowsTimeZoneColumn);
            }
            
            public void SetuseWindowsTimeZoneNull() {
                this[this.tabletimezone.useWindowsTimeZoneColumn] = System.Convert.DBNull;
            }
            
            public qn_GMT_offsetRow[] Getqn_GMT_offsetRows() {
                return ((qn_GMT_offsetRow[])(this.GetChildRows(this.Table.ChildRelations["timezone_qn_GMT_offset"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class timezoneRowChangeEvent : EventArgs {
            
            private timezoneRow eventRow;
            
            private DataRowAction eventAction;
            
            public timezoneRowChangeEvent(timezoneRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public timezoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class qn_GMT_offsetDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnptype;
            
            private DataColumn columnqn_GMT_offset_Text;
            
            private DataColumn columntimezone_Id;
            
            internal qn_GMT_offsetDataTable() : 
                    base("qn_GMT_offset") {
                this.InitClass();
            }
            
            internal qn_GMT_offsetDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ptypeColumn {
                get {
                    return this.columnptype;
                }
            }
            
            internal DataColumn qn_GMT_offset_TextColumn {
                get {
                    return this.columnqn_GMT_offset_Text;
                }
            }
            
            internal DataColumn timezone_IdColumn {
                get {
                    return this.columntimezone_Id;
                }
            }
            
            public qn_GMT_offsetRow this[int index] {
                get {
                    return ((qn_GMT_offsetRow)(this.Rows[index]));
                }
            }
            
            public event qn_GMT_offsetRowChangeEventHandler qn_GMT_offsetRowChanged;
            
            public event qn_GMT_offsetRowChangeEventHandler qn_GMT_offsetRowChanging;
            
            public event qn_GMT_offsetRowChangeEventHandler qn_GMT_offsetRowDeleted;
            
            public event qn_GMT_offsetRowChangeEventHandler qn_GMT_offsetRowDeleting;
            
            public void Addqn_GMT_offsetRow(qn_GMT_offsetRow row) {
                this.Rows.Add(row);
            }
            
            public qn_GMT_offsetRow Addqn_GMT_offsetRow(string ptype, string qn_GMT_offset_Text, timezoneRow parenttimezoneRowBytimezone_qn_GMT_offset) {
                qn_GMT_offsetRow rowqn_GMT_offsetRow = ((qn_GMT_offsetRow)(this.NewRow()));
                rowqn_GMT_offsetRow.ItemArray = new object[] {
                        ptype,
                        qn_GMT_offset_Text,
                        parenttimezoneRowBytimezone_qn_GMT_offset[6]};
                this.Rows.Add(rowqn_GMT_offsetRow);
                return rowqn_GMT_offsetRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                qn_GMT_offsetDataTable cln = ((qn_GMT_offsetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new qn_GMT_offsetDataTable();
            }
            
            internal void InitVars() {
                this.columnptype = this.Columns["ptype"];
                this.columnqn_GMT_offset_Text = this.Columns["qn_GMT_offset_Text"];
                this.columntimezone_Id = this.Columns["timezone_Id"];
            }
            
            private void InitClass() {
                this.columnptype = new DataColumn("ptype", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnptype);
                this.columnqn_GMT_offset_Text = new DataColumn("qn_GMT_offset_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnqn_GMT_offset_Text);
                this.columntimezone_Id = new DataColumn("timezone_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columntimezone_Id);
                this.columnptype.Namespace = "";
            }
            
            public qn_GMT_offsetRow Newqn_GMT_offsetRow() {
                return ((qn_GMT_offsetRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new qn_GMT_offsetRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(qn_GMT_offsetRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.qn_GMT_offsetRowChanged != null)) {
                    this.qn_GMT_offsetRowChanged(this, new qn_GMT_offsetRowChangeEvent(((qn_GMT_offsetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.qn_GMT_offsetRowChanging != null)) {
                    this.qn_GMT_offsetRowChanging(this, new qn_GMT_offsetRowChangeEvent(((qn_GMT_offsetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.qn_GMT_offsetRowDeleted != null)) {
                    this.qn_GMT_offsetRowDeleted(this, new qn_GMT_offsetRowChangeEvent(((qn_GMT_offsetRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.qn_GMT_offsetRowDeleting != null)) {
                    this.qn_GMT_offsetRowDeleting(this, new qn_GMT_offsetRowChangeEvent(((qn_GMT_offsetRow)(e.Row)), e.Action));
                }
            }
            
            public void Removeqn_GMT_offsetRow(qn_GMT_offsetRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class qn_GMT_offsetRow : DataRow {
            
            private qn_GMT_offsetDataTable tableqn_GMT_offset;
            
            internal qn_GMT_offsetRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableqn_GMT_offset = ((qn_GMT_offsetDataTable)(this.Table));
            }
            
            public string ptype {
                get {
                    try {
                        return ((string)(this[this.tableqn_GMT_offset.ptypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableqn_GMT_offset.ptypeColumn] = value;
                }
            }
            
            public string qn_GMT_offset_Text {
                get {
                    try {
                        return ((string)(this[this.tableqn_GMT_offset.qn_GMT_offset_TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableqn_GMT_offset.qn_GMT_offset_TextColumn] = value;
                }
            }
            
            public timezoneRow timezoneRow {
                get {
                    return ((timezoneRow)(this.GetParentRow(this.Table.ParentRelations["timezone_qn_GMT_offset"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["timezone_qn_GMT_offset"]);
                }
            }
            
            public bool IsptypeNull() {
                return this.IsNull(this.tableqn_GMT_offset.ptypeColumn);
            }
            
            public void SetptypeNull() {
                this[this.tableqn_GMT_offset.ptypeColumn] = System.Convert.DBNull;
            }
            
            public bool Isqn_GMT_offset_TextNull() {
                return this.IsNull(this.tableqn_GMT_offset.qn_GMT_offset_TextColumn);
            }
            
            public void Setqn_GMT_offset_TextNull() {
                this[this.tableqn_GMT_offset.qn_GMT_offset_TextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class qn_GMT_offsetRowChangeEvent : EventArgs {
            
            private qn_GMT_offsetRow eventRow;
            
            private DataRowAction eventAction;
            
            public qn_GMT_offsetRowChangeEvent(qn_GMT_offsetRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public qn_GMT_offsetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
