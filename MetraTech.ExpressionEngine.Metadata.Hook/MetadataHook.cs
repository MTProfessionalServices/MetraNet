using System;
using System.Linq;
using System.Runtime.InteropServices;
using MetraTech.Basic;
using MetraTech.Basic.Config;
using MetraTech.DataAccess;
using MetraTech.Interop.QueryAdapter;

namespace MetraTech.ExpressionEngine.Metadata.Hook
{
  [Guid("706C1702-05C5-40CC-87E4-72CA5CC5D713")]
  public interface IMetadataHook : Interop.MTHooklib.IMTHook
  {
  }

  /// <summary>
  /// Hook that retrieves metadata from "%RMP%\Apps\Data\MetraTech\Extensions" folder 
  /// generated by Expression Engine export tool integrated in ICE prototype menu.
  /// After that hook inserts new record in "t_metadata" table with serialized metadata.
  /// </summary>
  [Guid("0EE7CD28-E3D1-45A3-BDA0-48AA6571A9F5")]
  [ClassInterface(ClassInterfaceType.None)]
  public class MetadataHook : IMetadataHook
  {

    private readonly ILog _logger = LogManager.GetLogger("MetadataHook");

    public void Execute(object var, ref int pVal)
    {
      try
      {
        _logger.Debug("Retrieve extensions by expression engine");

        var context = Context.LoadExtensions(String.Concat(SystemConfig.GetRmpDir(), @"Apps\Data\MetraTech\Extensions"));

        _logger.Debug("Retrieve metadata from Expression Engine context");

        var metadata = context.GetMetadata();

        _logger.Debug("Serialize metadata");

        var serialized = SerializationHelper.SerializeDataContractXml<ContextMetadata>(metadata);

        _logger.Debug("Get query for dmetadata insert");

        IMTQueryAdapter queryAdapter = new MTQueryAdapter();
        queryAdapter.Init("Queries\\ExpressionEngine");
        queryAdapter.SetQueryTag("__INSERT_METADATA_RECORD__");
        var payHistStmt = queryAdapter.GetQuery();

        _logger.Debug("Execute metadata insert query");

        using (var conn = ConnectionManager.CreateConnection("Queries\\ExpressionEngine"))
        {
          using (var stmtHistory = conn.CreatePreparedStatement(payHistStmt))
          {
            stmtHistory.AddParam(MTParameterType.DateTime, MetraTime.Now);
            stmtHistory.AddParam(MTParameterType.NText, serialized.ToString());
            stmtHistory.ExecuteNonQuery();
            stmtHistory.ClearParams();
          }
        }

        _logger.Debug("Metadata hook successfully finished");

      }
      catch (Exception e)
      {
        _logger.Error("MetraTech.ExpressionEngine.Metadata.Hook.MetadataHook failed with the exception: ", e);
        System.Threading.Thread.Sleep(1000); // sleep so that exception is written to the mtlog.
        throw;
      }
    }

  }
}
