using System;
using MetraTech.Domain.Quoting;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MetraTech.Interop.MTProductCatalog;
using MetraTech.Shared.Test;

namespace MetraTech.Quoting.Test
{
  [TestClass]
  public class QuotingRecurringChargeVariationsFunctionalTests
  {
    #region Setup/Teardown

    [ClassInitialize]
    public static void InitTests(TestContext testContext)
    {
      SharedTestCode.MakeSureServiceIsStarted("ActivityServices");
      SharedTestCode.MakeSureServiceIsStarted("Pipeline");
    }

    #endregion

    [TestMethod]
    public void QuotingWithExistingSubscriptionToDifferentPO()
    {
      #region Prepare
      string testName = "QuotingWithExistingSubscriptionToDifferentPO";
      string testShortName = "Q_OtherPO"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given an account with existing subscription to a Product Offering and a quote request to a second Product Offering, When quote is run Then it includes only the usage for the second PO";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountPairRCs = 1;
      pofConfiguration.CountNRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idExisitingProductOffering = productOffering.ID;

      // Subscribe account to PO
      var effDate = new MTPCTimeSpanClass
      {
        StartDate = MetraTime.Now,
        StartDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE
      };
      object modifiedDate = MetraTime.Now;

      IMTProductCatalog productCatalog = new MTProductCatalogClass();
      IMTSessionContext sessionContext = (IMTSessionContext)SharedTestCode.LoginAsSU();

      productCatalog.SetSessionContext(sessionContext);

      var acc = productCatalog.GetAccount(idAccountToQuoteFor);

      var subscription = acc.Subscribe(idExisitingProductOffering, effDate, out modifiedDate);

      //Values to use for verification

      int numOfAccounts = 1;
      int expectedQuoteNRCsCount = pofConfiguration.CountNRCs * numOfAccounts;
      int expectedQuoteFlatRCsCount = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * numOfAccounts);
      
      pofConfiguration.TotalAmount = (expectedQuoteFlatRCsCount * pofConfiguration.RCAmount) +
                                   (expectedQuoteNRCsCount * pofConfiguration.NRCAmount);
      pofConfiguration.Currency = "USD";

      #endregion

      #region Test and Verify

      try
      {
        // Create another PO
        pofConfiguration.UniqueIdentifier = MetraTime.Now.ToString();
        productOffering = ProductOfferingFactory.Create(pofConfiguration);

        Assert.IsNotNull(productOffering.ID, "Unable to create PO the second time for test run");
        int idProductOfferingToQuoteFor = productOffering.ID;

        //Prepare quote request
        QuoteRequest request = new QuoteRequest();
        request.Accounts.Add(idAccountToQuoteFor);
        request.ProductOfferings.Add(idProductOfferingToQuoteFor);
        request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
        request.QuoteDescription = "Quote generated by Automated Test: " + testName;
        request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
        request.EffectiveDate = MetraTime.Now;
        request.EffectiveEndDate = MetraTime.Now;
        request.Localization = "en-US";

        QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                  pofConfiguration.TotalAmount,
                                                                                  pofConfiguration.Currency,
                                                                                  expectedQuoteFlatRCsCount,
                                                                                  expectedQuoteNRCsCount);

        // Make sure account is still subscribed to initial PO
        Assert.IsNotNull(acc.GetSubscriptionByProductOffering(idExisitingProductOffering));
      }
      finally
      {
        // Remove created subscription
        acc.RemoveSubscription(subscription.ID);
      }

      #endregion
    }

    [TestMethod]
    public void QuotingWithExistingSubscriptionToConflictedPO()
    {
      #region Prepare
      string testName = "QuotingWithExistingSubscriptionToConflictedPO";
      string testShortName = "Q_OtherPOCon"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique


      // Create account
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 2;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");

      //Values to use for verification
      pofConfiguration.TotalAmount = pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 +
                                     pofConfiguration.CountNRCs * pofConfiguration.NRCAmount;
      pofConfiguration.Currency = "USD";

      int idExisitingProductOffering = productOffering.ID;

      // Subscribe account to PO
      var effDate = new MTPCTimeSpanClass
      {
        StartDate = MetraTime.Now,
        StartDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE
      };
      object modifiedDate = MetraTime.Now;

      IMTProductCatalog productCatalog = new MTProductCatalogClass();
      IMTSessionContext sessionContext = (IMTSessionContext)SharedTestCode.LoginAsSU();

      productCatalog.SetSessionContext(sessionContext);

      var acc = productCatalog.GetAccount(idAccountToQuoteFor);

      var subscription = acc.Subscribe(idExisitingProductOffering, effDate, out modifiedDate);

      //Values to use for verification
      decimal expectedQuoteTotal = 0M;
      string expectedQuoteCurrency = "";

      int expectedQuoteNRCsCount = 0;
      int expectedQuoteFlatRCsCount = 0;

      #endregion

      #region Test and Verify

      try
      {
        //Prepare quote request
        QuoteRequest request = new QuoteRequest();
        request.Accounts.Add(idAccountToQuoteFor);
        request.ProductOfferings.Add(idExisitingProductOffering);
        request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
        request.QuoteDescription = "Quote generated by Automated Test: " + testName;
        request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
        request.EffectiveDate = MetraTime.Now;
        request.EffectiveEndDate = MetraTime.Now;
        request.Localization = "en-US";

        // We expect it to throw COMException
        QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                  expectedQuoteTotal,
                                                                                  expectedQuoteCurrency,
                                                                                  expectedQuoteFlatRCsCount,
                                                                                  expectedQuoteNRCsCount);
        Assert.Fail("An exception should have been thrown due to existing conflicting subscription");
      }
      catch (System.Runtime.InteropServices.COMException coe)
      {
        Assert.IsTrue(coe.Message.Contains("already subscribed"));
      }
      catch (Exception e)
      {
        Assert.Fail("Expected conflicting subscription exception but got Exception: " + e.Message);
      }
      finally
      {
        // Remove created subscription
        acc.RemoveSubscription(subscription.ID);
      }

      #endregion
    }

  }
}
