using System;
using System.Text;
using System.Collections.Generic;
using MetraTech.DataAccess;
using MetraTech.Domain.Quoting;
using MetraTech.Interop.GenericCollection;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using MetraTech.Interop.MTProductCatalog;
using MetraTech.Shared.Test;

namespace MetraTech.Quoting.Test
{
  [TestClass]
  public class QuotingBasicFunctionalTests
  {

    #region Setup/Teardown

    [ClassInitialize]
    public static void InitTests(TestContext testContext)
    {
      SharedTestCode.MakeSureServiceIsStarted("ActivityServices");
      SharedTestCode.MakeSureServiceIsStarted("Pipeline");
    }

    #endregion

    [TestMethod]
    public void BasicQuotingEndToEnd()
    {
      #region Prepare
      string testName = "Quote_Basic";
      string testShortName = "Q_Basic"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1; //????
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";
      request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);

      int numOfAccounts = request.Accounts.Count;
      int expectedQuoteNRCsCount = pofConfiguration.CountNRCs * numOfAccounts;
      int expectedQuoteFlatRCsCount = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * numOfAccounts);
      int expectedQuoteUDRCsCount = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * numOfAccounts);

      decimal totalAmountForUDRC = 30;

      decimal expectedQuoteTotal = (expectedQuoteFlatRCsCount * pofConfiguration.RCAmount) +
                                   (expectedQuoteUDRCsCount * totalAmountForUDRC) +
                                   (expectedQuoteNRCsCount * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount,
                                                                                expectedQuoteUDRCsCount);


      #endregion
    }

    [TestMethod]
    public void QuotingProductOfferingWithoutAnyRCsOrNRCs()
    {
      #region Prepare

      string testName = "QuotingProductOfferingWithoutAnyRCsOrNRCs";
      string testShortName = "Q_PONoRCNoNRC"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given an account and a quote request for a Product Offering that has no RCs or NRCs, When quote is run Then it there is no error and total is zero";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account for test run
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 0;
      pofConfiguration.CountPairRCs = 0; //????

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      decimal expectedQuoteTotal = 0M;
      string expectedQuoteCurrency = ""; //Might be nice in future if currency picked up from PO but now if there is no usage, we don't see currency

      int expectedQuoteNRCsCount = 0;
      int expectedQuoteFlatRCsCount = 0;
      #endregion


      #region Test and Verify

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteNRCsCount,
                                                                                expectedQuoteFlatRCsCount);

      #endregion
    }

    [TestMethod]
    public void QuotingWithMultipleProductOfferings()
    {
      #region Prepare

      string testName = "QuotingWithMultipleProductOfferings";
      string testShortName = "Q_MultiPO"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given an account and a quote request for more than one Product Offering, When quote is run Then it includes all the usage";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      int numberProductOfferingsToIncludeInQuote = 4;

      // Create account for test run
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1; //????

      //Now generate the Product Offerings we need
      List<int> posToAdd = new List<int>();

      for (int i = 1; i < numberProductOfferingsToIncludeInQuote + 1; i++)
      {
        pofConfiguration.Name = testShortName + "_" + i;
        pofConfiguration.UniqueIdentifier = testRunUniqueIdentifier + "_" + i;
        IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
        Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
        posToAdd.Add(productOffering.ID);
      }

      //Values to use for verification
      int expectedQuoteNRCsCount = numberProductOfferingsToIncludeInQuote * pofConfiguration.CountNRCs;
      int expectedQuoteFlatRCsCount = numberProductOfferingsToIncludeInQuote * pofConfiguration.CountPairRCs * 2; //???

      decimal expectedQuoteTotal = numberProductOfferingsToIncludeInQuote * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.ProductOfferings.AddRange(posToAdd);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount);
      #endregion
    }

    [TestMethod]
    public void QuotingWithMultipleAccounts()
    {
      #region Prepare

      string testName = "QuotingWithMultipleAccounts";
      string testShortName = "Q_MAcc"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given a quote request for multiple accounts and a Product Offering, When quote is run Then it includes all the usage";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      const int numberOfAccountsToIncludeInQuote = 4;

      // Create accounts
      var corpAccountHolders = new List<int>();

      for (int i = 1; i < numberOfAccountsToIncludeInQuote + 1; i++)
      {
        var corpAccountHolder = new CorporateAccountFactory(testShortName + "_" + i, testRunUniqueIdentifier);

        corpAccountHolder.Instantiate();

        Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
        corpAccountHolders.Add((int)corpAccountHolder.Item._AccountID);
      }

      // Create/Verify Product Offering Exists
      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1; //????

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      int expectedQuoteNRCsCount = numberOfAccountsToIncludeInQuote * pofConfiguration.CountNRCs;
      int expectedQuoteFlatRCsCount = numberOfAccountsToIncludeInQuote * pofConfiguration.CountPairRCs * 2; //???

      decimal expectedQuoteTotal = numberOfAccountsToIncludeInQuote * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.AddRange(corpAccountHolders);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount);
      #endregion
    }

    [TestMethod]
    public void QuotingWithAccountsWithDifferentPayersInOneSet()
    {
      #region Prepare

      string testName = "QuotingWithAccountsWithDifferentPayers";
      string testShortName = "Q_DifP"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.NowWithMilliSec; //Identifier to make this run unique

      // Create account #1 Corporate payer
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department payee
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department payee
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create account #4 Corporate self-payed non-payer
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor4 = corpAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      int expectedQuoteNRCsCount = 4 * pofConfiguration.CountNRCs;
      int expectedQuoteFlatRCsCount = 4 * pofConfiguration.CountPairRCs * 2;

      decimal expectedQuoteTotal = 4 * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.Accounts.Add(idAccountToQuoteFor2);
      request.Accounts.Add(idAccountToQuoteFor3);
      request.Accounts.Add(idAccountToQuoteFor4);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount);
      #endregion
    }

    [TestMethod]
    public void QuotingWithAccountsWithDifferentPayersInDifferentSet()
    {
      #region Prepare

      string testName = "QuotingWithAccountsWithDifferentPayersInDifferentSet";
      string testShortName = "Q_DifPS"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.NowWithMilliSec; //Identifier to make this run unique

      // Create account #1 Corporate payer
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department payee
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department outside of the account set
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create account #4 Department payee by an account outside of the account set
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.PayerID = idAccountToQuoteFor3;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor4 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      int expectedQuoteNRCsCount = 3 * pofConfiguration.CountNRCs;
      int expectedQuoteFlatRCsCount = 3 * pofConfiguration.CountPairRCs * 2;

      decimal expectedQuoteTotal = 3 * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test and Verify

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.Accounts.Add(idAccountToQuoteFor2);
      request.Accounts.Add(idAccountToQuoteFor4);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";

      try
      {
        QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                         expectedQuoteTotal,
                                                         expectedQuoteCurrency,
                                                         expectedQuoteFlatRCsCount,
                                                         expectedQuoteNRCsCount);

        Assert.Fail("An exception should have been thrown due to missing payer account in the quote request");
      }
      catch (Exception ex)
      {
        Assert.IsTrue(ex.Message.Contains("All account payers must be included in the quote request"), "Wrong exception message: " + ex);
      }

      #endregion
    }

    [TestMethod]
    public void QuotingWithMultipleAccountsAndMultiplePOs()
    {
      #region Prepare
      string testName = "QuotingWithMultipleAccountsAndMultiplePOs";
      string testShortName = "Q_MAMPO"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      //string testDescription = @"Given a quote request for multiple accounts and multiple Product Offerings, When quote is run Then it includes all the usage";
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      const int numberOfAccountsToIncludeInQuote = 4;
      const int numberProductOfferingsToIncludeInQuote = 4;

      // Create accounts
      var corpAccountHolders = new List<int>();

      for (int i = 1; i < numberOfAccountsToIncludeInQuote + 1; i++)
      {
        var corpAccountHolder = new CorporateAccountFactory(testShortName + i.ToString(), testRunUniqueIdentifier);

        corpAccountHolder.Instantiate();

        Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
        corpAccountHolders.Add((int)corpAccountHolder.Item._AccountID);
      }

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testShortName, testRunUniqueIdentifier);

      pofConfiguration.CountNRCs = 2;
      pofConfiguration.CountPairRCs = 1; //????

      //Now generate the Product Offerings we need
      List<int> posToAdd = new List<int>();

      for (int i = 1; i < numberProductOfferingsToIncludeInQuote + 1; i++)
      {
        pofConfiguration.Name = testShortName + "_" + i;
        pofConfiguration.UniqueIdentifier = testRunUniqueIdentifier + "_" + i;
        IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
        Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
        posToAdd.Add(productOffering.ID);
      }

      //Values to use for verification
      int expectedQuoteNRCsCount = numberOfAccountsToIncludeInQuote * numberProductOfferingsToIncludeInQuote * pofConfiguration.CountNRCs;
      int expectedQuoteFlatRCsCount = numberOfAccountsToIncludeInQuote * numberProductOfferingsToIncludeInQuote * pofConfiguration.CountPairRCs * 2; //???

      decimal expectedQuoteTotal = numberOfAccountsToIncludeInQuote * numberProductOfferingsToIncludeInQuote * (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 + pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test and Verify
      //Prepare request
      QuoteRequest request = new QuoteRequest();

      request.Accounts.AddRange(corpAccountHolders);
      request.ProductOfferings.AddRange(posToAdd);

      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount);
      #endregion
    }

    [TestMethod]
    public void QuotingWithUDRCWithBadMetricValues()
    {
      #region Prepare

      string testName = "QuotingWithUDRCWithBadMetricValues";
      string testShortName = "Q_NMV"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1; //????
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      decimal expectedQuoteTotal = (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2) + (pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      int expectedQuoteNRCsCount = 1;
      int expectedQuoteFlatRCsCount = 2;

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";
      request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering, idUDRC: 666666);
      string expectedExceptionMessage = "UDRC ID added to SubscriptionParameters does not exist"; 
      try
      {
        QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                  expectedQuoteTotal,
                                                                                  expectedQuoteCurrency,
                                                                                  expectedQuoteFlatRCsCount,
                                                                                  expectedQuoteNRCsCount);
        Assert.Fail("Quote should've been failed because of wrong UDRC ID");
      }
      catch (Exception ex)
      {
        Assert.IsTrue(ex.Message.Contains(expectedExceptionMessage));
      }

      #endregion
    }

    [TestMethod]
    public void QuotingWithGroupSubscription()
    {
      #region Prepare
      string testName = "QuotingWithGroupSubscription";
      string testShortName = "Q_GSub"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account #1 Corporate
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1;
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      //decimal expectedQuoteTotal = (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2) + (pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.Accounts.Add(idAccountToQuoteFor2);
      request.Accounts.Add(idAccountToQuoteFor3);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now.AddHours(1);
      request.Localization = "en-US";
      request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);
      request.SubscriptionParameters.CorporateAccountId = idAccountToQuoteFor;
      request.SubscriptionParameters.IsGroupSubscription = true;

      int numOfAccounts = request.Accounts.Count;
      int expectedQuoteNRCsCount = pofConfiguration.CountNRCs * numOfAccounts;
      int expectedQuoteFlatRCsCount = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * numOfAccounts);
      int expectedQuoteUDRCsCount = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * numOfAccounts);

      decimal totalAmountForUDRC = 30;//introduce formula based on PT

      decimal expectedQuoteTotal = (expectedQuoteFlatRCsCount * pofConfiguration.RCAmount) +
                                   (expectedQuoteUDRCsCount * totalAmountForUDRC) +
                                   (expectedQuoteNRCsCount * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount,
                                                                                expectedQuoteUDRCsCount);


      #endregion
    }

    [TestMethod]
    public void QuotingWithGroupSubscriptionTwoTimes()
    {
      #region Prepare
      string testName = "QuotingWithGroupSubscription";
      string testShortName = "Q_GSub"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account #1 Corporate
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1;
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      //decimal expectedQuoteTotal = (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2) + (pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.Accounts.Add(idAccountToQuoteFor2);
      request.Accounts.Add(idAccountToQuoteFor3);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now.AddHours(1);
      request.Localization = "en-US";
      request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);
      request.SubscriptionParameters.CorporateAccountId = idAccountToQuoteFor;
      request.SubscriptionParameters.IsGroupSubscription = true;

      int numOfAccounts = request.Accounts.Count;
      int expectedQuoteNRCsCount = pofConfiguration.CountNRCs * numOfAccounts;
      int expectedQuoteFlatRCsCount = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * numOfAccounts);
      int expectedQuoteUDRCsCount = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * numOfAccounts);

      decimal totalAmountForUDRC = 30;//introduce formula based on PT

      decimal expectedQuoteTotal = (expectedQuoteFlatRCsCount * pofConfiguration.RCAmount) +
                                   (expectedQuoteUDRCsCount * totalAmountForUDRC) +
                                   (expectedQuoteNRCsCount * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response1 = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount,
                                                                                expectedQuoteUDRCsCount);

      QuoteResponse response2 = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount,
                                                                                expectedQuoteUDRCsCount);

      Assert.AreEqual(response1.TotalAmount, response2.TotalAmount, "Total amount was different on the second run");


      #endregion
    }

    [TestMethod]
    public void SubscribeAfterQuoting()
    {
      #region Prepare
      string testName = "SubscribeAfterQuoting";
      string testShortName = "Q_SubA"; //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account
      CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = (int)corpAccountHolder.Item._AccountID;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1; //????
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams() { PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now;
      request.Localization = "en-US";
      request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);

      int numOfAccounts = request.Accounts.Count;
      int expectedQuoteNRCsCount = pofConfiguration.CountNRCs * numOfAccounts;
      int expectedQuoteFlatRCsCount = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs * numOfAccounts);
      int expectedQuoteUDRCsCount = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs * numOfAccounts);

      decimal totalAmountForUDRC = 30;

      decimal expectedQuoteTotal = (expectedQuoteFlatRCsCount * pofConfiguration.RCAmount) +
                                   (expectedQuoteUDRCsCount * totalAmountForUDRC) +
                                   (expectedQuoteNRCsCount * pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount,
                                                                                expectedQuoteUDRCsCount);

      MTSubscription subscription = null;
      MTPCAccount account = null;

      try
      {
        account = SharedTestCode.CurrentProductCatalog.GetAccount(idAccountToQuoteFor);

        var effDate = new MTPCTimeSpanClass
          {
            StartDate = request.EffectiveDate,
            StartDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE
          };

        object modifiedDate = MetraTime.Now;
        subscription = account.Subscribe(idProductOfferingToQuoteFor, effDate, out modifiedDate);
      }
      catch (Exception ex)
      {
        Assert.Fail("Creating subscription after quotion failed with exception: " + ex);
      }
      finally
      {
        if (subscription != null)
        {
          account.RemoveSubscription(subscription.ID);
        }
      }

      #endregion
    }

    [TestMethod]
    public void SubscribeAfterQuotingWithGroupSubscription()
    {
      #region Prepare

      string testName = "SubscribeAfterQuotingWithGroupSubscription";
      string testShortName = "Q_GSubA";
        //Account name and perhaps others need a 'short' (less than 40 when combined with testRunUniqueIdentifier
      string testRunUniqueIdentifier = MetraTime.Now.ToString(); //Identifier to make this run unique

      // Create account #1 Corporate
      var corpAccountHolder = new CorporateAccountFactory(testShortName, testRunUniqueIdentifier);
      corpAccountHolder.Instantiate();

      Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor = corpAccountHolder.Item._AccountID.Value;

      // Create account #2 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      var deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor2 = deptAccountHolder.Item._AccountID.Value;

      // Create account #3 Department child
      testRunUniqueIdentifier = MetraTime.NowWithMilliSec;

      deptAccountHolder = new DepartmentAccountFactory(testShortName, testRunUniqueIdentifier);
      deptAccountHolder.AncestorID = idAccountToQuoteFor;
      deptAccountHolder.Instantiate();

      Assert.IsNotNull(deptAccountHolder.Item._AccountID, "Unable to create account for test run");
      int idAccountToQuoteFor3 = deptAccountHolder.Item._AccountID.Value;

      // Create/Verify Product Offering Exists
      var pofConfiguration = new ProductOfferingFactoryConfiguration(testName, testRunUniqueIdentifier);
      pofConfiguration.CountNRCs = 1;
      pofConfiguration.CountPairRCs = 1;
      pofConfiguration.CountPairUDRCs = 1;

      IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
      Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
      int idProductOfferingToQuoteFor = productOffering.ID;

      //Values to use for verification
      //decimal expectedQuoteTotal = (pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2) + (pofConfiguration.CountNRCs * pofConfiguration.NRCAmount);
      string expectedQuoteCurrency = "USD";

      #endregion

      #region Test

      // Ask backend to start quote

      //Prepare request
      QuoteRequest request = new QuoteRequest();
      request.Accounts.Add(idAccountToQuoteFor);
      request.Accounts.Add(idAccountToQuoteFor2);
      request.Accounts.Add(idAccountToQuoteFor3);
      request.ProductOfferings.Add(idProductOfferingToQuoteFor);
      request.QuoteIdentifier = "MyQuoteId-" + testShortName + "-1234";
      request.QuoteDescription = "Quote generated by Automated Test: " + testName;
      request.ReportParameters = new ReportParams()
        {
          PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault
        };
      request.EffectiveDate = MetraTime.Now;
      request.EffectiveEndDate = MetraTime.Now.AddHours(1);
      request.Localization = "en-US";
      request.SubscriptionParameters.UDRCValues = SharedTestCode.GetUDRCInstanceValuesSetToMiddleValues(productOffering);
      request.SubscriptionParameters.CorporateAccountId = idAccountToQuoteFor;
      request.SubscriptionParameters.IsGroupSubscription = true;

      int numOfAccounts = request.Accounts.Count;
      int expectedQuoteNRCsCount = pofConfiguration.CountNRCs*numOfAccounts;
      int expectedQuoteFlatRCsCount = pofConfiguration.CountPairRCs + (pofConfiguration.CountPairRCs*numOfAccounts);
      int expectedQuoteUDRCsCount = pofConfiguration.CountPairUDRCs + (pofConfiguration.CountPairUDRCs*numOfAccounts);

      decimal totalAmountForUDRC = 30; //introduce formula based on PT

      decimal expectedQuoteTotal = (expectedQuoteFlatRCsCount*pofConfiguration.RCAmount) +
                                   (expectedQuoteUDRCsCount*totalAmountForUDRC) +
                                   (expectedQuoteNRCsCount*pofConfiguration.NRCAmount);

      //Give request to testing scenario along with expected results for verification; get back response for further verification
      QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
                                                                                expectedQuoteTotal,
                                                                                expectedQuoteCurrency,
                                                                                expectedQuoteFlatRCsCount,
                                                                                expectedQuoteNRCsCount,
                                                                                expectedQuoteUDRCsCount);

      var createdGroupSubsciptions = new List<IMTGroupSubscription>();

      try
      {
        //Create quote subscriptions as subscriptions
        var effectiveDate = new MTPCTimeSpanClass
          {
            StartDate = request.EffectiveDate,
            StartDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE,
            EndDate = request.EffectiveEndDate,
            EndDateType = MTPCDateType.PCDATE_TYPE_ABSOLUTE
          };

        //TODO: Figure out correct cycle for group sub or if it should be passed
        var groupSubscriptionCycle = new MTPCCycle
          {
            CycleTypeID = 1,
            EndDayOfMonth = 31
          };

        IMTGroupSubscription mtGroupSubscription = SharedTestCode.CurrentProductCatalog.CreateGroupSubscription();
        mtGroupSubscription.EffectiveDate = effectiveDate;
        mtGroupSubscription.ProductOfferingID = idProductOfferingToQuoteFor;
        mtGroupSubscription.ProportionalDistribution = true;
        mtGroupSubscription.Name = string.Format("TempQuoteGSForPO_{0}", idProductOfferingToQuoteFor);
        mtGroupSubscription.Description = "Group subscription for Quoting. ProductOffering: " +
                                          idProductOfferingToQuoteFor;
        mtGroupSubscription.SupportGroupOps = true;
        mtGroupSubscription.CorporateAccount = request.SubscriptionParameters.CorporateAccountId;
        mtGroupSubscription.Cycle = groupSubscriptionCycle;

        const int FLAT_RC_TYPE_ID = 214;
        const int FLAT_UDRC_TYPE_ID = 245;

        foreach (
          MTPriceableItem pi in
            SharedTestCode.CurrentProductCatalog.GetProductOffering(idProductOfferingToQuoteFor)
                          .GetPriceableItemsOfType(FLAT_RC_TYPE_ID))
        {
          mtGroupSubscription.SetChargeAccount(pi.ID, request.SubscriptionParameters.CorporateAccountId,
                                               request.EffectiveDate, request.EffectiveEndDate);
        }

        foreach (
          MTPriceableItem pi in
            SharedTestCode.CurrentProductCatalog.GetProductOffering(idProductOfferingToQuoteFor)
                          .GetPriceableItemsOfType(FLAT_UDRC_TYPE_ID))
        {
          mtGroupSubscription.SetChargeAccount(pi.ID, request.SubscriptionParameters.CorporateAccountId,
                                               request.EffectiveDate, request.EffectiveEndDate);

          //Update UDRC values
          // Set recurring charge unit values
          if (request.SubscriptionParameters.UDRCValues.ContainsKey(idProductOfferingToQuoteFor.ToString()))
          {
            foreach (
              var udrcInstanceValue in request.SubscriptionParameters.UDRCValues[idProductOfferingToQuoteFor.ToString()]
              )
            {
              mtGroupSubscription.SetRecurringChargeUnitValue(udrcInstanceValue.UDRC_Id,
                                                              udrcInstanceValue.Value,
                                                              udrcInstanceValue.StartDate,
                                                              udrcInstanceValue.EndDate);
            }
          }
        }

        mtGroupSubscription.Save();
        createdGroupSubsciptions.Add(mtGroupSubscription);

        MTGSubMember mtGsubMember = null;

        MetraTech.Interop.MTProductCatalog.IMTCollection mtCollection =
          new MTCollection() as MetraTech.Interop.MTProductCatalog.IMTCollection;

        foreach (int idAccount in request.Accounts)
        {
          mtGsubMember = new MTGSubMember();
          mtGsubMember.AccountID = idAccount;
          mtGsubMember.StartDate = request.EffectiveDate;
          mtGsubMember.EndDate = request.EffectiveEndDate;

          mtCollection.Add(mtGsubMember);
        }

        bool modified;
        MetraTech.Interop.MTProductCatalog.IMTRowSet errorRowset =
          mtGroupSubscription.AddAccountBatch(mtCollection, null, out modified, null);

        #region Handle exception from AddAccountBatch

        if (errorRowset.RecordCount > 0)
        {
          StringBuilder errorString = new StringBuilder();
          string curError = "Error adding group subscription members";
          errorString.Append(curError + System.Environment.NewLine);

          while (!System.Convert.ToBoolean(errorRowset.EOF))
          {
            curError = "Account " +
                       ((int) errorRowset.get_Value("id_acc")).ToString() +
                       ": " +
                       (string) errorRowset.get_Value("description");

            errorString.Append(curError + System.Environment.NewLine);

            errorRowset.MoveNext();
          }
          errorRowset.MoveFirst();
        }

        #endregion

        mtGroupSubscription.Save();
        createdGroupSubsciptions.Add(mtGroupSubscription);
      }
      catch (Exception ex)
      {
        Assert.Fail("Creating group subscription after quoting failed with exception: " + ex);
      }
      finally
      {
        // Remove group subscriptions
        foreach (var subscription in createdGroupSubsciptions)
        {
          // Unsubscribe members
          foreach (var idAccount in request.Accounts)
          {
            MetraTech.Interop.MTProductCatalog.IMTGSubMember gsmember =
              new MetraTech.Interop.MTProductCatalog.MTGSubMemberClass();
            gsmember.AccountID = idAccount;

            if (subscription.FindMember(idAccount, request.EffectiveDate) != null)
            {
              subscription.UnsubscribeMember((MetraTech.Interop.MTProductCatalog.MTGSubMember) gsmember);
            }
          }

          using (IMTNonServicedConnection conn = ConnectionManager.CreateNonServicedConnection())
          {
            using (IMTCallableStatement stmt = conn.CreateCallableStatement("RemoveGroupSubscription_Quoting"))
            {
              int status = 0;
              stmt.AddParam("p_id_sub", MTParameterType.Integer, subscription.ID);
              stmt.AddParam("p_systemdate", MTParameterType.DateTime, request.EffectiveDate);
              stmt.AddParam("p_status", MTParameterType.Integer, status);
              stmt.ExecuteNonQuery();
            }

            using (IMTAdapterStatement stmt = conn.CreateAdapterStatement("Queries\\Quoting", "__REMOVE_RC_METRIC_VALUES__"))
            {
              stmt.AddParam("%%ID_SUB%%", subscription.ID);
              stmt.ExecuteNonQuery();
            }
          }
        }
      }

      #endregion
    }

    //[TestMethod]
    //This test is now covered by the other test cases that include several NRCs and several RCs
    //public void QuotingProductOfferingWithSeveralRCsAndSeveralNRCs()
    //{
    //  #region Prepare

    //  var pofConfiguration = new ProductOfferingFactoryConfiguration();
    //  pofConfiguration.Name = "Quote_Basic";
    //  pofConfiguration.UniqueIdentifier = MetraTime.Now.ToString();

    //  // Create account
    //  CorporateAccountFactory corpAccountHolder = new CorporateAccountFactory(pofConfiguration.Name, pofConfiguration.UniqueIdentifier);
    //  corpAccountHolder.Instantiate();

    //  Assert.IsNotNull(corpAccountHolder.Item._AccountID, "Unable to create account for test run");
    //  pofConfiguration.IdAccount = (int)corpAccountHolder.Item._AccountID;

    //  // Create/Verify Product Offering Exists
    //  pofConfiguration.RCAmount = 19.95M;
    //  pofConfiguration.NRCAmount = 29.95M;
    //  pofConfiguration.RCPerSubscriptionAmount = 9.95M;

    //  pofConfiguration.CountNRCs = 2;
    //  pofConfiguration.CountPairRCs = 2;

    //  IMTProductOffering productOffering = ProductOfferingFactory.Create(pofConfiguration);
    //  Assert.IsNotNull(productOffering.ID, "Unable to create PO for test run");
    //  int idProductOfferingToQuoteFor = productOffering.ID;

    //  //Values to use for verification
    //  pofConfiguration.TotalAmount = pofConfiguration.CountPairRCs * pofConfiguration.RCAmount * 2 +
    //                                 pofConfiguration.CountNRCs * pofConfiguration.NRCAmount;
    //  pofConfiguration.Currency = "USD";

    //  #endregion

    //  #region Test and Verify
    //  //Prepare request
    //  QuoteRequest request = new QuoteRequest();
    //  request.Accounts.Add(pofConfiguration.IdAccount);
    //  request.ProductOfferings.Add(idProductOfferingToQuoteFor);
    //  request.QuoteIdentifier = "MyQuoteId-1234";
    //  request.QuoteDescription = "Quote generated by Automated Test: " + "QuotingProductOfferingWithSeveralRCsAndSeveralNRCs";
    //  request.ReportParameters = new ReportParams(){PDFReport = QuotingTestScenarios.RunPDFGenerationForAllTestsByDefault};
    //  request.EffectiveDate = MetraTime.Now;
    //  request.EffectiveEndDate = MetraTime.Now;
    //  request.Localization = "en-US";

    //  //Give request to testing scenario along with expected results for verification; get back response for further verification
    //  QuoteResponse response = QuotingTestScenarios.CreateQuoteAndVerifyResults(request,
    //                                                                            pofConfiguration.TotalAmount,
    //                                                                            pofConfiguration.Currency,
    //                                                                            pofConfiguration.CountPairRCs * 2,
    //                                                                            pofConfiguration.CountNRCs);
    //  #endregion
    //}

  }
}
