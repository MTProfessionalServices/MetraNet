<LoggerClassConfiguration typeName="MetraTech.SecurityFramework.Core.Common.Logging.EntLibErrorLogger, MetraTech.SecurityFramework.Core.Common">
    <Configuration tracingEnabled="true" defaultCategory="General">
        <Listeners>
            <Item  RealType="MetraTech.SecurityFramework.Core.Common.Logging.Configuration.FlatFileTraceListenerConfiguration, MetraTech.SecurityFramework.Core.Common"
              name="FlatFileTraceListener"
              listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
              FileName="C:\Temp\SecurityFramework\unittest_errors.log"
              formatter="Text Formatter"
              traceOutputOptions="DateTime, Timestamp, ProcessId"
              filter="Error" />
			<!--Item  RealType="MetraTech.SecurityFramework.Core.Common.Logging.Configuration.TraceListenerConfiguration, MetraTech.SecurityFramework"
              name="MetraTechLogTraceListener"
              listenerDataType="MetraTech.SecurityFramework.MTLogging.Configuration.MetraTechLogTraceListenerData, MetraTech.SecurityFramework.MTLogging"
              filter="Verbose" /-->
        </Listeners>
        <Formatters>
            <Item typeName="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
              template="Timestamp: {timestamp}{newline}&#xA;Message: {message}{newline}&#xA;Category: {category}{newline}&#xA;Priority: {priority}{newline}&#xA;EventId: {eventid}{newline}&#xA;Severity: {severity}{newline}&#xA;Title:{title}{newline}&#xA;Machine: {localMachine}{newline}&#xA;App Domain: {localAppDomain}{newline}&#xA;ProcessId: {localProcessId}{newline}&#xA;Process Name: {localProcessName}{newline}&#xA;Thread Name: {threadName}{newline}&#xA;Win32 ThreadId:{win32ThreadId}{newline}&#xA;Extended Properties: {dictionary({key} - {value}{newline})}"
              name="Text Formatter" />
        </Formatters>
        <CategorySources>
            <Item SwitchValue="All" CategoryName="General">
                <Listeners>
                    <Item value="FlatFileTraceListener" />
                    <Item value="MetraTechLogTraceListener" />
                </Listeners>
            </Item>
        </CategorySources>
        <AllEvents switchValue="All" CategoryName="All Events" />
        <NotProcessed switchValue="All" CategoryName="Unprocessed Category" />
        <Errors switchValue="All" CategoryName="Logging Errors &amp; Warnings">
            <listeners>
                <Item value="FlatFileTraceListener" />
                <Item value="MetraTechLogTraceListener" />
            </listeners>
        </Errors>
        <ExceptionPolicyConfiguration PolicyName="securityFrameworkLog">
            <ExceptionTypes>
                <Item name="All Exceptions" typeName="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                    PostHandlingAction="NotifyRethrow">
                    <ExceptionHandlers>
                        <Item name="Logging Exception Handler" typeName="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                          logCategory="General" eventId="100" severity="Error" title="Enterprise Library Exception Handling"
                          formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                          priority="0" />
                    </ExceptionHandlers>
                </Item>
                <Item name="ThreadAbortException" typeName="System.Threading.ThreadAbortException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
                   postHandlingAction="None" />
                <!--<Item name="SecurityFrameworkException" typeName="MetraTech.SecurityFramework.SecurityFrameworkException, MetraTech.SecurityFramework, Version=1.0.0.0, Culture=neutral, PublicKeyToken=a0f5c26dbec45a75"
                  postHandlingAction="None" />-->
            </ExceptionTypes>
        </ExceptionPolicyConfiguration>
    </Configuration>
    <!--
  <exceptionHandling>
    <exceptionPolicies>
      <add name="securityFrameworkLog">
        <exceptionTypes>
          <add name="All Exceptions" type="System.Exception, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="NotifyRethrow">
            <exceptionHandlers>
              <add name="Logging Exception Handler" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
                logCategory="General" eventId="100" severity="Error" title="Enterprise Library Exception Handling"
                formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling"
                priority="0" />
            </exceptionHandlers>
          </add>
          <add name="ThreadAbortException" type="System.Threading.ThreadAbortException, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
            postHandlingAction="None" />
          <add name="SecurityFrameworkException" type="MetraTech.SecurityFramework.SecurityFrameworkException, MetraTech.SecurityFramework, Version=1.0.0.0, Culture=neutral, PublicKeyToken=a0f5c26dbec45a75"
            postHandlingAction="None" />
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>
  <loggingConfiguration name="" tracingEnabled="true" defaultCategory="General">
    <listeners>
      <add name="FlatFileTraceListener" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.FlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.FlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        fileName="C:\Temp\SecurityFramework\trace.log" formatter="Text Formatter"
        traceOutputOptions="DateTime, Timestamp, ProcessId" filter="Error" />
    </listeners>
    <formatters>
      <add type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging, Version=5.0.414.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        template="Timestamp: {timestamp}{newline}&#xA;Message: {message}{newline}&#xA;Category: {category}{newline}&#xA;Priority: {priority}{newline}&#xA;EventId: {eventid}{newline}&#xA;Severity: {severity}{newline}&#xA;Title:{title}{newline}&#xA;Machine: {localMachine}{newline}&#xA;App Domain: {localAppDomain}{newline}&#xA;ProcessId: {localProcessId}{newline}&#xA;Process Name: {localProcessName}{newline}&#xA;Thread Name: {threadName}{newline}&#xA;Win32 ThreadId:{win32ThreadId}{newline}&#xA;Extended Properties: {dictionary({key} - {value}{newline})}"
        name="Text Formatter" />
    </formatters>
    <categorySources>
      <add switchValue="All" name="General">
        <listeners>
          <add name="FlatFileTraceListener" />
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events" />
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="FlatFileTraceListener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <metraTechSecurityFramework>
    <common autoReportBadData="true" />
    <loggerClass typeName="MetraTech.SecurityFramework.Core.Common.Logging.EntLibErrorLogger, MetraTech.SecurityFramework" policyName="securityFrameworkLog" />
  </metraTechSecurityFramework>
 -->
</LoggerClassConfiguration>