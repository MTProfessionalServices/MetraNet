#region

using System;
using System.Collections;
using System.IO;
using System.Runtime.InteropServices;
using BillSoft.EZTaxNET;

#endregion

#region AutoGenerated Enum Includes (Do not modify this region)

//ENUM_USING

#endregion

namespace MetraTech.Tax.Plugins.BillSoft
{
  public sealed partial class PCodeLookup : PlugInBase
  {
    private bool mUnstable = false;

    #region ProcessAllSessions (Only modify this in the rare case you need to handle more than one session at once)

    /// <summary>
    /// This method is called each time the plug-in recieves a session set
    /// </summary>
    protected override void ProcessAllSessions(PropertiesCollection propsCol)
    {
      bool partiallyFailed = false;
      foreach (Properties props in propsCol)
      {
        //set the current session for logging purposes
        SetCurrentSession(props.Session);

        try
        {
            if(!mUnstable)
                ProcessSession(props);
            else
            {
                partiallyFailed = true;
                Log(LogLevel.Warning,
                    string.Format("Error when processing session: {0}", "BillSoft Installation not functioning correctly, please install up to date version."));
                //mark the session as failed
                props.Session.MarkAsFailed(
                  string.Format("Error when processing session. {0}",
                                "BillSoft Installation not functioning correctly, please install up to date version."), MARK_AS_FAILED_CODE_FAILED);
            }
        }
        catch (Exception ex)
        {
          partiallyFailed = true;
          Log(LogLevel.Warning,
              string.Format("Error when processing session: {0}", ex.Message));
          //mark the session as failed
          props.Session.MarkAsFailed(
            string.Format("Error when processing session. Source: {0}, Message: {1}",
                          ex.Source, ex.Message), MARK_AS_FAILED_CODE_FAILED);
        }
        finally
        {
          Log(LogLevel.Debug, "Session object disposed successfully");
          props.Session.Dispose();
        }
      }

      //if any of the sessions failed, go ahead and throw an exception here
      if (partiallyFailed)
        throw new MetraTech.Pipeline.PlugIns.PartialFailureException();
    }

    #endregion

    #region Startup override

    protected override void StartUp(Interop.SysContext.IMTSystemContext systemContext,
                                    Interop.MTPipelineLib.IMTConfigPropSet propSet)
    {
      FilePaths fp;

      try
      {
        // EZTax Plugin starting...
        Log(LogLevel.Debug, "Starting the plugin GetEZTaxPCode ... Inside Configure method.");

        // Get all file paths for EZTax Data files
        fp = GetFilePaths();

        if (!File.Exists(fp.DLL)) // Test for the EZTax.dll binary.
        {
            Log(LogLevel.Error,
                "BillSoft installation not found as defined by the DLL Path (" + fp.DLL + "), Is the correct paths set in the configuration file? Plugin will not function until this is resolved.");
            return;
        }
      }
      catch (Exception e)
      {
        Log(LogLevel.Error, string.Format("Unexpected error ..: {0}", e));
        throw new ApplicationException("Startup() method failed to initialize the plugin.");
      }

      try
      {
        //Load HashTable with list of billsoft errors codes and their error messages
        htEZTaxErrors.Add(-11, string.Format("JCode is not found. "));
        htEZTaxErrors.Add(-12, string.Format("PCode is not found. "));
        htEZTaxErrors.Add(-13, string.Format("ZIP Code is not found. "));
        htEZTaxErrors.Add(-14, string.Format("NPANXX is not found. "));
        htEZTaxErrors.Add(-15, string.Format("Address is not found. "));
        htEZTaxErrors.Add(-16, string.Format("County or State or Zip is not found. "));
        htEZTaxErrors.Add(-17, string.Format("Session is not initialized. "));
        htEZTaxErrors.Add(-18, string.Format("JCode database is not opened. "));
        htEZTaxErrors.Add(-19, string.Format("PCode database is not opened."));
        htEZTaxErrors.Add(-20, string.Format("ZipCode database is not opened. "));
        htEZTaxErrors.Add(-21, string.Format("NPANXX database is not opened. "));
        htEZTaxErrors.Add(-22, string.Format("Address database is not opened. "));
        htEZTaxErrors.Add(-23, string.Format("Jurisdiction database is not opened. "));
        htEZTaxErrors.Add(-24, string.Format("FIPS not found !"));
        htEZTaxErrors.Add(-25, string.Format("FIPS not opened."));
        htEZTaxErrors.Add(-26, string.Format("PCODE FIPS is not open!"));

        // Initialize the EZTax Objects...
        Log(LogLevel.Debug, string.Format("Loading the EZTax DLL Version {0} Database version {1}", EZTax.DllVersion, EZTax.GetDatabaseVersion(fp.Data)));

        try
        {
            m_objEZTax = new EZTaxSession(true, GetFilePaths());
        }
        catch
        {
            Log(LogLevel.Error,
                            "Failure creating BillSoft session. Allowing plugin start, but it will not work until you fix the billsoft libraries. Please see BillSoft status file in the BillSoft installation directory for more details.");
            mUnstable = true;
            return;                  
        }
        Log(LogLevel.Debug, "Initializing the EZTax object...");
      }
      catch (Exception e)
      {
        Log(LogLevel.Error,
            string.Format("Unexpected error ..: {0}", e));
        throw new COMException("GetEZTaxPCode's Configure() method failed to initialize the plugin.");
      }
    }

    private FilePaths GetFilePaths()
    {
      var baseDirectory = GeneralConfig.EZTaxInstallPath;
      if (baseDirectory[baseDirectory.Length - 1] != '\\')
        baseDirectory += @"\";

      // Create a FilePaths object
      var paths = new FilePaths
                          {
                            Data = baseDirectory + "EZTax.dat",
                            IDX = baseDirectory + "EZTax.idx",
                            DLL = baseDirectory + "EZTax.dll",
                            Log = "EZTax.log",
                            NpaNxx = baseDirectory + "EZTax.npa",
                            Status = "EZTax.sta",
                            Temp = "tmp77777.dat",
                            Location = baseDirectory + "EZDesc.dat",
                            Zip = baseDirectory + "EZZip.dat",
                            CustomerKey = "cust_key",
                            PCode = baseDirectory + "EZTax.pcd",
                            JCode = baseDirectory + "EZTax.jtp",
                            Override = ""
                          };

      return paths;
    }
    #endregion

    #region Shutdown override

    public override void Shutdown()
    {
      try
      {
        if (m_objEZTax != null)
        {
          m_objEZTax.Dispose();
          m_objEZTax = null;
        }
        Log(LogLevel.Debug, "Exiting the EZTax system...");
      }
      catch (Exception e)
      {
        Log(LogLevel.Error,
            string.Format("Unexpected error ..: {0}", e));
        throw new COMException("GetEZTaxPCode's Shutdown() method failed to close the objects");
      }
    }

    #endregion

    /// <summary>
    /// This method is called for each session in the session set.
    /// </summary>
    protected override void ProcessSession(Properties props)
    {
      Log(LogLevel.Debug, "Start");

      try
      {
        if (GeneralConfig.ResolveByZip.GetValueOrDefault())
        {
          var za = new ZipAddress();

          try
          {
            /* Fill the structure with values */
            za.CountryISO = props.Pipeline.CountryCode;
            za.County = "";

            // BillSoft supports only state, Locality and zipcodes for US and Canada addresses only.
            if (!String.IsNullOrEmpty(za.CountryISO) &&
                (za.CountryISO.ToUpper().Equals("USA") || za.CountryISO.ToUpper().Equals("CAN")))
            {
              za.Locality = GetStringInLength(props.Pipeline.City, 25);
              za.State = GetStringInLength(props.Pipeline.StateAbbr, 2);

              string strZip5;
              string strZip4;
              ParseZipCode(props.Pipeline.ZipCode, out strZip5, out strZip4);
              za.ZipCode = strZip5;
              za.ZipP4 = strZip4;
            }
            else
            {
              Log(LogLevel.Warning, "Unsupported Country code provided, only support 'USA' and 'CAN' at this time. Country code must be provided.");
              za.Locality = "";
              za.State = "";
              za.ZipCode = "";
              za.ZipP4 = "";
            }

            var nPCode = GetMostAppropriatePCode(za);

            if (nPCode < 0) /* PCode cannot be resolved */
            {
              throw new ApplicationException(String.Format("EZTaxZtoPCode: {1} (Error Code {0})", nPCode,
                                                           htEZTaxErrors[nPCode]));
            }
            if (nPCode == 0)
            {
              Log(LogLevel.Warning, "Setting PCode to zero, not enough valid information for pcode lookup.");              
            }
            Log(LogLevel.Debug, String.Format("Setting PCode = {0} in the session.", nPCode));
            props.Pipeline.TaxPCodeValue = nPCode;
            Log(LogLevel.Debug, "Stop");
            return;
          }
          catch (Exception e)
          {
            throw new ApplicationException(string.Format("Unexpected error. Error is ..: {0}, {1}", e.Source,
                                                         e.Message));
          }
        } /* if ResolveByZip */

        if (GeneralConfig.ResolveByNPANXX.GetValueOrDefault())
        {
          try
          {
            if (String.IsNullOrEmpty(props.Pipeline.NPANXXNumber))
              throw new ApplicationException("Incoming NPANXXNumber is null or empty, can not resolve NPANXX to PCode");

            UInt32 jcode;
            try
            {
              jcode = uint.Parse(props.Pipeline.NPANXXNumber);
              if (jcode == 0)
                throw new ApplicationException("NPANXXNumber value is zero, can not lookup pcode");
            }
            catch
            {
              throw new ApplicationException(String.Format("Unable to parse NPANXXNumber into a unsigned integer.",
                                                           props.Pipeline.NPANXXNumber));
            }

            uint nJCodeNPA = m_objEZTax.NpaNxxToJCode(jcode);
            if (nJCodeNPA < 0) /* JCode cannot be resolved */
            {
              throw new ApplicationException(String.Format("NpaNxxToJCode: {1} (Error Code {0})", nJCodeNPA,
                                                           htEZTaxErrors[nJCodeNPA]));
            }
            uint nPCodeNPA = m_objEZTax.JCodeToPCode(nJCodeNPA);
            if (nPCodeNPA < 0) /* PCode cannot be resolved */
            {
              throw new ApplicationException(String.Format("JCodeToPCode: {1} (Error Code {0})", nPCodeNPA,
                                                           htEZTaxErrors[nPCodeNPA]));
            }
            props.Pipeline.TaxPCodeValue = nPCodeNPA;
          }
          catch (Exception e)
          {
            var msg = string.Format(
              "Unexpected error occurred. PCode will not be set. Error ...: ({0}) {1}", e.Source,
              e.Message);
            Log(LogLevel.Error, msg);
            throw new ApplicationException(msg);
          }
        } /* ResolveByNPANXX */
      }
      catch (Exception ex)
      {
        Log(LogLevel.Error, ex.Message);
        throw;
      }
      Log(LogLevel.Debug, "Stop");
    }

    private static string GetStringInLength(string p_strItem, int p_nLength)
    {
      if (p_strItem == null)
        return string.Empty;

      if (p_strItem.Trim().Length == 0)
        return string.Empty;

      p_strItem = p_strItem.Trim();

      if (p_strItem.Length > p_nLength)
        return p_strItem.Substring(0, p_nLength);

      return p_strItem;
    }

    /* Given the unformatted ZipCode, returns two valid zipcodes with best possible guess.
         * Note that this function will not validate the zip code. It merely parses the zip code and 
         * splits it into the way EZTax requires. EZTax will raise an error if the zip code is not valid. */

    private static void ParseZipCode(string p_strZipCode, out string p_strZipFive, out string p_strZipFour)
    {
      if (p_strZipCode == null || p_strZipCode.Trim().Length == 0)
      {
        p_strZipFive = "";
        p_strZipFour = "";
        return;
      }

      string strTemp = p_strZipCode.Trim();

      int nIndex = strTemp.IndexOf("-");

      if (nIndex == -1)
      {
        // Could it be Canadian ZipCode?
        nIndex = strTemp.IndexOf(" ");

        if (nIndex == -1)
        {
          p_strZipFive = strTemp;
          p_strZipFour = "";
          return;
        }
        // Bill Soft needs first three characters in zip and the next three characters in zip4 field.
        p_strZipFive = strTemp.Substring(0, nIndex);
        p_strZipFour = strTemp.Substring(nIndex + 1);
        return;
      }

      /* Normal US style zip code */
      p_strZipFive = strTemp.Substring(0, nIndex).Trim();
      p_strZipFour = strTemp.Substring(nIndex + 1).Trim();
      return;
    }

    private int GetMostAppropriatePCode(ZipAddress addr)
    {
      int nError = 0;

      // make the addr structure upper case
      // BillSoft API is case sensitive!!!
      addr.CountryISO = addr.CountryISO.ToUpper();
      addr.County = addr.County.ToUpper();
      addr.Locality = addr.Locality.ToUpper();
      addr.State = addr.State.ToUpper();
      addr.ZipCode = addr.ZipCode.ToUpper();
      addr.ZipP4 = addr.ZipP4.ToUpper();

      // make atmost five attempts to get an appropriate pcode.
      for (int i = 0; i < 5; ++i)
      {
        Log(LogLevel.Debug,
            string.Format(
              "Attempt# {6}: Address information used to resolve PCode is Country = {0}, State = {1}, County = {2}, Locality = {3}, ZipCode5 = {4}, ZipCode4 = {5}",
              addr.CountryISO, addr.State, addr.County, addr.Locality, addr.ZipCode, addr.ZipP4, i));
        try
        {
          var nPCode = (int) m_objEZTax.ZipToPCode(addr);
          Log(LogLevel.Debug,
              string.Format("PCode resolved to {0}", nPCode));
          return nPCode;
        }
        catch (EZTaxException ex)
        {
          // Swallow eztax exceptions but log an error. We try up to 5 times.
          Log(LogLevel.Debug,
              string.Format("PCode resolution failed with message {0}. May try again.", ex.Message));
        }

        switch (i)
        {
          case 0:
            addr.ZipP4 = "";
            break;

          case 1:
            addr.ZipP4 = "";
            addr.Locality = "";
            break;

          case 2:
            addr.ZipP4 = "";
            addr.Locality = "";
            addr.ZipCode = "";
            break;

          case 3:
            addr.ZipP4 = "";
            addr.Locality = "";
            addr.ZipCode = "";
            addr.State = "";
            break;

          default:
            Log(LogLevel.Error,
                string.Format(
                  "EZTax API failed to get a PCode with the given address information. Error Message = {0}, Error Code = {1}",
                  htEZTaxErrors[nError], nError));
            return nError;
        }

        Log(LogLevel.Debug,
            string.Format(
              "EZTax API failed to get a PCode. Error Message = {0}, Error Code ({1}). Trying another attempt...",
              htEZTaxErrors[nError], nError));
      } /* for loop */

      return -1;
      // This code cannot be reached. Just to get the compiler believe that all paths of this code returns some value;
    }

    /* The following IDs are used when using zip_Address interface */
    private Hashtable htEZTaxErrors = new Hashtable(20);
    private EZTaxSession m_objEZTax;
  }
} 
