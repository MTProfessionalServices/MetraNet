<#@ template language="C#" hostspecific="True" debug="True"#>
<#@ import namespace="MetraTech.BusinessEntity.DataAccess.Metadata" #>
<#@ import namespace="System.Diagnostics" #>

<# Init(); #>
// Generated on <#= DateTime.Now.ToString() #> from entityClass.tt

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using MetraTech.Basic;
using MetraTech.BusinessEntity.Core.Model;
using MetraTech.BusinessEntity.Core;
using MetraTech.BusinessEntity.DataAccess.Metadata;

namespace <#=Name.GetInterfaceNamespace(entity.FullName)#>
{
  public interface <#=Name.GetInterfaceName(entity.FullName)#>
  {
    #region System Properties
<#
foreach (Property property in entity.PreDefinedProperties)
{
#>
    <#=property.TypeName#> <#=property.Name#> {get; set;}
<#
}
#>
    #endregion
    
    #region Basic Properties
    
    <#=Name.GetEntityBusinessKeyInterfaceName(entity.FullName)#> BusinessKey { get; set; }
<#
foreach (Property property in entity.Properties)
{
  if (property.IsBusinessKey)
  {
    continue;
  }
  
  if (!property.IsRequired && property.IsValueType)
  {
#>
    System.Nullable<<#=property.TypeName#>> <#=property.Name#> {get; set;}
<#
  }
  else
  {
#>
    <#=property.TypeName#> <#=property.Name#> {get; set;}
<#
  }
#>
<#
}
#>
    #endregion 
	
    #region Navigation Properties
<#
if (entity is RelationshipEntity)
{
#>
    <#=((RelationshipEntity)entity).GetSourceEntityInterfaceName()#> <#=((RelationshipEntity)entity).GetSourceEntityClassName()#> {get; set;}

    <#=((RelationshipEntity)entity).GetTargetEntityInterfaceName()#> <#=((RelationshipEntity)entity).GetTargetEntityClassName()#> {get; set;}
    
    void SetRelationshipItem(object item);
<#
}
#>
<#
foreach (Relationship relationship in entity.Relationships)
{
  if (relationship.End2.Multiplicity == Multiplicity.Many)
  {
#>
    IList<<#=relationship.End2.EntityInterfaceName#>> <#=relationship.End1.PropertyName#> {get; set;}
    DataObject Add<#=Name.GetEntityClassName(relationship.End2.EntityTypeName)#>(<#=relationship.End2.EntityInterfaceName#> item);
<#
  }
  else if (relationship.End2.Multiplicity == Multiplicity.One)
  {
#>
    <#=relationship.End2.EntityInterfaceName#> <#=relationship.End1.PropertyName#> {get; set;}
<#
  }
#> 
    IList<<#=relationship.RelationshipEntity.GetInterfaceFullName()#>> <#=relationship.RelationshipEntity.PluralName#> {get; set;}
<#
}
#>
    #endregion
  }
  
  public interface <#=Name.GetEntityBusinessKeyInterfaceName(entity.FullName)#>
  {
<#
if (entity is RelationshipEntity)
{
#>
    System.Guid BusinessKey {get; set;}
<#
}
else
{
  foreach (Property property in entity.Properties)
  {
    if (property.IsBusinessKey)
    {
#>
    <#=property.TypeName#> <#=property.Name#> {get; set;}
<#
    }
  }
}
#>
    
  }
}

<#+

    private Entity entity;
    
    private void Init()
    {
		TemplateHost templateHost = (TemplateHost)Host;
		entity = templateHost.Entity;
    }
#>