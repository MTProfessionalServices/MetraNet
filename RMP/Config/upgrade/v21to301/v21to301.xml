<queryfile>
	<mtconfigdata>
	
	<filename>v21to30.xml</filename>	

	<query>
		<query_tag>__CREATE_FUNCTION_MTMAXDATE__</query_tag>
	<query_string>
        create function dbo.MTMaxDate() returns datetime
        as
        begin
        return '2038'
        end
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_FUNCTION_MTMINDATE__</query_tag>
	<query_string>
				create function dbo.MTMinDate() returns datetime
				as
				begin
				return '1753'
				end
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_FUNCTION_MTSTARTOFDAY__</query_tag>
	<query_string>
				create FUNCTION dbo.mtstartofday (@indate datetime) 
				returns datetime
				as
				begin
					declare @retval as datetime
					select @retval =  DATEADD(hh,-DATEPART(hh,@indate),
					Dateadd(mi,-DATEPART(mi,@indate),
					DATEADD(s,-DATEPART (s,@indate),@indate)))
					return @retval
				end
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ROLE__</query_tag>
	<query_string>
				CREATE TABLE t_role (id_role int NOT NULL identity(1, 1),
				tx_guid varbinary(16), 
				tx_name VARCHAR(255) NOT NULL, 
				tx_desc VARCHAR(255) NOT NULL,  
				csr_assignable VARCHAR(1) NULL,
				subscriber_assignable VARCHAR(1) NULL,
				CONSTRAINT PK_t_role PRIMARY KEY (id_role))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_PRINCIPAL_POLICY__</query_tag>
	<query_string>
				CREATE TABLE t_principal_policy (id_policy int NOT NULL identity(1, 1),
				id_acc int NULL,
				id_role int NULL,
				policy_type VARCHAR(1),
				tx_name VARCHAR(255), 
				tx_desc VARCHAR(255),  
				CONSTRAINT pk_t_principal_policy PRIMARY KEY (id_policy),
				CONSTRAINT fk_t_pr_policy_t_account FOREIGN KEY (id_acc) REFERENCES t_account(id_acc),
				CONSTRAINT fk_t_pr_policy_t_role FOREIGN KEY (id_role) REFERENCES t_role(id_role),
				CONSTRAINT c_principal_policy CHECK(id_acc IS NULL OR id_role IS NULL))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_CAPABILITY_INSTANCE__</query_tag>
	<query_string>
				CREATE TABLE t_capability_instance (id_cap_instance int NOT NULL identity(1, 1), 
				tx_guid varbinary(16),
				id_parent_cap_instance int NULL,
				id_policy int NOT NULL,
				id_cap_type int NOT NULL,
				CONSTRAINT pk_t_capability_instance PRIMARY KEY(id_cap_instance),
				CONSTRAINT fk_cap_ins_cap_ins FOREIGN KEY (id_parent_cap_instance) REFERENCES t_capability_instance(id_cap_instance),
				CONSTRAINT fk_cap_instance_policy FOREIGN KEY (id_policy) REFERENCES t_principal_policy(id_policy) )			
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ACCESS_TYPE_CAPABILITY__</query_tag>
	<query_string>	
				CREATE TABLE t_access_type_capability (
				id_cap_instance int NOT NULL,
				tx_param_name VARCHAR(2000) NULL,
				tx_op VARCHAR(1) NULL,
				param_value NVARCHAR(2000),
				CONSTRAINT fk_access_type_ins FOREIGN KEY (id_cap_instance) REFERENCES t_capability_instance(id_cap_instance))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_ACCOUNT__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_ACCOUNT'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_account drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_UPDATE_T_ACCOUNT_1__</query_tag>
	<query_string>
				ALTER TABLE T_ACCOUNT ADD id_acc_ext  varbinary(16) NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_UPDATE_T_ACCOUNT_2__</query_tag>
	<query_string>
				update t_account set id_acc_ext = newid()
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_UPDATE_T_ACCOUNT_3__</query_tag>
	<query_string>
				alter table t_account alter column id_acc_ext varbinary(16) not null
				ALTER TABLE T_ACCOUNT ADD DT_CRT  datetime
				ALTER TABLE T_ACCOUNT ADD ACC_TYPE  VARCHAR(3) NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_UPDATE_T_ACCOUNT_4__</query_tag>
	<query_string>
				update t_account set acc_type='IND'
				update t_account set dt_crt=dt_start
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_UPDATE_T_ACCOUNT_5__</query_tag>
	<query_string>
				ALTER TABLE T_ACCOUNT ALTER COLUMN ACC_TYPE VARCHAR(3) NOT NULL
				ALTER TABLE T_ACCOUNT drop Column ID_STATUS
				ALTER TABLE T_ACCOUNT drop Column DT_END
				ALTER TABLE T_ACCOUNT ADD CONSTRAINT T_ACCOUNT_CHECK CHECK (upper(acc_type) = 'CSR' OR upper(acc_type) = 'SUB' 
				OR upper(acc_type) = 'MOM' OR upper(acc_type) = 'MCM' OR upper(acc_type) = 'SYS' OR upper(acc_type) = 'IND')
  </query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__CREATE_TABLE_T_ACCOUNT_ANCESTOR__</query_tag>
	<query_string>
				create table t_account_ancestor(id_ancestor int not null,
				id_descendent int not null,
				num_generations int not null,
				b_children char(1) default 'N',
				vt_start datetime null,
				vt_end datetime null,
				tx_path varchar(4000) not null,
				CONSTRAINT b_children_check1 CHECK (b_children = 'Y' OR b_children = 'N'),
				CONSTRAINT num_generations_check1 CHECK (num_generations >= 0)
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_ANCESTOR_INDEX__</query_tag>
	<query_string>
				create index t_account_mapper_idx1 on t_account_mapper(id_acc)
        create clustered index ancestor_idx1 on t_account_ancestor(id_descendent,num_generations)
				create index t_account_ancestor_idx2 on t_account_ancestor(id_ancestor,num_generations)
				create index t_account_ancestor_idx3 on t_account_ancestor(num_generations)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_ANCESTOR__</query_tag>
	<query_string>
					set identity_insert t_account on
					insert into t_account(id_acc,id_acc_ext,acc_type,dt_crt,dt_start) values(1,newid(),'IND',dbo.mtmindate(),getutcdate())
					set identity_insert t_account off
					insert into t_account_ancestor values (1,1,0,'N',dbo.mtmindate(),dbo.mtmaxdate(),'/')
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ACCOUNT_STATE__</query_tag>
	<query_string>
				create table t_account_state (
				id_acc int not null,
				status char(2) not null,
				vt_start datetime not null,
				vt_end datetime not null,
				CONSTRAINT t_account_state_fk1 FOREIGN KEY (id_acc) references t_account(id_acc)
				,CONSTRAINT t_account_state_check CHECK (status = 'PA' OR status = 'AC' 
				OR status = 'SU' or status = 'PF' or status = 'CL' or status = 'AR')
				)
				create clustered index t_account_state_idx1 on t_account_state(id_acc)
  	</query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ACCOUNT_STATE_HISTORY__</query_tag>
	<query_string>
				create table t_account_state_history (
				id_acc int not null,
				status char(2) not null,
				vt_start datetime not null,
				vt_end datetime not null,
				tt_start datetime not null,
				tt_end datetime not null,
				CONSTRAINT t_account_statehis_fk1 FOREIGN KEY (id_acc) references t_account(id_acc)
				,CONSTRAINT t_account_statehis_check CHECK (status = 'PA' OR status = 'AC' 
				OR status = 'SU' or status = 'PF' or status = 'CL' or status = 'AR')
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ACC_TEMPLATE__</query_tag>
	<query_string>
				create table t_acc_template (
				id_acc_template int identity (1,1), 
				id_folder int not null PRIMARY KEY,
				dt_crt datetime not null default GetUTCDate(),
				tx_name varchar(256) null,
				tx_desc varchar(256) null,
				b_ApplyDefaultPolicy char(1) not NULL,
				CONSTRAINT constraint_acctemplateUnique UNIQUE (id_acc_template),
				CONSTRAINT t_acc_template_fk1 FOREIGN KEY (id_folder) references t_account(id_acc),
				CONSTRAINT t_acc_template_check1 CHECk (b_ApplyDefaultPolicy = 'Y' OR b_applyDefaultPolicy = 'N')
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ACC_TEMPLATE_PROPS__</query_tag>
	<query_string>
				create table t_acc_template_props (
				id_prop int identity(1,1) PRIMARY KEY,
				id_acc_template int not null,
				nm_prop_class varchar(100) null,
				nm_prop varchar(256) not null,
				nm_value varchar(256) null,
				CONSTRAINT t_acc_template_props_fk1 FOREIGN KEY (id_acc_template) references t_acc_template(id_acc_template)
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ACC_TEMPLATE_SUBS__</query_tag>
	<query_string>
				create table t_acc_template_subs (
				id_po int not null,
				id_acc_template int not null,
				b_group char(1) not null,
				vt_start datetime null,
				vt_end datetime null,
				nm_groupsubname varchar(256) null,
				CONSTRAINT pk_templatesubs PRIMARY KEY CLUSTERED (id_po,id_acc_template),
				CONSTRAINT t_acc_template_subs_fk2 FOREIGN KEY (id_acc_template) references t_acc_template(id_acc_template),
				CONSTRAINT t_acc_template_subs_check1 CHECK (b_group = 'Y' OR b_group = 'N')
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_ACC_USAGE__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_ACC_USAGE'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_acc_usage drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_T_ACC_USAGE__</query_tag>
	<query_string>
				ALTER TABLE T_ACC_USAGE ADD ID_PAYEE int
				CREATE nonclustered INDEX idx_payee_ind ON t_acc_usage (id_payee) 
				ALTER TABLE T_ACC_USAGE alter column ID_PROD int NULL
				ALTER TABLE T_ACC_USAGE alter column DT_CRT datetime NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_ACC_USAGE_1__</query_tag>
	<query_string>
	      <![CDATA[
				DECLARE @str1 Nvarchar(2000)
				DECLARE @tab varchar(100)
				DECLARE @col varchar(100)
				DECLARE @CursorVar CURSOR
				DECLARE @i int
				DECLARE @count int
				set @CursorVar = CURSOR STATIC fOR
				select  O1.name,O.name FROM Sysobjects O JOIN sysforeignkeys F ON O.id =F.constid
				JOIN Sysobjects O1 ON F.fkeyid = O1.id
				JOIN Sysobjects O2 ON F.rkeyid = O2.id
				WHERE  O.type = 'F' and O.status >= 0
				AND O2.Name = 'T_ACC_USAGE'
				ORDER BY O1.Name, O.Name
				set @i = 0
				OPEN @CursorVar
				Set @count = @@cursor_rows
				while (@i < @count)
				begin
				select @i = @i + 1
				FETCH NEXT FROM @CursorVar into @tab,@col
				select @str1 = N'ALTER TABLE ' + @tab + N' DROP' + char(10) + char(9) + N'CONSTRAINT ' + @col
				exec sp_executesql @str1
				end
				CLOSE @CursorVar
				DEALLOCATE @CursorVar
  				]]>
	</query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TEMP_USAGE_TABLE__</query_tag>
	<query_string>
				CREATE TABLE t_acc_usage_temp (
					[id_sess] [int] NOT NULL ,
					[tx_UID] [varbinary] (16) NOT NULL ,
					[id_acc] [int] NOT NULL ,
					[id_view] [int] NOT NULL ,
					[id_usage_interval] [int] NOT NULL ,
					[id_parent_sess] [int] NULL ,
					[id_prod] [int] NULL ,
					[id_svc] [int] NOT NULL ,
					[dt_session] [datetime] NOT NULL ,
					[amount] [numeric](18, 6) NOT NULL ,
					[am_currency] [varchar] (3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL ,
					[dt_crt] [datetime] NULL ,
					[tx_batch] [varbinary] (16) NULL ,
					[tax_federal] [numeric](18, 6) NULL ,
					[tax_state] [numeric](18, 6) NULL ,
					[tax_county] [numeric](18, 6) NULL ,
					[tax_local] [numeric](18, 6) NULL ,
					[tax_other] [numeric](18, 6) NULL ,
					[id_pi_instance] [int] NULL ,
					[id_pi_template] [int] NULL ,
					[ID_PAYEE] [int] NULL 
					) ON [PRIMARY]
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_USAGE_TABLE_1__</query_tag>
	<query_string>
				insert into t_acc_usage_temp select * from t_acc_usage
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_USAGE_TABLE_2__</query_tag>
	<query_string>
				drop table t_acc_usage
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_USAGE_TABLE_3__</query_tag>
	<query_string>
				exec sp_rename 't_acc_usage_temp','t_acc_usage'
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_USAGE_TABLE_4__</query_tag>
	<query_string>
				alter table t_acc_usage add constraint pk_t_acc_usage primary key(id_sess)
				CREATE  INDEX idx_acc_ui_view_ind ON t_acc_usage(id_acc, id_usage_interval, id_view) 
				CREATE  INDEX idx_payee_ind ON t_acc_usage(id_payee)
				CREATE  INDEX fk3idx_t_acc_usage ON t_acc_usage(id_prod) 
  </query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__CREATE_TABLE_T_ATOMIC_CAPABILITY_TYPE__</query_tag>
	<query_string>
				CREATE TABLE t_atomic_capability_type (id_cap_type int NOT NULL identity(1, 1),
				tx_guid varbinary(16) not null, 
				tx_name VARCHAR(255) NOT NULL,
				tx_desc VARCHAR(255) NOT NULL,
				tx_progid VARCHAR(255) NOT NULL,
				tx_editor VARCHAR(255) NULL,
				CONSTRAINT pk_atomic_capability_type PRIMARY KEY (id_cap_type))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_CONTACT__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='PK'
				and b.xtype='U'
				and b.name='T_AV_CONTACT'
				and a.id=c.constid
				and b.id=c.id

				select @stmt = N'alter table T_AV_CONTACT drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_AUDIT__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_AUDIT'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_audit drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_AUDIT_1__</query_tag>
	<query_string>
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
				@name = ctu.CONSTRAINT_NAME 
				from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
				on ctu.constraint_catalog = rc.constraint_catalog
				and ctu.constraint_schema = rc.constraint_schema
				and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
				on tc.constraint_catalog = rc.unique_constraint_catalog
				and tc.constraint_schema = rc.unique_constraint_schema
				and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
				on ctu.constraint_catalog = ccu.constraint_catalog
				and ctu.constraint_schema = ccu.constraint_schema
				and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_AUDIT_EVENTS'
				and ctu.table_name='T_AUDIT'
				select @stmt = N'alter table t_audit drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_AUDIT_EVENTS__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='UQ'
				and b.xtype='U'
				and b.name='T_AUDIT_EVENTS'
				and a.id=c.constid
				and b.id=c.id
				select @stmt = N'alter table T_AUDIT_EVENTS drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ADD_CONSTRAINT_T_AUDIT__</query_tag>
	<query_string>
				alter table t_audit_events add constraint pk_audit_events primary key (id_event)
				alter table t_audit add constraint fk5_t_audit foreign key (id_event) references t_audit_events (id_event)
  </query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__ALTER_T_AV_CONTACT_1__</query_tag>
	<query_string>
				ALTER TABLE T_AV_CONTACT ALTER COLUMN C_COMPANY VARCHAR(255)
				ALTER TABLE T_AV_CONTACT ADD C_CONTACTTYPE int NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_T_AV_CONTACT_2__</query_tag>
	<query_string>
				update t_av_contact set c_contacttype=c_accounttype
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_T_AV_INTERNAL_1__</query_tag>
	<query_string>
				alter table t_av_contact alter column c_contacttype int not null
				ALTER TABLE T_AV_CONTACT drop Column C_ACCOUNTTYPE 
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_T_AV_INTERNAL_2__</query_tag>
	<query_string>
				ALTER TABLE T_AV_CONTACT ADD CONSTRAINT PK_T_AV_CONTACT PRIMARY KEY (ID_ACC, C_CONTACTTYPE) 
				ALTER TABLE T_AV_INTERNAL ADD C_BILLABLE  CHAR(1)
				ALTER TABLE T_AV_INTERNAL ADD C_FOLDER  CHAR(1)
				ALTER TABLE T_AV_INTERNAL drop Column C_TARIFFID
				ALTER TABLE T_AV_INTERNAL drop Column C_GEOCODE
				ALTER TABLE T_AV_INTERNAL drop Column C_ACCOUNTSTATUS
				ALTER TABLE T_AV_INTERNAL drop Column C_SECITEM
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_BATCH_STATUS__</query_tag>
	<query_string>
				CREATE TABLE t_batch_status (
				tx_batch varbinary (16) NOT NULL,
				n_completed int NOT NULL,
				CONSTRAINT PK_t_batch_status PRIMARY KEY CLUSTERED (tx_batch))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_COMPOSITE_CAPABILITY_TYPE__</query_tag>
	<query_string>
				CREATE TABLE t_composite_capability_type (id_cap_type int NOT NULL identity(1, 1), 
				tx_guid varbinary(16) not null,
				tx_name VARCHAR(255) NOT NULL,
				tx_desc VARCHAR(255) NOT NULL,
				tx_progid VARCHAR(255) NOT NULL,
				tx_editor VARCHAR(255) NULL,
				csr_assignable VARCHAR(1) NOT NULL,
				subscriber_assignable VARCHAR(1) NOT NULL,
				multiple_instances VARCHAR(1) NOT NULL,
				umbrella_sensitive  VARCHAR(1) NOT NULL,
				CONSTRAINT pk_composite_capability_type PRIMARY KEY (id_cap_type))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_COMPOSITOR__</query_tag>
	<query_string>
				CREATE TABLE t_compositor (
				id_atomic int NOT NULL,
				id_composite int NOT NULL,
				tx_description VARCHAR(255) NOT NULL,
				tx_param VARCHAR(255), 
				CONSTRAINT PK_t_compositor PRIMARY KEY (id_atomic, id_composite), 
				CONSTRAINT fk_compositor_act FOREIGN KEY (id_atomic) REFERENCES t_atomic_capability_type(id_cap_type), 
				CONSTRAINT fk_compositor_cct FOREIGN KEY (id_composite) REFERENCES t_composite_capability_type(id_cap_type))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_COUNTER__</query_tag>
	<query_string>
				ALTER TABLE T_COUNTER_METADATA ADD B_VALID_FOR_DIST CHAR(1)
				ALTER TABLE T_COUNTER_PARAMS alter column VALUE varchar(255) NULL
				alter table t_calendar_holiday alter column nm_name nvarchar(255) not null
				alter table t_profile alter column tx_desc varchar(255) null
			  alter table t_localized_site alter column tx_lang_code varchar(10) not null
	</query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__CREATE_TABLE_T_DECIMAL_CAPABILITY__</query_tag>
	<query_string>
				CREATE TABLE t_decimal_capability (
				id_cap_instance int NOT NULL,
				tx_param_name VARCHAR(2000) NULL,
				tx_op VARCHAR(2) NOT NULL,
				param_value int,
				CONSTRAINT fk_decimal_ins FOREIGN KEY (id_cap_instance) REFERENCES t_capability_instance(id_cap_instance))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_T_DISCOUNT__</query_tag>
	<query_string>
				ALTER TABLE T_DISCOUNT ADD ID_DISTRIBUTION_CPD int
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_ENUM_CAPABILITY__</query_tag>
	<query_string>
				CREATE TABLE t_enum_capability (
				id_cap_instance int NOT NULL,
				tx_param_name VARCHAR(2000) NULL,
				tx_op VARCHAR(1) NOT NULL,
				param_value int,
				CONSTRAINT fk_enum_ins FOREIGN KEY (id_cap_instance) REFERENCES t_capability_instance(id_cap_instance))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_ENUM_DATA__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='PK'
				and b.xtype='U'
				and b.name='T_ENUM_DATA'
				and a.id=c.constid
				and b.id=c.id

				select @stmt = N'alter table T_ENUM_DATA drop constraint ' + @name
				exec sp_executesql @stmt

	 </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_CONSTRAINT_ENUM_DATA__</query_tag>
	<query_string>
				ALTER TABLE T_ENUM_DATA ADD CONSTRAINT PK_t_enum_data PRIMARY KEY CLUSTERED (id_enum_data)
				ALTER TABLE T_ENUM_DATA ADD CONSTRAINT C_nm_enum_data UNIQUE (nm_enum_data)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_GROUP_SUB__</query_tag>
	<query_string>
				create table t_group_sub (
				id_group int identity(1,1) PRIMARY KEY,
				id_group_ext varbinary(16) not null,
				tx_name varchar(255) not null,
				tx_desc varchar(255) null,
				b_visable char(1) not null,
				b_supportgroupops char(1) not null,
				id_usage_cycle int not null,
				b_proportional char(1) not null,
				id_corporate_account int not null,
				id_discountAccount int null,
				CONSTRAINT t_group_sub_check1 CHECK (b_visable = 'Y' OR b_visable = 'N'),
				CONSTRAINT t_group_sub_fk1 FOREIGN KEY (id_usage_cycle) references t_usage_cycle(id_usage_cycle),
				CONSTRAINT t_group_sub_fk2 FOREIGN KEY (id_discountAccount) references t_account(id_acc),
				CONSTRAINT t_group_sub_check2 CHECK (b_proportional = 'Y' or b_proportional = 'N'),
				CONSTRAINT t_group_sub_fk3 FOREIGN KEY (id_corporate_account) references t_account(id_acc),
				CONSTRAINT t_group_sub_check3 CHECK (b_supportgroupops = 'Y' or b_supportgroupops = 'N'),
				CONSTRAINT t_group_sub_check4 UNIQUE (tx_name,id_corporate_account)
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_GSUBMEMBER__</query_tag>
	<query_string>
				create table t_gsubmember (
				id_group int not null,
				id_acc int not null,
				vt_start datetime not null,
				vt_end datetime not null,
				CONSTRAINT t_gsubmember_fk1 FOREIGN KEY (id_group) references t_group_sub(id_group),
				CONSTRAINT t_gsubmember_fk2 FOREIGN KEY (id_acc) references t_account(id_acc)
				)
				create clustered index t_gsubmember_idx1 on t_gsubmember(id_acc)
				create index t_gsubmember_idx2 on t_gsubmember(id_group)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_GSUBMEMBER_HISTORICAL__</query_tag>
	<query_string>
				create table t_gsubmember_historical (
				id_group int not null,
				id_acc int not null,
				vt_start datetime not null,
				vt_end datetime not null,
				tt_start datetime not null,
				tt_end datetime not null,
				CONSTRAINT t_gsubmemberhis_fk1 FOREIGN KEY (id_group) references t_group_sub(id_group),
				CONSTRAINT t_gsubmemberhis_fk2 FOREIGN KEY (id_acc) references t_account(id_acc)
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_IMPERSONATE__</query_tag>
	<query_string>
	      <![CDATA[
				create table t_impersonate (	
				id_owner int not null,
				id_acc int not null,
				CONSTRAINT impersonate_owner_fk1 FOREIGN KEY (id_owner) references t_account(id_acc),
				CONSTRAINT impersonate_acc_fk2 FOREIGN KEY (id_acc) references t_account(id_acc),
				CONSTRAINT impersonate_check1 CHECK (id_owner <> id_acc)
				)
				create index t_impersonate_idx1 on t_impersonate(id_owner)
				create index t_impersonate_idx2 on t_impersonate(id_acc)
				]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_PATH_CAPABILITY__</query_tag>
	<query_string>
				CREATE TABLE t_path_capability (
				id_cap_instance int NOT NULL,
				tx_param_name VARCHAR(2000) NULL,
				tx_op VARCHAR(1) NULL,
				param_value NVARCHAR(2000),
				CONSTRAINT fk_path_ins FOREIGN KEY (id_cap_instance) REFERENCES t_capability_instance(id_cap_instance))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_PAYMENT_REDIRECTION__</query_tag>
	<query_string>
				create table t_payment_redirection (
				id_payer int not null,
				id_payee int not null,
				vt_start datetime not null,
				vt_end datetime not null,
				CONSTRAINT payment_redir_fk1 FOREIGN KEY (id_payer) references t_account(id_acc),
				CONSTRAINT payment_redir_fk2 FOREIGN KEY (id_payee) references t_account(id_acc)
				)
				create clustered index t_payment_redirection_idx1 on t_payment_redirection(id_payee,id_payer)
				create index t_payment_redirection_idx2 on t_payment_redirection(id_payer)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_PAYMENT_REDIR_HISTORY__</query_tag>
	<query_string>
				create table t_payment_redir_history (
				id_payer int not null,
				id_payee int not null,
				vt_start datetime not null,
				vt_end datetime not null,
				tt_start datetime not null,
				tt_end datetime not null,
				CONSTRAINT payment_redirhis_fk1 FOREIGN KEY (id_payer) references t_account(id_acc),
				CONSTRAINT payment_redirhis_fk2 FOREIGN KEY (id_payee) references t_account(id_acc)
				)
  </query_string>
   <num_params>0</num_params>
	</query>

<!--

	<query>
		<query_tag>__DROP_CONSTRAINT_T_PC_INTERVAL_1__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='PK'
				and b.xtype='U'
				and b.name='T_PC_INTERVAL'
				and a.id=c.constid
				and b.id=c.id
				select @stmt = N'alter table T_PC_INTERVAL drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_PC_INTERVAL_2__</query_tag>
	<query_string>
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
				@name = ctu.CONSTRAINT_NAME 
				from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
				on ctu.constraint_catalog = rc.constraint_catalog
				and ctu.constraint_schema = rc.constraint_schema
				and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
				on tc.constraint_catalog = rc.unique_constraint_catalog
				and tc.constraint_schema = rc.unique_constraint_schema
				and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
				on ctu.constraint_catalog = ccu.constraint_catalog
				and ctu.constraint_schema = ccu.constraint_schema
				and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_USAGE_CYCLE'
				and ctu.table_name='T_PC_INTERVAL'
				select @stmt = N'alter table t_pc_interval drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TEMP_TABLE__</query_tag>
	<query_string>
        CREATE TABLE t_pc_interval_temp (id_interval int NOT NULL,
			  id_cycle int NOT NULL,
			  dt_start datetime NOT NULL,
			  dt_end datetime NOT NULL, 
			  CONSTRAINT PK_t_pc_interval 
			  PRIMARY KEY CLUSTERED (id_interval),
			  CONSTRAINT FK_t_pc_interval_cycle FOREIGN KEY (id_cycle)
        REFERENCES t_usage_cycle(id_usage_cycle)) 
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_TEMP_TABLE_1__</query_tag>
	<query_string>
				insert into t_pc_interval_temp select * from t_pc_interval
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_TEMP_TABLE_2__</query_tag>
	<query_string>
				drop table t_pc_interval
				exec sp_rename 't_pc_interval_temp','t_pc_interval'
		    CREATE INDEX cycle_pc_interval_index on t_pc_interval (id_cycle)
		    CREATE INDEX time_pc_interval_index  on t_pc_interval (dt_start, dt_end)
  </query_string>
   <num_params>0</num_params>
	</query>

-->

	<query>
		<query_tag>__DROP_CONSTRAINT_T_PL_MAP__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_PL_MAP'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_pl_map drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_T_PL_MAP__</query_tag>
	<query_string>
				ALTER TABLE T_PL_MAP alter column DT_MODIFIED datetime NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_POLICY_ROLE__</query_tag>
	<query_string>
				CREATE TABLE t_policy_role (id_policy int NOT NULL, 
				id_role int NOT NULL,
				CONSTRAINT pk_t_policy_role PRIMARY KEY(id_policy, id_role), 
				CONSTRAINT fk_policy_role_policy FOREIGN KEY (id_policy) REFERENCES t_principal_policy(id_policy), 
				CONSTRAINT fk_policy_role_role FOREIGN KEY (id_role) REFERENCES t_role(id_role))
  </query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__DROP_CONSTRAINT_PRINCIPALS__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_PRINCIPALS'
				and a.id=c.constid
				and b.id=c.id
				select @stmt = N'alter table t_principals drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_RSCHED__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_RSCHED'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_rsched drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_PRINCIPALS_RSCHED__</query_tag>
	<query_string>
				ALTER TABLE T_PRINCIPALS alter column NM_PK varchar(100) NULL 
				ALTER TABLE T_PRINCIPALS add constraint df_principals DEFAULT 'id_prop' for nm_pk
				ALTER TABLE T_RSCHED ALTER COLUMN DT_MOD DATETIME NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_RECURRING_EVENT_RUN__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_RECURRING_EVENT_RUN'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_recurring_event_run drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_SUB__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_SUB'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_sub drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_SUB_1__</query_tag>
	<query_string>
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
					@name = ctu.CONSTRAINT_NAME 
					from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
						on ctu.constraint_catalog = rc.constraint_catalog
						and ctu.constraint_schema = rc.constraint_schema
						and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
						on tc.constraint_catalog = rc.unique_constraint_catalog
						and tc.constraint_schema = rc.unique_constraint_schema
						and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
						on ctu.constraint_catalog = ccu.constraint_catalog
						and ctu.constraint_schema = ccu.constraint_schema
						and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_EFFECTIVEDATE'
				and ctu.table_name='T_SUB'
				select @stmt = N'alter table t_sub drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_SUB_2__</query_tag>
	<query_string>
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
					@name = ctu.CONSTRAINT_NAME 
					from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
						on ctu.constraint_catalog = rc.constraint_catalog
						and ctu.constraint_schema = rc.constraint_schema
						and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
						on tc.constraint_catalog = rc.unique_constraint_catalog
						and tc.constraint_schema = rc.unique_constraint_schema
						and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
						on ctu.constraint_catalog = ccu.constraint_catalog
						and ctu.constraint_schema = ccu.constraint_schema
						and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_BASE_PROPS'
				and ctu.table_name='T_SUB'

				select @stmt = N'alter table t_sub drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>



	<query>
		<query_tag>__ALTER_TABLE_SUB_1__</query_tag>
	<query_string>
				ALTER TABLE T_SUB ADD ID_SUB_EXT  VARBINARY(16) NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_SUB_2__</query_tag>
	<query_string>
				update t_sub set id_sub_ext = newid()
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_SUB_3__</query_tag>
	<query_string>
				alter table t_sub alter column id_sub_ext varbinary(16) not null
				ALTER TABLE T_SUB alter column ID_ACC INT NULL
				ALTER TABLE T_SUB ADD ID_GROUP int
				ALTER TABLE T_SUB ALTER column DT_CRT DATETIME NULL
				ALTER TABLE T_SUB ADD VT_START datetime NULL
				ALTER TABLE T_SUB ADD VT_END datetime NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_SUB_4__</query_tag>
	<query_string>
				update t_sub set vt_start = (select dt_start from t_effectivedate te 
                     where t_sub.id_eff_date = te.id_eff_date)
				update t_sub set vt_end = dbo.mtmaxdate()
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_TABLE_SUB_5__</query_tag>
	<query_string>
				ALTER TABLE T_SUB ALTER COLUMN VT_START datetime NOT NULL
				ALTER TABLE T_SUB ALTER COLUMN VT_END datetime NOT NULL
				ALTER TABLE T_SUB drop Column ID_EFF_DATE 
				ALTER TABLE T_SUB drop Column B_ACTIVE 
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_SUB_HISTORY__</query_tag>
	<query_string>
				create table t_sub_history (
				id_sub int,
				id_sub_ext varbinary(16) not null,
				id_acc int null,
				id_po int not null,
				dt_crt datetime not null,
				id_group int null,
				vt_start datetime not null,
				vt_end datetime not null,
				tt_start datetime not null,
				tt_end datetime not null,
				constraint t_subhis_PK primary key (ID_SUB,tt_end),
				CONSTRAINT t_subhis_fk1 FOREIGN KEY (id_acc) references t_account(id_acc),
				CONSTRAINT t_subhis_fk2 FOREIGN KEY (id_group) references t_group_sub(id_group)
				)
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TABLE_T_SYS_TRACK_ADAPTER_RUN__</query_tag>
	<query_string>
				CREATE TABLE t_sys_track_adapter_run 
				(adapter_type VARCHAR(50), 
				action_datetime datetime,
				action_desc VARCHAR(200))
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_INTO_NEW_TABLES__</query_tag>
	<query_string>
				<![CDATA[
				insert into t_account_state select id_acc,'AC',dt_start,dbo.mtmaxdate() from t_account where id_acc<>1
				insert into t_account_state_history select id_acc,status,vt_start,vt_end,vt_start,vt_end from t_account_state
				insert into t_payment_redirection select id_acc,id_acc,dbo.mtstartofday(vt_start),
				dbo.mtstartofday(vt_end) from t_account_state
				insert into t_payment_redir_history select id_acc,id_acc,vt_start,vt_end,tt_start,
				tt_end from t_account_state_history
				insert into t_account_ancestor select a.id_acc,a.id_acc,0,'N',vt_start,vt_end,cast(a.id_acc as varchar(2000))
				from t_account_state a 
				insert into t_account_ancestor select 1,a.id_acc,1,'N',vt_start,vt_end,'/' + cast(a.id_acc as varchar(1900))
				from t_account_state a
				insert into t_sub_history(id_sub,id_sub_ext,id_acc,id_po,dt_crt,id_group,vt_start,vt_end,tt_start,tt_end)
				select id_sub,id_sub_ext,id_acc,id_po,dt_crt,id_group,vt_start,vt_end,vt_start,vt_end from t_sub
				]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_COLUMN_DT_START__</query_tag>
	<query_string>
	      ALTER TABLE T_ACCOUNT drop Column DT_START 
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_USAGE_INTERVAL_1__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='PK'
				and b.xtype='U'
				and b.name='T_USAGE_INTERVAL'
				and a.id=c.constid
				and b.id=c.id
				select @stmt = N'alter table T_USAGE_INTERVAL drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_USAGE_INTERVAL_2__</query_tag>
	<query_string>
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
				@name = ctu.CONSTRAINT_NAME 
				from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
				on ctu.constraint_catalog = rc.constraint_catalog
				and ctu.constraint_schema = rc.constraint_schema
				and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
				on tc.constraint_catalog = rc.unique_constraint_catalog
				and tc.constraint_schema = rc.unique_constraint_schema
				and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
				on ctu.constraint_catalog = ccu.constraint_catalog
				and ctu.constraint_schema = ccu.constraint_schema
				and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_USAGE_CYCLE'
				and ctu.table_name='T_USAGE_INTERVAL'
				select @stmt = N'alter table t_usage_interval drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__CREATE_TEMP_INTERVAL_TABLE__</query_tag>
	<query_string>
				 CREATE TABLE t_usage_interval_temp (id_interval int NOT NULL,
				 id_usage_cycle int NOT NULL,
				 dt_start datetime NOT NULL, dt_end datetime NOT NULL, 
				 tx_interval_status char(1) NOT NULL, 
			   CONSTRAINT PK_t_usage_interval 
				 PRIMARY KEY CLUSTERED (id_interval),
				 CONSTRAINT FK_t_usage_interval_cycle FOREIGN KEY (id_usage_cycle) 
				 REFERENCES t_usage_cycle)
				   </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_TEMP_USAGE_TABLE_1__</query_tag>
	<query_string>
				 insert into t_usage_interval_temp select * from t_usage_interval
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_TEMP_USAGE_TABLE_2__</query_tag>
	<query_string>
				 drop table t_usage_interval
				 exec sp_rename 't_usage_interval_temp','t_usage_interval'
				 create index cycle_usage_interval_index on t_usage_interval (id_usage_cycle)
				 create index time_usage_interval_index on t_usage_interval (dt_start,dt_end)	
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
    <query_tag>__CREATE_T_VIEW_HIERARCHY__</query_tag>
    <query_string>
		<![CDATA[
				 create table t_view_hierarchy(id_view INTEGER NOT NULL, 
         id_view_parent INTEGER,
				 CONSTRAINT PK_t_view_hierarchy PRIMARY KEY CLUSTERED (id_view, id_view_parent))
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

	<query>
		<query_tag>__DUMMY_FOREIGN_KEYS__</query_tag>
	<query_string>
				alter table t_acc_usage_interval add constraint tmpfk_t_acc_usage_interval 
				foreign key (id_usage_interval) references t_usage_interval(id_interval) on update cascade on delete cascade
				alter table t_acc_usage add constraint tmpfk_t_acc_usage 
				foreign key (id_usage_interval) references t_usage_interval(id_interval) on update cascade on delete cascade
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__UPDATE_INTERVALS__</query_tag>
	<query_string>
	      <![CDATA[
				update t_usage_interval set id_interval = (select pc.id_interval 
				from t_pc_interval pc
				where t_usage_interval.id_usage_cycle=pc.id_cycle
				and t_usage_interval.dt_start=pc.dt_start
				and t_usage_interval.dt_end=pc.dt_end)
				]]>
		</query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_DUMMY_KEYS__</query_tag>
	<query_string>
				alter table t_acc_usage_interval drop constraint tmpfk_t_acc_usage_interval
				alter table t_acc_usage drop constraint tmpfk_t_acc_usage
  </query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__INSERT_T_CURRENT_ID__</query_tag>
	<query_string>
				insert into t_current_id select isnull(max(id_acc),0),'id_sess' from t_acc_usage
  </query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__ALTER_T_USAGE_CYCLE_TYPE__</query_tag>
	<query_string>
			alter table t_usage_cycle_type add n_proration_length int null
			alter table t_usage_cycle_type alter column tx_desc varchar(255) NOT NULL
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__UPDATE_T_USAGE_CYCLE_TYPE__</query_tag>
	<query_string>
			update t_usage_cycle_type set n_proration_length = (select
			n_proration_length from t_usage_cycle_type_length b where 
			t_usage_cycle_type.id_cycle_type=b.id_cycle_type)
  </query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__DROP_T_USAGE_CYCLE_TYPE_LENGTH__</query_tag>
	<query_string>
			alter table t_usage_cycle_type alter column n_proration_length int not null
			drop table t_usage_cycle_type_length
			alter table t_invoice add invoice_currency varchar(10)
	</query_string>
   <num_params>0</num_params>
	</query>


	<query>
		<query_tag>__UPDATE_T_BASE_PROPS__</query_tag>
	<query_string>
			 <![CDATA[
				update t_base_props set n_name=0 where nm_name is null
				update t_base_props set n_name=0 where nm_name =' '
				update t_base_props set n_desc=0 where nm_desc is null
				update t_base_props set n_desc=0 where nm_desc =' '
				update t_base_props set n_display_name=0 where nm_display_name is null
				update t_base_props set n_display_name=0 where nm_display_name =' '
				update t_invoice set invoice_currency ='USD'
			]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ALTER_T_BASE_PROPS_1__</query_tag>
	<query_string>
			 <![CDATA[
				alter table t_invoice alter column invoice_currency varchar(10) not null
				alter table t_base_props alter column nm_name nvarchar(255)
				alter table t_base_props alter column nm_desc nvarchar(255)
				alter table t_base_props alter column nm_display_name nvarchar(255)
				]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__UPDATE_T_BASE_PROPS_1__</query_tag>
	<query_string>
	      <![CDATA[
				declare @name1 varchar(256)
				declare @name int
				declare @prop int
				declare @value int
				declare @cursorvar as CURSOR
				declare @i as int
				declare @count as int 
				set @cursorvar = CURSOR STATIC FOR select id_prop,n_name,nm_name from t_base_props
								         where n_name is null
				OPEN @cursorvar
				set @i = 0
				set @count = @@cursor_rows
				while(@i < @count) begin
				FETCH NEXT FROM @cursorvar into @prop,@name,@name1
				exec upsertdescription 840,@name1,null,@value output
				update t_base_props set n_name=@value where nm_name=@name1 and id_prop=@prop
				set @i = @i + 1
				end
				CLOSE @CursorVar
				DEALLOCATE @CursorVar
				]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__UPDATE_T_BASE_PROPS_2__</query_tag>
	<query_string>
				<![CDATA[
				declare @name1 varchar(256)
				declare @name int
				declare @value int
				declare @prop int
				declare @cursorvar as CURSOR
				declare @i as int
				declare @count as int 
				set @cursorvar = CURSOR STATIC FOR select id_prop,n_desc,nm_desc from t_base_props
								         where n_desc is null
				OPEN @cursorvar
				set @i = 0
				set @count = @@cursor_rows
				while(@i < @count) begin
				FETCH NEXT FROM @cursorvar into @prop,@name,@name1
				exec upsertdescription 840,@name1,null,@value output
				update t_base_props set n_desc=@value where nm_desc=@name1 and id_prop=@prop 
				set @i = @i + 1
				end
				CLOSE @CursorVar
				DEALLOCATE @CursorVar
        ]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__UPDATE_T_BASE_PROPS_3__</query_tag>
	<query_string>
	      <![CDATA[
				declare @name1 varchar(256)
				declare @name int
				declare @value int
				declare @prop int
				declare @cursorvar as CURSOR
				declare @i as int
				declare @count as int 
				set @cursorvar = CURSOR STATIC FOR select id_prop,n_display_name,nm_display_name from t_base_props
						             where n_display_name is null
				OPEN @cursorvar
				set @i = 0
				set @count = @@cursor_rows
				while(@i < @count) begin
				FETCH NEXT FROM @cursorvar into @prop,@name,@name1
				exec upsertdescription 840,@name1,null,@value output
				update t_base_props set n_display_name=@value where nm_display_name=@name1 and id_prop=@prop	
				set @i = @i + 1
				end
				CLOSE @CursorVar
				DEALLOCATE @CursorVar
        ]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		     <query_tag>__INSERT_ATOMIC_CAP_TYPES__</query_tag>
			 <query_string>
			 <![CDATA[
				 insert into t_atomic_capability_type values(cast ('ABCD' as varbinary(16)), 'MTPathCapability', 'Path Capability', 'Metratech.MTPathCapability', NULL)
			   insert into t_atomic_capability_type values (cast ('ABCD' as varbinary(16)), 'MTEnumTypeCapability', 'Enum Type Capability', 'Metratech.MTEnumTypeCapability', NULL)
			   insert into t_atomic_capability_type values (cast ('ABCD' as varbinary(16)), 'MTDecimalCapability', 'Decimal Capability', 'Metratech.MTDecimalCapability', NULL)
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

	<query>
		     <query_tag>__UPDATE_ACCOUNT_TABLES_1__</query_tag>
			 <query_string>
			 <![CDATA[
				drop trigger UPDATESUBSCRIPTIONACTIVITY
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

	<query>
		     <query_tag>__UPDATE_ACCOUNT_TABLES_2__</query_tag>
			 <query_string>
			 <![CDATA[
				update t_counter_metadata set b_valid_for_dist='N'
				where formulatemplate like ('SUM%-%SUM%')
				update t_counter_metadata set b_valid_for_dist='Y'
				where formulatemplate like ('SUM%+%SUM%')
				update t_counter_metadata set b_valid_for_dist='Y'
				where formulatemplate like ('SUM%A___')
				update t_counter_metadata set b_valid_for_dist='Y'
				where formulatemplate like ('COUNT%A___')
				update t_counter_metadata set b_valid_for_dist='N'
				where formulatemplate like ('AVG%A___')
				update t_account set acc_type = 'csr' where id_Acc = (select id_acc from t_account_mapper where nm_login='csr1')
				insert into t_namespace values ('auth','Accounts mapped to this namespace are used for special Auth purposes',null,'system_auth')
				insert into t_namespace values ('system_user','All accounts that intend to use MetraNet applications should be mapped to this namespace',null,'system_user')
				-- insert into t_enum_data select 'METRATECH.COM/ACCOUNTCREATION/CONTACTTYPE/BILL-TO',(SELECT MAX(id_enum_data)+1 from t_enum_data) 
				update t_account_mapper set nm_space='system_user' where nm_space in ('mcm','csr','mom','ops')
				update t_user_credentials set nm_space='system_user' where nm_space in ('mcm','csr','mom','ops')
				-- update t_account_mapper set nm_space='system_user' where nm_login='csr1'
				-- update t_account_mapper set nm_space='system_user' where nm_login='ops'
				update t_account set acc_type='MOM' where id_acc = (select id_acc from t_account_mapper where nm_login='ops')
				update t_av_internal set c_billable='Y' where id_acc =(select id_acc from t_account_mapper where nm_login='ops')
				-- update t_account_mapper set nm_space='system_user' where nm_login='mcm1'
				-- update t_user_credentials set nm_space = 'system_user' where nm_login='mcm1'
				update t_account set acc_type='MCM' where id_acc=(select id_acc from t_account_mapper where nm_login='mcm1')
				update t_av_internal set c_folder='N' where c_folder is null
				update t_av_internal set c_billable='Y' where c_billable is null
				insert into t_description values(0,156,null,null)
				insert into t_description values(0,276,null,null)
				insert into t_description values(0,840,null,null)
				-- update t_user_credentials set nm_space='system_user' where nm_login='csr1'
				-- update t_user_credentials set nm_space='system_user' where nm_login='ops'
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

<!--
	<query>
		     <query_tag>__INSERT_T_AV_CONTACT__</query_tag>
			 <query_string>
			 <![CDATA[
				declare @id int
				select @id = id_enum_data from t_enum_data where 
				nm_enum_data = 'METRATECH.COM/ACCOUNTCREATION/CONTACTTYPE/BILL-TO' 
				insert into t_av_contact(id_acc,c_contacttype) select id_acc,@id from t_account
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>
-->

	<query>
		     <query_tag>__DROP_AGGREGATE_CONS__</query_tag>
			 <query_string>
			 <![CDATA[
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
					@name = ctu.CONSTRAINT_NAME 
					from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
						on ctu.constraint_catalog = rc.constraint_catalog
						and ctu.constraint_schema = rc.constraint_schema
						and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
						on tc.constraint_catalog = rc.unique_constraint_catalog
						and tc.constraint_schema = rc.unique_constraint_schema
						and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
						on ctu.constraint_catalog = ccu.constraint_catalog
						and ctu.constraint_schema = ccu.constraint_schema
						and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_BASE_PROPS'
				and ctu.table_name='T_AGGREGATE'
				
				select @stmt = N'alter table t_aggregate drop constraint ' + @name
				exec sp_executesql @stmt
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

	<query>
		     <query_tag>__DROP_EFFECTIVEDATE_CONS__</query_tag>
			 <query_string>
			 <![CDATA[
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
					@name = ctu.CONSTRAINT_NAME 
					from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
						on ctu.constraint_catalog = rc.constraint_catalog
						and ctu.constraint_schema = rc.constraint_schema
						and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
						on tc.constraint_catalog = rc.unique_constraint_catalog
						and tc.constraint_schema = rc.unique_constraint_schema
						and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
						on ctu.constraint_catalog = ccu.constraint_catalog
						and ctu.constraint_schema = ccu.constraint_schema
						and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_BASE_PROPS'
				and ctu.table_name='T_EFFECTIVEDATE'
				
				select @stmt = N'alter table t_effectivedate drop constraint ' + @name
				exec sp_executesql @stmt
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

	<query>
		     <query_tag>__DROP_USER_CREDENTIALS_CONS__</query_tag>
			 <query_string>
			 <![CDATA[
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
					@name = ctu.CONSTRAINT_NAME 
					from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
						on ctu.constraint_catalog = rc.constraint_catalog
						and ctu.constraint_schema = rc.constraint_schema
						and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
						on tc.constraint_catalog = rc.unique_constraint_catalog
						and tc.constraint_schema = rc.unique_constraint_schema
						and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
						on ctu.constraint_catalog = ccu.constraint_catalog
						and ctu.constraint_schema = ccu.constraint_schema
						and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_NAMESPACE'
				and ctu.table_name='T_USER_CREDENTIALS'
				
				select @stmt = N'alter table t_user_credentials drop constraint ' + @name
				exec sp_executesql @stmt
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>


	<query>
		     <query_tag>__DROP_INDEX_PL_MAP__</query_tag>
			 <query_string>
			 <![CDATA[
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select @name = d.name from sysindexkeys a,sysobjects b,syscolumns c,sysindexes d
				where a.id=b.id
				and a.indid=d.indid
				and b.name='T_PL_MAP'
				and a.COLid=c.COLid
				and c.name='ID_PO'
				and b.id=c.id 
				and b.id=d.id

				select @stmt = N'drop index t_pl_map.' + @name
				exec sp_executesql @stmt
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>


	<query>
		     <query_tag>__ALTER_PRODUCT_VIEW__</query_tag>
			 <query_string>
			 <![CDATA[
				alter table t_pv_audioconfconnection alter column c_payer nvarchar(255) 

				alter table t_pv_audioconfconnection alter column c_username nvarchar(255) 

				alter table t_pv_audioconffeature alter column c_payer nvarchar(255) 
	
				alter table t_pv_audioconffeature alter column c_duration int
 
				alter table t_pv_audioconffeature alter column c_roundedduration int

				alter table t_pv_audioconfcall alter column c_payer nvarchar(255) 

				alter table t_pv_addcharge alter column c_invoicecomment nvarchar(255)

				alter table t_pv_addcharge alter column c_internalcomment nvarchar(255)

				alter table t_pv_balanceadjustments alter column c_description nvarchar(255)

				alter table t_pv_flatdiscount alter column c_FlatRateQualifier numeric(18,6) null

				alter table t_pv_flatdiscount add c_GroupSubscriptionName nvarchar(100)

				alter table t_pv_flatdiscount_nocond add c_GroupSubscriptionName nvarchar(100)

				alter table t_pv_percentdiscount alter column c_Qualifier numeric(18,6) null

				alter table t_pv_percentdiscount alter column c_target numeric(18,6) null

				alter table t_pv_percentdiscount add c_GroupSubscriptionName nvarchar(100)

				alter table t_pv_percentdiscount_noc alter column c_target numeric(18,6) null

				alter table t_pv_percentdiscount_noc add c_GroupSubscriptionName nvarchar(100)

				alter table t_pv_testparent alter column c_description nvarchar(255) not null

				alter table t_pv_testservice alter column c_description nvarchar(255) not null

				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

	<query>
		     <query_tag>__NEW_ALTER_INDEX__</query_tag>
			 <query_string>
			 <![CDATA[

				alter table t_ps_creditcard add nm_ccseccode varchar(16)

				alter table t_acc_usage add constraint c_t_acc_usage unique(tx_uid)

				alter table t_acc_usage add constraint fk2_t_acc_usage foreign key(id_payee)
				references t_account(id_acc)

				alter table t_acc_usage add constraint fk3_t_acc_usage foreign key(id_prod)
				references t_po(id_po)

				alter table t_acc_usage_cycle add constraint fk1_t_acc_usage_cycle foreign key(id_acc)
				references t_account(id_acc)

				alter table t_acc_usage_interval add constraint fk1_t_acc_usage_interval foreign key(id_acc)
				references t_account(id_acc)

				alter table t_acc_usage_interval add constraint fk2_t_acc_usage_interval 
				foreign key(id_usage_interval) references t_usage_interval(id_interval)

				alter table t_account_ancestor add constraint fk1_t_account_ancestor 
				foreign key(id_ancestor) references t_account(id_acc)

				alter table t_account_ancestor add constraint fk2_t_account_ancestor 
				foreign key(id_descendent) references t_account(id_acc)

				alter table t_aggregate add constraint fk1_t_aggregate 
				foreign key(id_usage_cycle) references t_usage_cycle(id_usage_cycle)

				alter table t_aggregate add constraint fk2_t_aggregate 
				foreign key(id_cycle_type) references t_usage_cycle_type(id_cycle_type)

				alter table t_description add constraint fk2_t_description 
				foreign key(id_lang_code) references t_language(id_lang_code)

				alter table t_discount add constraint fk2_t_discount 
				foreign key(id_usage_cycle) references t_usage_cycle(id_usage_cycle)

				alter table t_discount add constraint fk3_t_discount 
				foreign key(id_cycle_type) references t_usage_cycle_type(id_cycle_type)

				alter table t_pi add constraint fk2_t_pi 
				foreign key(id_parent) references t_pi(id_pi)

				ALTER TABLE T_RECUR ADD  CONSTRAINT FK1_T_RECUR
				FOREIGN KEY (ID_PROP) REFERENCES T_BASE_PROPS (ID_PROP) 

				alter table t_recur add constraint fk3_t_recur 
				foreign key(id_cycle_type) references t_usage_cycle_type(id_cycle_type)

				ALTER TABLE T_SUB ADD  CONSTRAINT FK2_T_SUB
				FOREIGN KEY (ID_GROUP) REFERENCES T_GROUP_SUB (ID_GROUP) 

				alter table t_sub_history add constraint fk3_t_sub_history 
				foreign key(id_po) references t_po(id_po)

				alter table t_user_credentials add constraint fk1_t_user_credentials 
				foreign key(nm_login,nm_space) references t_account_mapper(nm_login,nm_space)

				create index FK2_T_ACC_USAGE_CYCLE ON T_ACC_USAGE_CYCLE(ID_USAGE_CYCLE)

 				create index fk2idx_t_acc_usage_interval  on t_acc_usage_interval(id_usage_interval)  

				create index fk1idx_T_ACCOUNT_MAPPER  on T_ACCOUNT_MAPPER (NM_SPACE)   

				create clustered index fk1idx_T_ACCOUNT_STATE_HISTORY  on T_ACCOUNT_STATE_HISTORY (ID_ACC) 

				create index fk1idx_T_ACC_TEMPLATE_PROPS  on T_ACC_TEMPLATE_PROPS (ID_ACC_TEMPLATE)   

				create index fk2idx_T_ACC_TEMPLATE_SUBS  on T_ACC_TEMPLATE_SUBS (ID_ACC_TEMPLATE)  

				create index fk1idx_t_aggregate  on t_aggregate (id_usage_cycle)  

				create index fk2idx_t_aggregate  on t_aggregate (id_cycle_type)  

				create index fk1idx_T_AUDIT  on T_AUDIT (ID_EVENT) 

				create index fk1idx_T_AUDIT_DETAILS  on T_AUDIT_DETAILS (ID_AUDIT)  

				create index fk1idx_T_CALENDAR_DAY  on T_CALENDAR_DAY (ID_CALENDAR) 

				create index fk1idx_T_CALENDAR_HOLIDAY  on T_CALENDAR_HOLIDAY (ID_DAY)  

				create index fk1idx_T_CALENDAR_PERIODS  on T_CALENDAR_PERIODS (ID_DAY)  

				create index fk1idx_T_CAPABILITY_INSTANCE  on T_CAPABILITY_INSTANCE (ID_POLICY) 

				create index fk21idx_t_capability_instance  on t_capability_instance (id_cap_type) 

				create index fk2idx_T_COMPOSITOR  on T_COMPOSITOR (ID_COMPOSITE)  

				create index fk2idx_t_counter_map	on t_counter_map (id_pi)	  

				create index fk2idx_t_counter	on t_counter (id_counter_type)	

				create index fk1idx_t_counter_params_metadata on t_counter_params_metadata (id_counter_meta)	
	 				
				create clustered index fk1idx_T_DECIMAL_CAPABILITY  on T_DECIMAL_CAPABILITY (ID_CAP_INSTANCE) 

				create index fk2idx_t_description  on t_description (id_lang_code)  

				create index fk2idx_t_discount  on t_discount (id_usage_cycle)  

				create index fk3idx_t_discount  on t_discount (id_cycle_type)  

				create clustered index fk1idx_T_ENUM_CAPABILITY  on T_ENUM_CAPABILITY (ID_CAP_INSTANCE)  

				create index fk1idx_T_GROUP_SUB  on T_GROUP_SUB (ID_USAGE_CYCLE)   

				create index fk2idx_T_GROUP_SUB  on T_GROUP_SUB (ID_DISCOUNTACCOUNT) 

				create index fk3idx_T_GROUP_SUB  on T_GROUP_SUB (ID_CORPORATE_ACCOUNT)   

				create clustered index fk1idx_T_GSUBMEMBER_HISTORICAL  on T_GSUBMEMBER_HISTORICAL (ID_ACC)  

				create index fk2idx_T_GSUBMEMBER_HISTORICAL  on T_GSUBMEMBER_HISTORICAL (ID_GROUP) 

				create index fk1idx_T_IMPERSONATE  on T_IMPERSONATE (ID_ACC)  

				create index fk2idx_T_IMPERSONATE  on T_IMPERSONATE (ID_OWNER) 

				create clustered index fk1idx_T_PATH_CAPABILITY  on T_PATH_CAPABILITY (ID_CAP_INSTANCE) 

				create clustered index fk2idx_T_PAYMENT_REDIR_HISTORY  on T_PAYMENT_REDIR_HISTORY (ID_PAYEE) 

				create index fk1idx_T_PAYMENT_REDIR_HISTORY  on T_PAYMENT_REDIR_HISTORY (ID_PAYER) 

				create index fk2idx_t_pi  on t_pi (id_parent) 

				create index fk1idx_T_PI_RULESETDEF_MAP  on T_PI_RULESETDEF_MAP (ID_PI)  

				create clustered index T_PL_MAP_t_po  on T_PL_MAP (ID_PO) 

				create index fk1idx_T_PL_MAP  on T_PL_MAP (ID_ACC) 

				create index fk7idx_T_PL_MAP  on T_PL_MAP (ID_PARAMTABLE) 

				create index fk2idx_T_PO  on T_PO (ID_EFF_DATE)  

				create index fk3idx_T_PO  on T_PO (ID_AVAIL) 

				create index fk2idx_T_POLICY_ROLE  on T_POLICY_ROLE (ID_ROLE) 

				create index fk1idx_T_PRINCIPAL_POLICY  on T_PRINCIPAL_POLICY (ID_ACC)  

				create index fk2idx_T_PRINCIPAL_POLICY  on T_PRINCIPAL_POLICY (ID_ROLE) 

				create index fk2idx_T_RECUR  on T_RECUR (ID_USAGE_CYCLE) 

				create index fk3idx_t_recur  on t_recur (id_cycle_type)  

				create index fk2idx_T_RSCHED  on T_RSCHED (ID_EFF_DATE)

				create index fk3idx_T_RSCHED  on T_RSCHED (ID_PI_TEMPLATE)  

				create index fk1idx_T_SITE_USER  on T_SITE_USER (ID_SITE) 

				create index fk2idx_T_SUB  on T_SUB (ID_GROUP) 
				
				create index idx_t_sub_comp ON t_sub(id_acc, id_po, id_group, vt_start, vt_end)

				create index fk1idx_T_SUB_HISTORY  on T_SUB_HISTORY (ID_ACC) 

				create index fk2idx_T_SUB_HISTORY  on T_SUB_HISTORY (ID_GROUP) 

				create index fk3idx_t_sub_history  on t_sub_history	(id_po)  

				create index fk1idx_T_USAGE_CYCLE  on T_USAGE_CYCLE (ID_CYCLE_TYPE) 
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>


	<query>
      	<query_tag>__ALTER_MAIN_DATABASE__</query_tag>
        <query_string>
	   <!-- necessary to use indexed views 
			ALTER DATABASE ACTUS SET ARITHABORT ON -->
			declare @temp_database varchar(100)
			declare @str nvarchar(1000)
			select @temp_database = db_name()
			select @str =  N'ALTER DATABASE '  + @temp_database + N' SET ARITHABORT ON'
			exec sp_executesql  @str
	 </query_string>
		<num_params>1</num_params>
	</query>

<!--
	<query>
      	<query_tag>__CREATE_INDEXED_VIEW_INDICES__</query_tag>
        <query_string><![CDATA[

				CREATE UNIQUE CLUSTERED INDEX IDX_T_VW_I_ACCTRES_1 ON T_VW_I_ACCTRES (nm_login, nm_space, status, state_end)

				CREATE INDEX IDX_T_VW_I_ACCTRES_2 ON T_VW_I_ACCTRES (id_acc)

				CREATE UNIQUE CLUSTERED INDEX IDX_T_VW_I_ACCTRES_BYID_1 ON T_VW_I_ACCTRES_BYID (id_acc, status, state_end)

				CREATE UNIQUE CLUSTERED INDEX IDX_T_VW_I_GSUBMEMBER_1 ON T_VW_I_GSUBMEMBER (id_group, id_acc)

				CREATE INDEX IDX_T_VW_I_GSUBMEMBER_2 ON T_VW_I_GSUBMEMBER (id_acc)

				CREATE UNIQUE CLUSTERED INDEX IDX_T_VW_I_ACC_MAPPER_1 ON T_VW_I_ACC_MAPPER (TX_TYP_SPACE, NM_SPACE, NM_LOGIN)

				CREATE INDEX IDX_T_VW_I_ACC_MAPPER_2 ON T_VW_I_ACC_MAPPER (id_acc, id_enum_data)

				CREATE UNIQUE CLUSTERED INDEX idx_t_vw_allrateschedules_po ON t_vw_allrateschedules_po (id_sched, id_pi_instance)
				create index idx_t_vw_allrateschedules_po_param on t_vw_allrateschedules_po (id_pi_template, id_paramtable, id_po)

				CREATE UNIQUE CLUSTERED INDEX idx_t_vw_allrateschedules_pl ON t_vw_allrateschedules_pl (id_sched)
				create index idx_t_vw_allrateschedules_pl_param on t_vw_allrateschedules_pl (id_pi_template, id_paramtable, id_po)

				alter table t_invoice add invoice_currency varchar(10)
				update t_invoice set invoice_currency ='USD'
				alter table t_invoice alter column invoice_currency varchar(10) not null
		]]>
	 </query_string>
		<num_params>0</num_params>
	</query>
-->

	</mtconfigdata>
</queryfile>
     
