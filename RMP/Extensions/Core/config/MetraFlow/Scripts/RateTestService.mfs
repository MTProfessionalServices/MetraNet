include "UsageIntervalResolution.mfs"

operator importme[string $USAGERECORDFILE, out "output" is svc_id_convert("output")]
(
svc_import:import[format="myRec
INTEGER=text_delimited_base10_int32(delimiter='|', null_value='')
BIGINT=text_delimited_base10_int64(delimiter='|', null_value='')
DECIMAL=text_delimited_base10_decimal(delimiter='|', null_value='')
BOOLEAN=text_delimited_boolean(delimiter='|', true_value='Y', false_value='N', null_value='')
NVARCHAR=text_delimited_nvarchar(delimiter='|', null_value='')
ENUM=text_delimited_enum(enum_space='Global',enum_type='CountryName', delimiter='|', null_value='')
DATETIME=iso8601_datetime(delimiter='|', null_value='')
(
AccountName NVARCHAR,
Description NVARCHAR,
Units DECIMAL,
Time DATETIME,
DecProp1 DECIMAL,
DecProp2 DECIMAL,
DecProp3 DECIMAL,
IntegerProperty INTEGER,
Integer64Property BIGINT,
StringProperty NVARCHAR,
EncryptedStringProperty_ NVARCHAR,
DecimalProperty DECIMAL,
DoubleProperty DECIMAL,
BooleanProperty BOOLEAN,
EnumProperty ENUM,
TimestampProperty DATETIME,
PipelineTime iso8601_datetime(delimiter=crlf, null_value='')
)",
filename=$USAGERECORDFILE,
mode="sequential"];

svc_part:hashpart[key="AccountName", mode="sequential"];
svc_import -> svc_part;

svc_id:id_generator[id="id_source_sess_int64", sequence="id_dbqueue", blockSize=1000];
svc_part -> svc_id;

svc_id_convert:expr[program="CREATE PROCEDURE IdConvert @id_source_sess_int64 BIGINT @_SessionID BINARY OUTPUT
AS
SET @_SessionID = CAST(@id_source_sess_int64 AS BINARY)"];

svc_id -> svc_id_convert;

)

step ImportAndRate[]
(
svc_id_convert:importme[];

TimestampOverride_expr:expr[program="
CREATE PROCEDURE TimeOverride
  @PipelineTime DATETIME
  @_Timestamp   DATETIME OUTPUT
  @Namespace NVARCHAR OUTPUT
AS
  SET @Namespace = N'mt'
  IF NOT (@PipelineTime IS NULL)
    -- use pipelinetime from the service
    SET @_Timestamp = @PipelineTime
  ELSE
    SET @_Timestamp = getutcdate()"];

svc_id_convert -> TimestampOverride_expr;

payj:account_lookup[identifier="AccountName", 
namespace="Namespace", namespaceValueType="fieldReference",
property="AccountID", as="_AccountID",
property="PayingAccountID", as="_PayingAccount",
property="UsageCycleID", as="_UsageCycleID",
property="PayerCurrency", as="_Currency",
property="TimezoneID", as="TimezoneID"
];
TimestampOverride_expr -> payj;

FixedRate_expr:expr[program="CREATE PROCEDURE FixedRate
  @Units   DECIMAL
  @_Amount DECIMAL OUTPUT
AS
  SET @_Amount = @Units*0.1"];

payj -> FixedRate_expr;

auij:usageIntervalResolution[];
FixedRate_expr -> auij;


ren:write_product_view[productView="metratech.com/testservice"];
auij -> ren;

-----------------------------------
-----------------------------------
-- Feed all of the errors into the error output.
-----------------------------------
-----------------------------------
write_error[service="metratech.com/testservice"];
payj(1) -> write_error(0);
auij(1) -> write_error(1);
ren(1) -> write_error(2);

-----------------------------------
-----------------------------------
-- TODO: Batch update and materialized views
-----------------------------------
-----------------------------------

-----------------------------------
-----------------------------------
-- Debug output
-----------------------------------
-----------------------------------
d:sequential_file_write[filename="C:\scratch\test_service_load_%1%.mfd"];

ren->d;

)

step LoadUsage[]
(
r:sequential_file_scan[filename="C:\scratch\test_service_load_%1%.mfd"];

l:load_usage[productView="metratech.com/testservice"];

r -> l;
)

step LoadErrors[]
(
failed_txn_message:sequential_file_scan[filename="C:\scratch\testpi_message_load_%1%.mfd"];
failed_txn_session_set:sequential_file_scan[filename="C:\scratch\testpi_session_set_load_%1%.mfd"];
dn:sequential_file_scan[filename="C:\scratch\testpi_service_error_load1_%1%.mfd"];
dn1:sequential_file_scan[filename="C:\scratch\testpi_service_error_load2_%1%.mfd"];

load_error[service="metratech.com/testservice"];

failed_txn_message -> load_error("message");
failed_txn_session_set -> load_error("session_set");
dn -> load_error("failed_transaction");
dn1 -> load_error("service");
)

steps
  ImportAndRate;
  LoadUsage;
  LoadErrors;
endsteps
