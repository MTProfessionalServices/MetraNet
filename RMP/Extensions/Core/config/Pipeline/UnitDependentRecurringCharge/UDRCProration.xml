<xmlconfig>
  <mtsysconfigdata>
    <effective_date ptype="DATETIME">1998-11-19T00:00:00Z</effective_date>
    <timeout ptype="INTEGER">30</timeout>
    <configfiletype>CONFIG_DATA</configfiletype>
  </mtsysconfigdata>

  <mtconfigdata>

 <version ptype="INTEGER">1</version>
 <!-- First processor configuration -->
 <processor>
  <name>UDRCProration</name>
  <description>Pro-rate recurring charge amount.</description>	
  <progid>MetraPipeline.MTSQLInterpreter.1</progid>

<!--
  <autotest>
    <file>ratedatetest.xml</file>
  </autotest>
-->
  
<!--
  <inputs>
  </inputs>

  <outputs>
  </outputs>
-->

  <!-- Processor specific configuration data -->
  <configdata>

  <Program>
	  <![CDATA[
		CREATE PROCEDURE NewProration 
		-- Inputs
		@RCActionType VARCHAR @RCAmount DECIMAL
		@BillingIntervalStart DATETIME @BillingIntervalEnd DATETIME 
		@RCIntervalSubscriptionStart DATETIME @RCIntervalSubscriptionEnd DATETIME 
		@RCIntervalStart DATETIME @RCIntervalEnd DATETIME 
		@SubscriptionStart DATETIME @SubscriptionEnd DATETIME 
		@UnitValueStart DATETIME @UnitValueEnd DATETIME 
		@ProrateOnSubscription BOOLEAN @ProrateOnUnsubscription BOOLEAN
		@ProrationCycleLength INTEGER
		-- Outputs
		@ProratedAmount DECIMAL OUTPUT
		@ProratedIntervalStart DATETIME OUTPUT
		@ProratedIntervalEnd DATETIME OUTPUT
		@ProratedDays INTEGER OUTPUT
		@ProratedDailyRate DECIMAL OUTPUT
		@ProratedOnSubscription BOOLEAN OUTPUT
		@ProratedOnUnsubscription BOOLEAN OUTPUT
		@ProratedOnUnitValueChange BOOLEAN OUTPUT
		AS
      DECLARE @IssueCredit BOOLEAN
			SET @IssueCredit = (@RCActionType = 'Credit')
			DECLARE @IssueCreditOrCorrection BOOLEAN
      SET @IssueCreditOrCorrection = CASE WHEN @RCActionType = 'Credit' OR @RCActionType = 'InitialCorrection' OR @RCActionType = 'AdvanceCorrection' THEN True ELSE False END
			
			-- Find the number of days to use as the basis of proration
			DECLARE @ProrationBasis INTEGER
			SET @ProrationBasis = CASE @ProrationCycleLength WHEN 0 THEN intervaldays(@RCIntervalStart, @RCIntervalEnd) ELSE @ProrationCycleLength END

			-- These rules figure out whether we have a proration scenario at all
			DECLARE @SubscribedThisInterval BOOLEAN
			SET @SubscribedThisInterval = NOT @IssueCredit AND (@RCIntervalStart < @RCIntervalSubscriptionStart)
			DECLARE @UnsubscribedThisInterval BOOLEAN
			SET @UnsubscribedThisInterval = (@IssueCredit AND @RCIntervalSubscriptionStart <> @RCIntervalStart) OR 
			  (NOT @IssueCredit AND (@RCIntervalEnd > @RCIntervalSubscriptionEnd))

			-- Set up the interval we will actually charge for
			-- Note that the special logic for the credit case is due the fact that in the
      -- credit case, the interval [@RCIntervalSubscriptionStart, @RCIntervalSubscriptionEnd]
      -- is the set difference of the recurring charge interval and the subscription adjusted recurring charge interval.
			SET @ProratedIntervalStart = CASE WHEN @ProrateOnSubscription OR @IssueCredit THEN @RCIntervalSubscriptionStart ELSE @RCIntervalStart END
			SET @ProratedIntervalEnd = CASE WHEN @ProrateOnUnsubscription THEN @RCIntervalSubscriptionEnd ELSE @RCIntervalEnd END

			-- We always prorate on unit value change.  
      DECLARE @UnitValueChangedInInterval BOOLEAN
			SET @UnitValueChangedInInterval = (@UnitValueStart > @ProratedIntervalStart) OR (@UnitValueEnd < @ProratedIntervalEnd)
      SET @ProratedIntervalStart = CASE WHEN @UnitValueStart > @ProratedIntervalStart THEN @UnitValueStart ELSE @ProratedIntervalStart END
      SET @ProratedIntervalEnd = CASE WHEN @UnitValueEnd < @ProratedIntervalEnd THEN @UnitValueEnd ELSE @ProratedIntervalEnd END


			SET @ProratedDays = intervaldays(@ProratedIntervalStart, @ProratedIntervalEnd)

			-- Make sure that the number of days that we prorate does not exceed the proration basis!
			SET @ProratedDays = CASE WHEN @ProratedDays > @ProrationBasis THEN @ProrationBasis ELSE @ProratedDays END

			-- Return information that let's the world know whether proration actually occurred.  Say no
			-- to proration if the prorated interval equals the basis (e.g. change unit value on the last
			-- day of a 31 day month when using proration based on 30 days...
			SET @ProratedOnSubscription = @ProratedDays <> @ProrationBasis AND @ProrateOnSubscription AND @SubscribedThisInterval
			SET @ProratedOnUnsubscription = @ProratedDays <> @ProrationBasis AND @ProrateOnUnsubscription AND @UnsubscribedThisInterval
			SET @ProratedOnUnitValueChange = @ProratedDays <> @ProrationBasis AND @UnitValueChangedInInterval AND NOT (@SubscribedThisInterval OR @UnsubscribedThisInterval)

			-- Now let's do the actual calculation
			SET @ProratedDailyRate = round(@RCAmount / CAST(@ProrationBasis AS DECIMAL), 2)
			SET @ProratedAmount = CASE WHEN @ProratedOnSubscription OR @ProratedOnUnsubscription OR @ProratedOnUnitValueChange THEN @ProratedDailyRate * CAST(@ProratedDays AS DECIMAL) ELSE @RCAmount END

			SET @ProratedAmount = CASE WHEN @IssueCreditOrCorrection THEN -@ProratedAmount ELSE @ProratedAmount END
			
	  ]]>
  </Program> 
			
  </configdata>

 </processor>

  </mtconfigdata>
</xmlconfig>
