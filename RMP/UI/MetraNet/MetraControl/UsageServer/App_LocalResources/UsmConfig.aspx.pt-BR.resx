<?xml version="1.0" encoding="utf-8"?>
<root>
    <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
    <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
        <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
        <xsd:element name="root" msdata:IsDataSet="true">
            <xsd:complexType>
                <xsd:choice maxOccurs="unbounded">
                    <xsd:element name="metadata">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" />
                            </xsd:sequence>
                            <xsd:attribute name="name" use="required" type="xsd:string" />
                            <xsd:attribute name="type" type="xsd:string" />
                            <xsd:attribute name="mimetype" type="xsd:string" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="assembly">
                        <xsd:complexType>
                            <xsd:attribute name="alias" type="xsd:string" />
                            <xsd:attribute name="name" type="xsd:string" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="data">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
                            <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
                            <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
                            <xsd:attribute ref="xml:space" />
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="resheader">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                            </xsd:sequence>
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </xsd:schema>
    <resheader name="resmimetype">
        <value>text/microsoft-resx</value>
    </resheader>
    <resheader name="version">
        <value>2.0</value>
    </resheader>
    <resheader name="reader">
        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <resheader name="writer">
        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
    </resheader>
    <data name="CancelButtonResource1.Text" xml:space="preserve">
        <value>Cancelar</value>
    </data>
    <data name="LabelAnnuallyResource1.Text" xml:space="preserve">
        <value>Anualmente</value>
    </data>
    <data name="LabelAutoRunEopInfoResource1.Text" xml:space="preserve">
        <value>Uma vez que o grupo de faturamento passe por um fechamento simplificado, seja automática ou manualmente, a plataforma inicia automaticamente a execução dos adaptadores de final de período.</value>
    </data>
    <data name="LabelAutoRunEopResource1.Text" xml:space="preserve">
        <value>Executar automaticamente os adaptadores de final de período nos grupos de faturamento de fechamento simplificado</value>
    </data>
    <data name="LabelAutoSoftCloseResource1.Text" xml:space="preserve">
        <value>Criar automaticamente o fechamento simplificado dos grupos de cobrança para:</value>
    </data>
    <data name="LabelAutoSoftCloseTitleResource1.Text" xml:space="preserve">
        <value>Fazer o fechamento simplificado automaticamente dos grupos de faturamento dos intervalos de uso expirados.</value>
    </data>
    <data name="LabelBiWeeklyResource1.Text" xml:space="preserve">
        <value>Bissemanal</value>
    </data>
    <data name="LabelBlockIntervalsResource1.Text" xml:space="preserve">
        <value>Ao fechar intervalos automaticamente, bloquear os intervalos para novas contas.</value>
    </data>
    <data name="LabelDailyResource1.Text" xml:space="preserve">
        <value>Diariamente</value>
    </data>
    <data name="LabelDaysAfterResource1.Text" xml:space="preserve">
        <value>dia(s) após a expiração do intervalo.</value>
    </data>
    <data name="LabelEachNightResource1.Text" xml:space="preserve">
        <value>Todas as noites, a plataforma verifica os intervalos que encerraram e, usando a configuração de período de carência abaixo, cria grupos de faturamento automaticamente e altera seus estados para 'Fechado simplificadamente'.</value>
    </data>
    <data name="LabelIntervalsResource1.Text" xml:space="preserve">
        <value>intervalos</value>
    </data>
    <data name="LabelMonthlyResource1.Text" xml:space="preserve">
        <value>Mensalmente</value>
    </data>
    <data name="LabelQuarterlyResource1.Text" xml:space="preserve">
        <value>Trimestralmente</value>
    </data>
    <data name="LabelRunScheduledAdaptersInfoResource1.Text" xml:space="preserve">
        <value>A plataforma executará periodicamente os adaptadores programados e configurados. Observação: se esta configuração não for selecionada, todos os adaptadores programados precisarão ser executados manualmente.</value>
    </data>
    <data name="LabelRunScheduledAdaptersResource1.Text" xml:space="preserve">
        <value>Executar adaptadores agendados</value>
    </data>
    <data name="LabelSemiAnnuallyResource1.Text" xml:space="preserve">
        <value>Semestralmente</value>
    </data>
    <data name="LabelSemiMonthlyResource1.Text" xml:space="preserve">
        <value>Quinzenalmente</value>
    </data>
    <data name="LabelWeeklyResource1.Text" xml:space="preserve">
        <value>Semanalmente</value>
    </data>
    <data name="MTPanel1Resource1.Text" xml:space="preserve">
        <value>Configuração USM</value>
    </data>
    <data name="MTTitle1Resource1.Text" xml:space="preserve">
        <value>Manutenção do servidor de utilização</value>
    </data>
    <data name="PageResource1.Title" xml:space="preserve">
        <value>MetraNet</value>
    </data>
    <data name="SaveConfigButtonResource1.Text" xml:space="preserve">
        <value>Configurações de gravação</value>
    </data>
</root>