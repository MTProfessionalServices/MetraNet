using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using MetraTech.Basic;
using MetraTech.Basic.Config;
using MetraTech.Basic.Exception;
using MetraTech.BusinessEntity.Core;
using MetraTech.BusinessEntity.Core.Rule;
using MetraTech.BusinessEntity.DataAccess.Metadata;
using MetraTech.BusinessEntity.DataAccess.Rule;
using NHibernate;

//%%USING_DIRECTIVES%%

namespace %%NAMESPACE%%
{
    [ComputedPropertyInfo(Name = "%%COMPUTATION_CLASS_NAME%%",
                          Description = "%%PROPERTY_DESCRIPTION%%",
                          EntityName = "%%ENTITY_NAME%%",
                          PropertyName = "%%PROPERTY_NAME%%")]
    public class %%COMPUTATION_CLASS_NAME%% : MetraTech.BusinessEntity.DataAccess.Rule.ComputedProperty
    {
        public override List<ErrorObject> Compute(DataObject dataObject, string propertyName, ISession session)
        {
            // Ensure that the correct type has been passed in
            Check.Require(dataObject.GetType().FullName == "%%ENTITY_NAME%%",
                          String.Format("Cannot compute %%PROPERTY_NAME%% for entity '{0}'. Expected entity '{1}'",
                                        dataObject.GetType().FullName, 
                                        "%%ENTITY_NAME%%"));
            
            // Log
            LogDebugBeginCompute(propertyName, dataObject);

            List<ErrorObject> errors = new List<ErrorObject>();
            
            %%BME_CLASS_NAME%% %%BME_VARIABLE%% = dataObject as %%BME_CLASS_NAME%%;
            Check.Require(%%BME_VARIABLE%% != null, 
                          String.Format("Cannot convert dataObject to '{0}'", typeof(%%BME_CLASS_NAME%%).FullName));


            //Business Logic
            %%BUSINESS_LOGIC%%
            
            // Log
            LogDebugEndCompute(propertyName, dataObject);
            
            return errors;
        }
    }
}
