<#@ template language="C#" hostspecific="True" debug="True"#>
<#@ import namespace="MetraTech.BusinessEntity.DataAccess.Metadata" #>
<#@ import namespace="System.Diagnostics" #>

<# Init(); #>
// Generated on <#= DateTime.Now.ToString() #> from RMP\Config\BusinessEntity\entityClass.tt

using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using MetraTech.Basic;
using MetraTech.BusinessEntity.Core.Model;
using MetraTech.BusinessEntity.Core;
using MetraTech.BusinessEntity.DataAccess.Metadata;

namespace <#=entity.Namespace#>
{
  [DataContract(IsReference = true)]
  [KnownType("GetKnownTypes")]
  [ConfigDriven]
  [Serializable]
  public partial class <#=entity.ClassName#> : DataObject, <#=Name.GetInterfaceFullName(entity.FullName)#>
  {
    #region System Properties
<#
foreach (Property property in entity.PreDefinedProperties)
{
#>
    [DataMember]
    public override <#=property.TypeName#> <#=property.Name#> {get; set;}
<#
}
#>
    #endregion
    
    #region Basic Properties
    
    // Business Key  
<#
if (entity is RelationshipEntity)
{
#>
    private <#=Name.GetEntityBusinessKeyInterfaceFullName(entity.FullName)#> _businessKey = 
      new <#=Name.GetEntityBusinessKeyClassName(entity.FullName)#>() {BusinessKey = Guid.NewGuid()};
<#
}
else
{
#>   
    private <#=Name.GetEntityBusinessKeyInterfaceFullName(entity.FullName)#> _businessKey = 
      new <#=Name.GetEntityBusinessKeyClassName(entity.FullName)#>();
<#
}
#>    
    [DataMember]
    public virtual <#=Name.GetEntityBusinessKeyInterfaceFullName(entity.FullName)#> BusinessKey 
    {
      get { return _businessKey; }
      set { _businessKey = value; }
    }
<#
foreach (Property property in entity.Properties)
{
  if (property.IsBusinessKey)
  {
    continue;
  }
  
  // If there's a default value, then initialize the field with the default value
  if (!String.IsNullOrEmpty(property.DefaultValue))
  {
    // Make it nullable if it's not required and a value type
    if (!property.IsRequired && property.IsValueType)
    {
#>
    private System.Nullable<<#=property.TypeName#>>  <#=property.FieldName#> = <#=property.GetCodeSnippetForInitializingFieldWithDefaultValueInT4Template()#>
    
<#
    }
    else
    {
#>
    private <#=property.TypeName#>  <#=property.FieldName#> = <#=property.GetCodeSnippetForInitializingFieldWithDefaultValueInT4Template()#>
<#   
    }
  }
  else
  {
    // No default value
    // Make it nullable if it's not required and a value type
    if (!property.IsRequired && property.IsValueType)
    {
#>
    private System.Nullable<<#=property.TypeName#>>  <#=property.FieldName#>;
<#
    }
    else
    {
#>
    private <#=property.TypeName#>  <#=property.FieldName#>;
<#
    }
  }
#>  
    [DataMember]
<#
  if (!property.IsRequired && property.IsValueType)
  {
#>
    public virtual System.Nullable<<#=property.TypeName#>> <#=property.Name#>
<#
  }
  else
  {
#>
    public virtual <#=property.TypeName#> <#=property.Name#>
<#
  }
#>
    {
      get { return <#=property.FieldName#>; }
      set { <#=property.FieldName#> = value; }
    }
<#
}
#>
    #endregion 
	
    #region Navigation Properties
<#
if (entity is RelationshipEntity)
{
#>

    private <#=((RelationshipEntity)entity).GetSourceEntityInterfaceName()#>  <#=((RelationshipEntity)entity).GetSourceEntityFieldName()#>;
    public virtual <#=((RelationshipEntity)entity).GetSourceEntityInterfaceName()#> <#=((RelationshipEntity)entity).GetSourceEntityClassName()#>
    {
      get { return <#=((RelationshipEntity)entity).GetSourceEntityFieldName()#>; }
      set { <#=((RelationshipEntity)entity).GetSourceEntityFieldName()#> = value; }
    }
    
    private <#=((RelationshipEntity)entity).GetTargetEntityInterfaceName()#>  <#=((RelationshipEntity)entity).GetTargetEntityFieldName()#>;
    public virtual <#=((RelationshipEntity)entity).GetTargetEntityInterfaceName()#> <#=((RelationshipEntity)entity).GetTargetEntityClassName()#>
    {
      get { return <#=((RelationshipEntity)entity).GetTargetEntityFieldName()#>; }
      set { <#=((RelationshipEntity)entity).GetTargetEntityFieldName()#> = value; }
    }
    
    public virtual void SetRelationshipItem(object item)
    {
      if (item is <#=((RelationshipEntity)entity).GetSourceEntityInterfaceName()#>)
      {
        <#=Name.GetEntityClassName(((RelationshipEntity)entity).SourceEntityName)#> = item as <#=((RelationshipEntity)entity).GetSourceEntityInterfaceName()#>;
      }
      else if (item is <#=((RelationshipEntity)entity).GetTargetEntityInterfaceName()#>)
      {
        <#=Name.GetEntityClassName(((RelationshipEntity)entity).TargetEntityName)#> = item as <#=((RelationshipEntity)entity).GetTargetEntityInterfaceName()#>;
      }
      else
      {
        throw new ApplicationException("Invalid argument");
      }
    }
<#
}
foreach (Relationship relationship in entity.Relationships)
{
  if (relationship.End2.Multiplicity == Multiplicity.Many)
  {
#>
    private IList<<#=relationship.End2.EntityInterfaceName#>> <#=relationship.End1.PropertyFieldName#> = new List<<#=relationship.End2.EntityInterfaceName#>>();
    [DataMember]
    public virtual IList<<#=relationship.End2.EntityInterfaceName#>> <#=relationship.End1.PropertyName#>
    {
      get { return <#=relationship.End1.PropertyFieldName#>; }
      set { <#=relationship.End1.PropertyFieldName#> = value; }
    }
    
    public virtual DataObject Add<#=Name.GetEntityClassName(relationship.End2.EntityTypeName)#>(<#=relationship.End2.EntityInterfaceName#> item)
    {
      Type type = Type.GetType(Name.GetEntityAssemblyQualifiedName("<#=relationship.RelationshipEntity.FullName#>"), true);
      
      <#=relationship.RelationshipEntity.GetInterfaceFullName()#> relationshipDataObject =
        Activator.CreateInstance(type, false) as <#=relationship.RelationshipEntity.GetInterfaceFullName()#>;
      
      relationshipDataObject.SetRelationshipItem(this);
      relationshipDataObject.SetRelationshipItem(item);

      <#=relationship.RelationshipEntity.PluralName#>.Add(relationshipDataObject);
      
      return (DataObject)relationshipDataObject;
    }
    
<#
  }
  else if (relationship.End2.Multiplicity == Multiplicity.One)
  {
#>
    private <#=relationship.End2.EntityInterfaceName#>  <#=relationship.End1.PropertyFieldName#>;
    [DataMember]
    public virtual <#=relationship.End2.EntityInterfaceName#> <#=relationship.End1.PropertyName#>
    {
      get { return <#=relationship.End1.PropertyFieldName#>; }
      set { <#=relationship.End1.PropertyFieldName#> = value; }
    }
    
    public virtual DataObject Set<#=Name.GetEntityClassName(relationship.End2.EntityTypeName)#>(<#=relationship.End2.EntityInterfaceName#> item)
    {
      Type type = Type.GetType(Name.GetEntityAssemblyQualifiedName("<#=relationship.RelationshipEntity.FullName#>"), true);
      
      <#=relationship.RelationshipEntity.GetInterfaceFullName()#> relationshipDataObject =
        Activator.CreateInstance(type, false) as <#=relationship.RelationshipEntity.GetInterfaceFullName()#>;
      
      relationshipDataObject.SetRelationshipItem(this);
      relationshipDataObject.SetRelationshipItem(item);

      <#=relationship.RelationshipEntity.PluralName#>.Add(relationshipDataObject);
      
      return (DataObject)relationshipDataObject;
    }
<#
  }
#>

    private IList<<#=relationship.RelationshipEntity.GetInterfaceFullName()#>> <#=relationship.RelationshipEntity.GetFieldName()#> = new List<<#=relationship.RelationshipEntity.GetInterfaceFullName()#>>();
    public virtual IList<<#=relationship.RelationshipEntity.GetInterfaceFullName()#>> <#=relationship.RelationshipEntity.PluralName#>
    {
      get { return <#=relationship.RelationshipEntity.GetFieldName()#>; }
      set { <#=relationship.RelationshipEntity.GetFieldName()#> = value; }
    }
<#
}
#>
    #endregion
    
    public static new Type[] GetKnownTypes()
    {
      var knownTypes = new List<Type>();
<#
foreach (Property property in entity.Properties)
{
  if (property.IsEnum)
  {
#>
      knownTypes.Add(typeof(<#=property.TypeName#>));
<#
  }
}
#>
      return knownTypes.ToArray();
    } 
  }
  
  #region Business Key
  [DataContract(IsReference = true)]
  [Serializable]
  public class <#=Name.GetEntityBusinessKeyClassName(entity.FullName)#> : <#=Name.GetEntityBusinessKeyInterfaceFullName(entity.FullName)#>
  {
<#
if (entity is RelationshipEntity)
{
#>
    [DataMember]
    public System.Guid BusinessKey {get; set;}
<#
}
else
{
  foreach (Property property in entity.Properties)
  {
    if (property.IsBusinessKey)
    {
#>
    [DataMember]
    public <#=property.TypeName#> <#=property.Name#> {get; set;}
<#
    }
  }
}
#>
  }
  #endregion
}

<#+

    private Entity entity;
    
    private void Init()
    {
		  TemplateHost templateHost = (TemplateHost)Host;
		  entity = templateHost.Entity;
    }
#>