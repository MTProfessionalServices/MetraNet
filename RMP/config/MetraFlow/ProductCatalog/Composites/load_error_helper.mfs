
-- This operator helps to prepare the data need to call
-- the load_error operator.
--
-- Input columns required:
--    Type      Name           Description
--    integer   _ErrorCounter  An increment counter of number of errors hit.
--    integer   _ErrorCode     A unique error code identifying error.
--    string    _ErrorString   A description of the error.
--    string    _Plugin        The name of the metraflow operator causing error
--    string    _Module        The name of the metraflow operator causing error
--    binary    SessionID      The id_source_sess 
--    various   c_*            The service definition columns
--
-- Example use of this operator:
--
-- prepareError: prepareToReportTransactionError[];
-- 
-- createError -> prepareError;
-- 
-- storeTransaction: load_error[service="metratech.com/movietickets"];
-- 
-- prepareError("failed_transaction")  -> storeTransaction("failed_transaction")
-- prepareError("session_set")  -> storeTransaction("session_set");
-- prepareError("message") -> storeTransaction("message");
-- prepareError("service") -> storeTransaction("service");


operator load_error_helper[
   in  "input" is createMessageID("input"),
   out "failed_transaction" is createFailedData("output"),
   out "session_set" is createSessionSet("output"),
   out "message" is createMessageData("output"),
   out "service" is createServiceData("output")]
(
  createMessageID: 
      id_generator[id="new_id_message", 
                   sequence="id_dbqueuesch", 
                   blockSize=1];

  createKeyIdSS: 
      id_generator[id="new_id_ss", 
                   sequence="id_dbqueuess", 
                   blockSize=1];

  createMessageID -> createKeyIdSS;

  -- The commit unit is used by load_error for 
  -- coordinating the database insert.

  createCommitUnit: rename[from="_ErrorCounter", 
                           to="id_commit_unit"];

  createKeyIdSS -> createCommitUnit;

  copyEverything: copy[];

  createCommitUnit -> copyEverything;




  -- Create the message output port -------------------------------------------

  createMessageData: expr[
    program="
      CREATE PROCEDURE reportTransactionErrorProc1
        @new_id_message  INTEGER
        @id_message      INTEGER   OUTPUT
      AS
        SET @id_message = @new_id_message",
    mode="sequential"];

  copyEverything(0) -> createMessageData

  


  -- Create the service data output port ---------------------------------------

  createServiceData: expr[
    program="
      CREATE PROCEDURE reportTransactionErrorProc2
        @new_id_ss      INTEGER
        @SessionID      BINARY
        @id_ss          INTEGER OUTPUT
        @id_source_sess BINARY  OUTPUT
      AS
        SET @id_ss = @new_id_ss
        SET @id_source_sess = @SessionID",
    mode="sequential"];

  copyEverything(1) -> createServiceData;




  -- Create the failed transaction output port ---------------------------------

  createFailedTransactionID: 
      id_generator[id="id_failed_transaction", 
                   sequence="id_failed_txn", 
                   blockSize=1];

  copyEverything(2) -> createFailedTransactionID

  createFailedData: expr[
    program="
      CREATE PROCEDURE reportTransactionErrorProc3
        @new_id_ss             INTEGER
        @_ErrorCode            INTEGER
        @_ErrorString          NVARCHAR
        @_Plugin               NVARCHAR
        @_Module               NVARCHAR
        @State                 BOOLEAN OUTPUT
        @tx_StateReasonCode    NVARCHAR OUTPUT
        @tx_FailureID          BINARY OUTPUT
        @tx_FailureID_Encoded  NVARCHAR OUTPUT
        @tx_FailureCompoundID_encoded NVARCHAR OUTPUT
        @id_PossiblePayeeID    INTEGER OUTPUT
        @id_PossiblePayerID    INTEGER OUTPUT
        @tx_FailureServiceName NVARCHAR OUTPUT
        @n_Line                INTEGER OUTPUT
        @dt_FailureTime        DATETIME OUTPUT
        @dt_MeteredTime        DATETIME OUTPUT
        @tx_Sender             NVARCHAR OUTPUT
        @tx_StageName          NVARCHAR OUTPUT
        @tx_Method             NVARCHAR OUTPUT
        @tx_Batch              BINARY OUTPUT
        @tx_Batch_Encoded      NVARCHAR OUTPUT
        @b_compound            BOOLEAN OUTPUT
        @tx_errorcodemessage   NVARCHAR OUTPUT
        @id_sch_ss             INTEGER OUTPUT
        @dt_StateLastModifiedTime DATETIME OUTPUT
        @n_Code                INTEGER OUTPUT
        @tx_ErrorMessage       NVARCHAR OUTPUT
        @tx_PlugIn             NVARCHAR OUTPUT
        @tx_Module             NVARCHAR OUTPUT
      AS
        SET @State                 = TRUE
        SET @tx_StateReasonCode    = N''
        SET @tx_FailureID          = CAST(0x0 AS BINARY)
        SET @tx_FailureID_Encoded  = N''
        SET @tx_FailureCompoundID_encoded = N''
        SET @id_PossiblePayeeID    = 0
        SET @id_PossiblePayerID    = 0
        SET @tx_FailureServiceName = N''
        SET @n_Line                = 0
        SET @dt_FailureTime        = getutcdate()
        SET @dt_MeteredTime        = @dt_FailureTime
        SET @tx_Sender             = N''
        SET @tx_StageName          = N''
        SET @tx_Method             = N''
        SET @tx_Batch              = CAST(0x0 AS BINARY)
        SET @tx_Batch_Encoded      = N''
        SET @b_compound            = TRUE
        SET @tx_errorcodemessage   = N''
        SET @id_sch_ss             = @new_id_ss
        SET @dt_StateLastModifiedTime = @dt_FailureTime
        SET @n_Code                = @_ErrorCode
        SET @tx_ErrorMessage       = @_ErrorString
        SET @tx_PlugIn             = @_Plugin
        SET @tx_Module             = @_Module
        "];

  createFailedTransactionID -> createFailedData



  -- Create the session set output port ----------------------------------------

  createSessionSet: expr[
    program="CREATE PROCEDURE reportTransactionErrorProc4
        @new_id_message INTEGER
        @new_id_ss      INTEGER
        @id_message     INTEGER OUTPUT
        @id_ss          INTEGER OUTPUT
        @session_count  INTEGER OUTPUT
      AS
        SET @id_message = @new_id_message
        SET @id_ss = @new_id_ss
        SET @session_count = 1"];

  copyEverything(3) -> createSessionSet
)
