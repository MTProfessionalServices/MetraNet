<?xml version="1.0" encoding="utf-8"?>
<MetraFlowScript>
    <Name>InvoicePaymentRedirection</Name>
    <Description>Generate usage summaries, adjustment summaries and balance forward amounts for invoice calculation.</Description>
    <Parameters>
        <Parameter>
            <Name>TEMP_DIR</Name>
            <SyntaxCheckValue>C:\Temp</SyntaxCheckValue>
            <Description>Directory in which to store temporary files.</Description>
        </Parameter>
        <Parameter>
            <Name>ID_BILLGROUP</Name>
            <SyntaxCheckValue>1000</SyntaxCheckValue>
            <Description>Billing group for which invoices are being processed.</Description>
        </Parameter>
    </Parameters>
    <Script>
      <![CDATA[
pay:select[baseQuery="SELECT id_payee as pay_id_payee, id_payer as pay_id_payer, vt_start as pay_dt_start, vt_end as pay_dt_end
FROM
t_billgroup_member bgm
INNER LOOP JOIN t_payment_redirection pay on bgm.id_acc=pay.id_payee
WHERE 
bgm.id_billgroup=%%ID_BILLGROUP%%
AND
{fn mod(bgm.id_acc, %%NUMPARTITIONS%%)} = %%PARTITION%%",
partitionConstraint="Database"];

pay_copy:copy[columnlist=[column="pay_id_payer"], partitionConstraint="Database"];

pay_payer_part:hashpart[key="pay_id_payer", partitionConstraint="Database"];

pay_copy(0) -> pay_payer_part;

pay_payer_coll:coll[];

pay_payer_part -> pay_payer_coll;

pay_payer_dedup:hash_group_by[key="pay_id_payer", initialize="CREATE PROCEDURE p @cnt INTEGER
AS
SET @cnt = 0",
update="CREATE PROCEDURE p @cnt INTEGER
AS
SET @cnt = @cnt + 1"];

pay_payer_coll -> pay_payer_dedup;

pay_payer_insert:insert[schema="NetMeter", table="tmp_invoice_new_payers", createTable=true];

pay_payer_dedup -> pay_payer_insert;

pay -> pay_copy;

pay_part:hashpart[key="pay_id_payee",
partitionConstraint="Database"];

pay_coll:coll[];

pay_write:sequential_file_write[filename="%%TEMP_DIR%%\invoice_t_payment_redirection_%1%.mfd"];

pay_copy(1) -> pay_part -> pay_coll -> pay_write;
]]></Script>
</MetraFlowScript>