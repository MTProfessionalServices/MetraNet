<queryfile>
	<mtconfigdata>
	
	<filename>v301to35.xml</filename>	


	<query>
      	<query_tag>__START_UPGRADE__</query_tag>
        <query_string>
			<![CDATA[
				INSERT INTO t_sys_upgrade
				(target_db_version, dt_start_db_upgrade, db_upgrade_status)
				VALUES
				(3.5, getdate(), 'R')
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__CREATE_CHARGE__</query_tag>
        <query_string>
			<![CDATA[
				create table t_charge ( 
        id_charge int not null primary key,
				dt_modified datetime,
				nm_description varchar(255),
				id_pi int not null,
				id_amt_prop int not null
      )
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__CREATE_CHARGE_PROPERTY__</query_tag>
        <query_string>
				create table t_charge_prop ( 
        id_charge_prop int not null identity primary key,
				id_charge int not null,
				id_prod_view_prop int not null
      )
	 </query_string>
		<num_params>0</num_params>
	</query>

		<query>
			<query_tag>__CREATE_T_FAILED_TRANSACTIONS__</query_tag>
        <query_string>
			<![CDATA[
          CREATE TABLE t_failed_transaction (
          	id_failed_transaction int NOT NULL ,
          	State char (1)  NOT NULL ,
          	tx_StateReasonCode nvarchar (255),
          	tx_FailureID varbinary (16),
          	tx_FailureID_Encoded nvarchar (30)  NOT NULL ,
          	tx_FailureCompoundID varbinary (16),
          	tx_FailureCompoundID_encoded nvarchar (30)  NOT NULL ,
          	id_PossibleAccountID int NOT NULL ,
          	tx_FailureServiceName nvarchar (64)  NOT NULL ,
          	n_Code int NOT NULL ,
          	n_Line int NOT NULL ,
          	dt_FailureTime datetime NOT NULL ,
          	dt_MeteredTime datetime NOT NULL ,
          	tx_Sender nvarchar (30)  NOT NULL ,
          	tx_ErrorMessage nvarchar (255)  NOT NULL ,
          	tx_StageName nvarchar (64)  NOT NULL ,
          	tx_PlugIn nvarchar (64)  NOT NULL ,
          	tx_Module nvarchar (255)  NOT NULL ,
          	tx_Method nvarchar (64)  NOT NULL ,
          	tx_Batch varbinary (16),
          	tx_Batch_Encoded nvarchar (30),
		b_compound char (1) NOT NULL,
		tx_errorcodemessage nvarchar (255) NOT NULL
          ) 
       ]]>					
		  </query_string>
			<num_params>0</num_params>
		</query>
		
		<query>
			<query_tag>__INSERT_T_FAILED_TRANSACTIONS__</query_tag>
        <query_string>
			<![CDATA[
				insert into t_failed_transaction
				(id_failed_transaction,State,tx_StateReasonCode,tx_FailureID,tx_FailureID_Encoded,tx_FailureCompoundID,
         tx_FailureCompoundID_encoded,id_PossibleAccountID,tx_FailureServiceName,n_Code,n_Line,dt_FailureTime,dt_MeteredTime,
         tx_Sender,tx_ErrorMessage,tx_StageName,tx_PlugIn,tx_Module,tx_Method,tx_Batch,tx_Batch_Encoded,b_compound,tx_errorcodemessage)
				select 1,c_state,null,au.tx_uid,c_failureid,au.tx_uid,c_failurecompoundid,c_possibleaccountid,c_failureservicename,
				c_code,c_line,c_failuretime,c_meteredtime,c_sender,c_errormessage,c_stagename,c_plugin,c_module,c_method,
				au.tx_batch,c_tx_batch,'N','Upgrade resulted in no value' 
				from t_pv_error pv,t_acc_usage au
				where pv.id_Sess=au.id_sess
       ]]>					
		  </query_string>
			<num_params>0</num_params>
		</query>

		<query>
			<query_tag>__UPDATE_T_FAILED_TRANSACTIONS__</query_tag>
        <query_string>
			<![CDATA[
				set nocount on
				declare @var1 int
				declare @i int
				set @i=0
				DECLARE c1 CURSOR
				FOR SELECT id_failed_transaction FROM t_failed_transaction
				OPEN c1
				FETCH NEXT FROM c1 into @var1
				WHILE @@FETCH_STATUS = 0
				begin 
				update t_failed_transaction set id_failed_transaction=@var1+@i where current of c1
				set @i=@i+1
				FETCH NEXT FROM c1 into @var1
				end
				close c1
				deallocate c1
       ]]>					
		  </query_string>
			<num_params>0</num_params>
		</query>


		<query>
			<query_tag>__ALTER_T_FAILED_TRANSACTIONS__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_failed_transaction add CONSTRAINT PK_t_failed_transaction PRIMARY KEY CLUSTERED (id_failed_transaction)
       ]]>					
		  </query_string>
			<num_params>0</num_params>
		</query>


		<query>
			<query_tag>__CREATE_T_FAILED_TRANSACTION_MSIX__</query_tag>
        <query_string>
			<![CDATA[
				create table t_failed_transaction_msix
				(
				id_failed_transaction int,
				n_row	int,
				tx_text varchar(2048)
				CONSTRAINT FK1_t_failed_transaction_msix FOREIGN KEY (id_failed_transaction) REFERENCES t_failed_transaction (id_failed_transaction)
				)
       ]]>					
		  </query_string>
			<num_params>0</num_params>
		</query>

		<query>
			<query_tag>__CREATE_TAXRELATED_TABLE__</query_tag>
				<query_string>
				<![CDATA[
				CREATE TABLE t_acc_usage_pos (
        id_sess              int NOT NULL,
        pos_chrg_status_cd   char(1) NULL,
        CONSTRAINT pk_t_acc_usage_pos PRIMARY KEY CLUSTERED (id_sess)
				)

 CREATE TABLE t_acc_usage_tax_detail (
        id_sess              int NOT NULL,
        id_taxbl             int NOT NULL,
        id_tax_type          int NOT NULL,
        tax_juris_cd         char(13) NOT NULL,
        id_tax_juris_lvl     int NOT NULL,
        gl_cd                char(3) NULL,
        nation_cd            char(2) NULL,
        state_cd             char(2) NULL,
        cnty_cd              char(3) NULL,
        city_cd              char(4) NULL,
        subcity_cd           char(2) NULL,
        srchrg_ind           char(1) NOT NULL,
        out_taxb_bsnss_ind   char(1) NULL,
        bill_format_type_cd  char(1) NULL,
        tax_type_desc        varchar(255) NULL,
        acc_clss             char(1) NULL,
        taxbl_amt            numeric(18,6),
        non_taxbl_amt        numeric(18,6),
        line_item_desc       varchar(255) NULL,
        tax_grss_amt         numeric(18,6),
        max_tax_ind          char(1) NULL,
        tax_amt              numeric(18,6),
        tax_amt_dec7         numeric(18,7) NULL,
        tax_rate_type_cd     char(1) NULL,
        tax_rate             int NULL,
        line_chrg_amt        numeric(5,3) NULL,
        rtd_rate             int NULL,
        rtd_chrg_amt         numeric(5,3) NULL,
        srchrg_addon_amt     numeric(18,6),
        rtd_tax_amt          numeric(18,6),
        max_tax_routn_num    smallint NULL,
        max_tax_amt          numeric(18,6),
        trnsctn_type_cd      char(4) NULL,
        sale_type_cd         char(4) NULL,
        taxb_non_reason_cd   char(4) NULL,
        CONSTRAINT pk_t_acc_usage_tax_detail PRIMARY KEY CLUSTERED (id_sess, id_taxbl, id_tax_type, 
               tax_juris_cd, id_tax_juris_lvl)
 )

 CREATE TABLE t_acc_usage_tax_param (
        id_sess              int NOT NULL,
        id_taxbl             int NOT NULL,
        id_billng_sys        char(5) NULL,
        id_data_center       char(2) NULL,
        id_host              char(4) NULL,
        id_aplctn            char(1) NULL,
        env_ind              char(1) NULL,
        tax_audit_flag       char(1) NULL,
        tax_juris_cd         char(13) NULL,
        prim_suppl_ind       char(1) NULL,
        out_of_city_ind      char(1) NULL,
        id_billng_cycle      int NULL,
        rev_dt               datetime NULL,
        lob_dvsn_cd          char(4) NULL,
        rev_loc_cd           char(7) NULL,
        cust_acc_nm          varchar(40) NULL,
        tax_fid              char(5) NULL,
        tax_reason_apply_cd  char(5) NULL,
        acc_type_cd          char(2) NULL,
        att_c_tya            char(2) NULL,
        tax_exmpt_reason_cd  char(2) NULL,
        inv_num              varchar(20) NULL,
        inv_dt               datetime NULL,
        cntrct_cnty_amt      numeric(18,6),
        cntrct_city_amt      numeric(18,6),
        lease_eff_dt         datetime NULL,
        sobp_me              char(4) NULL,
        sobp_le              char(3) NULL,
        sobp_ae              char(3) NULL,
        taxbl_bsnss_ind      char(1) NULL,
        chrg_eff_dt          datetime NULL,
        cmplnc_trnsctn_cd    char(2) NULL,
        tax_cat_cd           char(2) NULL,
        amt                  numeric(18,6),
        grss_amt             numeric(18,6),
        item_accum_cnty_amt  numeric(18,6),
        item_accum_city_amt  numeric(18,6),
        prev_taxed_amt       numeric(18,6),
        prev_taxed_tax_amt   numeric(18,6),
        prev_tax_lvl_cd      char(2) NULL,
        prev_tax_type_cd     char(5) NULL,
        prod_dvsn            char(1) NULL,
        prod_cd_or_grp       varchar(10) NULL,
        prod_quntty          int NULL,
        prod_term_cd         char(4) NULL,
        prod_tax_basis_cd    char(5) NULL,
        prod_usage           char(2) NULL,
        prod_cost_amt        numeric(18,6),
        prod_grp             char(4) NULL,
        telco_svc_grp_cd     char(1) NULL,
        telco_cust_type_cd   char(1) NULL,
        telco_att_c_bsnss    char(2) NULL,
        telco_chrg_freq_ind  char(1) NULL,
        telco_chrg_type_cd   char(2) NULL,
        telco_tax_calc_ind   char(2) NULL,
        telco_min_usage      bigint NULL,
        telco_num_access     bigint NULL,
        telco_num_call       bigint NULL,
        bndl_fet_rate        int NULL,
        bndl_nm              varchar(10) NULL,
        CONSTRAINT pk_t_acc_usage_tax_param PRIMARY KEY CLUSTERED (id_sess, id_taxbl)
 )
 
 CREATE TABLE t_access_method_cd (
        access_method_cd     char(2) NOT NULL,
        access_method_desc   varchar(255) NOT NULL,
        id_desc              int NOT NULL,
        CONSTRAINT pk_t_access_method_cd PRIMARY KEY CLUSTERED (access_method_cd)
 )

 CREATE TABLE t_gl_cd (
        gl_cd                char(3) NOT NULL,
        gl_cd_desc           varchar(255) NOT NULL,
        id_desc              int NOT NULL,
        CONSTRAINT pk_t_gl_cd PRIMARY KEY CLUSTERED (gl_cd)
 )

 CREATE TABLE t_tax_juris_lvl (
        id_tax_juris_lvl     int NOT NULL,
        tax_juris_lvl_cd     char(2) NOT NULL,
        tax_juris_lvl_desc   varchar(255) NOT NULL,
        CONSTRAINT pk_t_tax_juris_lvl PRIMARY KEY CLUSTERED (id_tax_juris_lvl)
 )

 CREATE TABLE t_tax_type (
        id_tax_type          int NOT NULL,
        tax_type_desc        varchar(255) NOT NULL,
        gl_cd                char(3) NULL,
        CONSTRAINT pk_t_tax_type PRIMARY KEY CLUSTERED (id_tax_type)
 )

 CREATE TABLE t_taxbl (
        id_taxbl             int NOT NULL,
        taxbl_item_desc      varchar(255) NOT NULL,
        id_desc              int NOT NULL,
        CONSTRAINT pk_t_taxbl PRIMARY KEY CLUSTERED (id_taxbl)
 )

 CREATE TABLE t_taxrule_ctm_2outof3 (
        access_method_cd     char(2) NOT NULL,
        orig_tax_juris_party_cd char(2) NOT NULL,
        term_tax_juris_party_cd char(2) NOT NULL,
        bill_to_tax_juris_party_cd char(2) NOT NULL,
        CONSTRAINT pk_t_taxrule_ctm_2outof3 PRIMARY KEY CLUSTERED (access_method_cd)
 )

 CREATE TABLE t_taxrule_ctm_prod_chrg (
        id_taxbl             int NOT NULL,
        tax_clss_cd          char(1) NULL,
        pec_cd               varchar(10) NULL,
        dvsn_cd              char(3) NULL,
        term_cd              char(4) NULL,
        tax_basis_cd         char(5) NULL,
        trnsctn_cd           char(10) NULL,
        tax_situs_desc       varchar(50) NULL,
        CONSTRAINT pk_t_taxrule_ctm_prod_chrg PRIMARY KEY CLUSTERED (id_taxbl)
 )

 CREATE TABLE t_taxrule_ctm_telco_chrg (
        id_taxbl             int NOT NULL,
        tax_clss_cd          char(1) NULL,
        svc_type_cd          char(3) NULL,
        chrg_type_desc       varchar(50) NULL,
        chrg_freq_cd         char(2) NULL,
        chrg_type_other_desc varchar(50) NULL,
        tax_situs_desc       varchar(50) NULL,
        CONSTRAINT pk_t_taxrule_ctm_telco_chrg PRIMARY KEY CLUSTERED (id_taxbl)
 )

 CREATE TABLE t_taxrule_ctmucc_adj_reason_cd (
        adj_reason_cd        varchar(10) NOT NULL,
        adj_reason_desc      varchar(255) NOT NULL,
        ucc_flag             char(1) NULL,
        tax_clss_cd          char(1) NULL,
        chrg_freq_cd         char(2) NULL,
        chrg_type_desc       varchar(50) NULL,
        pec_cd               char(10) NULL,
        tax_situs_desc       varchar(50) NULL,
        adj_reason_cmnt      varchar(4000) NULL,
        CONSTRAINT pk_t_taxrule_ctmucc_adj_rsn_cd PRIMARY KEY CLUSTERED (adj_reason_cd)
 )

 CREATE TABLE t_taxrule_ucc_percnt_lookup (
        bill_eff_dt          datetime NOT NULL,
        ucc_end_dt           datetime NOT NULL,
        ucc_percnt           numeric(5,3) NOT NULL,
        ucc_cmnt             varchar(4000) NULL,
        CONSTRAINT pk_t_taxrule_ucc_percnt_lookup PRIMARY KEY CLUSTERED (bill_eff_dt, ucc_end_dt)
 )

 CREATE TABLE t_usage_prcss_type (
        usage_prcss_type_cd  char(2) NOT NULL,
        usage_prcss_type_desc varchar(255) NOT NULL,
        CONSTRAINT pk_t_usage_prcss_type PRIMARY KEY CLUSTERED (usage_prcss_type_cd)
 )
]]>
</query_string>
<num_params>0</num_params>
</query>


	<query>
    <query_tag>__CREATE_T_ADJUSTMENT__</query_tag>
    <query_string>
		<![CDATA[
				create table t_adjustment (
				id_prop int primary key not null,
				tx_guid VARBINARY(16) null,
				id_pi_template int null,
				id_pi_instance int null,
				id_adjustment_type int not null,
				CONSTRAINT aj_template_instance1 CHECK 	((id_pi_template IS NOT NULL AND id_pi_instance IS NULL) OR
				(id_pi_template IS NULL AND id_pi_instance IS NOT NULL))
				)
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

   <query>
    <query_tag>__CREATE_T_ADJUSTMENT_TRANSACTION__</query_tag>
    <query_string>
		<![CDATA[
				create table t_adjustment_transaction (
				id_adj_trx int primary key not null,
				id_sess int null,
				id_parent_sess int null,
				id_reason_code int not null,
				id_acc_creator INT NOT NULL,
				id_acc_payer INT NOT NULL,
				c_status VARCHAR(10) NOT NULL,
				n_adjustmenttype INT NOT NULL,
				dt_crt DATETIME NOT NULL,
				dt_modified DATETIME NOT NULL,
				id_aj_template INT NULL,
				id_aj_instance INT NULL,
				id_aj_type INT NOT NULL,
				id_usage_interval INT NOT NULL,
				AdjustmentAmount NUMERIC(18, 6),
				am_currency varchar(3) NOT NULL,
				tx_default_desc text NULL,
				tx_desc text NULL,
				ARBatchID varchar(15) NULL,
				ARDelBatchID varchar(15) NULL,
				ARDelAction char(1) NULL,
				CONSTRAINT aj_trxcheck CHECK 	(id_aj_template IS NOT NULL OR id_aj_instance IS NOT NULL))
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

		<query>
    <query_tag>__CREATE_T_ADJUSTMENT_TYPE__</query_tag>
    <query_string>
		<![CDATA[
				create table t_adjustment_type (
				id_prop int primary key not null,
				tx_guid VARBINARY(16) null,
				id_pi_type int not null,
				n_adjustmentType int not null, -- adjustment enumerated type
				b_supportBulk char(1) not null,
				id_formula INT NOT NULL,
				tx_default_desc text null,
				CONSTRAINT adj_bulkcheck CHECK 	(b_supportBulk = 'Y' or b_supportBulk = 'N')
				)
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

  <query>
    <query_tag>__CREATE_T_ADJUSTMENTTYPE_PROP__</query_tag>
    <query_string>
		<![CDATA[
				create table t_adjustment_type_prop
				(id_prop int primary key not null,
				n_direction int not null,
				nm_datatype varchar(255) not null,
				id_adjustment_type int not null)
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

 <query>
    <query_tag>__CREATE_T_AJ_TEMPLATE_REASON_CODE_MAP__</query_tag>
    <query_string>
		<![CDATA[
				create table T_AJ_TEMPLATE_REASON_CODE_MAP(
				id_adjustment int not null,
				id_reason_code int not null
	)
	]]>
   </query_string>
   <num_params>0</num_params>
 </query>

   <query>
    <query_tag>__CREATE_T_APPLICABILITY_RULE__</query_tag>
    <query_string>
		<![CDATA[
				create table t_applicability_rule (
				id_prop int primary key not null,
				tx_guid VARBINARY(16) null,
				id_formula INT NOT NULL
				)
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>


		<query>
		    <query_tag>__CREATE_T_INVOICE_NAMESPACE__</query_tag>
			<query_string>
		<![CDATA[
			    CREATE TABLE t_invoice_namespace 
			    (
					namespace nvarchar(40) NOT NULL,
					invoice_prefix nvarchar(40) NULL,
					invoice_suffix nvarchar(40) NULL,
					invoice_num_digits int NOT NULL,
					invoice_due_date_offset int NOT NULL,
					id_invoice_num_last int NOT NULL,
					CONSTRAINT PK_t_invoice_namespace PRIMARY KEY CLUSTERED (namespace)
				)
		]]>
			</query_string>
			<num_params>0</num_params>
		</query>
		
	<query>
      	<query_tag>__CREATE_PRODUCT_VIEW__</query_tag>
        <query_string>
		<![CDATA[
				create table t_prod_view ( 
			  id_prod_view int identity not null primary key,
        id_view int not null,
				dt_modified datetime,
				nm_name varchar(255),
				nm_table_name varchar(255),
        constraint t_prod_view_view_IDX unique (id_view)
				)
		]]>
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__CREATE_PRODUCT_VIEW_PROPERTY__</query_tag>
        <query_string>
  <![CDATA[
				create table t_prod_view_prop ( 
				id_prod_view_prop int identity not null,
				id_prod_view int not null,
				nm_name varchar(255) not null,
				nm_data_type varchar(255) not null,
				nm_column_name varchar(255) not null,
				b_required char(1) not null,
				b_composite_idx char(1) not null,
				b_single_idx char(1) not null,
				b_part_of_key char(1) not null,
				b_exportable char(1) not null,
				b_filterable char(1) not null,
				b_user_visible char(1) not null,
				nm_default_value varchar(255) null,
				n_prop_type int not null,
				nm_space varchar(255) null,
				nm_enum varchar(255) null,
				b_core char(1) not null,
				constraint t_prod_view_prop_view_name_IDX unique (id_prod_view, nm_name)
				)
				alter table t_prod_view_prop add constraint pk_t_prod_view_prop 
				primary key(id_prod_view_prop)
	]]>
	 </query_string>
		<num_params>0</num_params>
	</query>

   <query>
    <query_tag>__CREATE_T_REASON_CODE__</query_tag>
    <query_string>
		<![CDATA[
				create table t_reason_code (
				id_prop int primary key not null,
				tx_GUID VARBINARY(16)
				)
		]]>
   </query_string>
   <num_params>0</num_params>
 </query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_TABLE__</query_tag>
			 <query_string>
			 <![CDATA[
				CREATE TABLE t_recevent
				(
				id_event INT NOT NULL,			
				tx_name VARCHAR(255) NOT NULL, 
				tx_type VARCHAR(11) NOT NULL,  
				tx_reverse_mode VARCHAR(14) NOT NULL, 
				b_multiinstance varchar(1) NOT NULL, 
				tx_class_name VARCHAR(255) NULL, 
				tx_extension_name VARCHAR(255) NULL, 
				tx_config_file VARCHAR(255) NULL, 
				dt_activated DATETIME NOT NULL,  
				dt_deactivated DATETIME NULL,  
				tx_display_name VARCHAR(255) NOT NULL, 
				tx_desc VARCHAR(2048) NULL, 
				CONSTRAINT PK_t_recevent PRIMARY KEY (id_event),
				CONSTRAINT CK1_t_recevent CHECK (tx_type IN ('Root', 'Scheduled', 'EndOfPeriod', 'Checkpoint')),
				CONSTRAINT CK2_t_recevent CHECK (tx_reverse_mode IN ('NotImplemented', 'NotNeeded', 'Auto', 'Custom'))
				)
  		 ]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_DEP_TABLE__</query_tag>
			 <query_string>
			 <![CDATA[
				CREATE TABLE t_recevent_dep
				(
				id_event INT NOT NULL,			
				id_dependent_on_event	INT	NULL,	  
				n_distance INT NOT NULL,    
				CONSTRAINT FK_t_recevent_dep FOREIGN KEY (id_event) REFERENCES t_recevent (id_event)
				)
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_INST_TABLE__</query_tag>
			 <query_string>
  		 <![CDATA[
				CREATE TABLE t_recevent_inst
				(
				id_instance INT IDENTITY(1000,1) NOT NULL, 
				id_event INT NOT NULL, 
				id_arg_interval INT NULL,   -- usage interval that an end-of-period adapter is to operate on
				dt_arg_start DATETIME NULL, -- start date that a scheduled adapter is to operate on
				dt_arg_end DATETIME NULL,   -- end date that a scheduled adapter is to operate on
				b_ignore_deps VARCHAR(1) NOT NULL, -- whether to ignore dependencies for this instance
				dt_effective DATETIME NULL, -- this instance can only run after this date, not before
				tx_status VARCHAR(14) NOT NULL, -- the status of the instance based on the latest run
				CONSTRAINT PK_t_recevent_inst PRIMARY KEY (id_instance),
				CONSTRAINT FK1_t_recevent_inst FOREIGN KEY (id_event) REFERENCES t_recevent (id_event),
				CONSTRAINT CK1_t_recevent_inst CHECK ((dt_arg_start IS NULL AND dt_arg_end IS NULL) OR
                                        (dt_arg_start IS NOT NULL AND dt_arg_end IS NOT NULL)),
				CONSTRAINT CK2_t_recevent_inst CHECK (b_ignore_deps IN ('N' , 'Y')),
				CONSTRAINT CK3_t_recevent_inst CHECK (tx_status IN ('NotYetRun', 'ReadyToRun', 'ReadyToReverse',
                                                      'Running', 'Reversing', 'Succeeded', 'Failed'))
				)
			 ]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_INST_AUDIT_TABLE__</query_tag>
			 <query_string>
  		 <![CDATA[
				CREATE TABLE t_recevent_inst_audit
				(
				id_audit INT IDENTITY(1000,1) NOT NULL,
				id_instance INT NOT NULL,
				id_acc INT NOT NULL,            -- the user who requested the action
				tx_action VARCHAR(18) NOT NULL, -- the action 
				b_ignore_deps VARCHAR(1) NULL,  -- whether the instance submited should ignore dependencies 
				dt_effective DATETIME NULL,    --
				tx_detail VARCHAR(2048) NULL,   -- any details/comments specified by the actor
				dt_crt DATETIME NOT NULL, 
				CONSTRAINT PK1_t_recevent_inst_audit PRIMARY KEY (id_audit),
				CONSTRAINT FK1_t_recevent_inst_audit FOREIGN KEY (id_instance) REFERENCES t_recevent_inst (id_instance),
				CONSTRAINT CK1_t_recevent_inst_audit CHECK (tx_action IN ('SubmitForExecution', 'SubmitForReversal',
                                				                            'Acknowledge', 'Unacknowledge',
                                                            					'Cancel', 'MarkAsSucceeded', 'MarkAsFailed'))
				)
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_RUN_TABLE__</query_tag>
			 <query_string>
  		 <![CDATA[
				CREATE TABLE t_recevent_run
				(
				id_run INT NOT NULL,
				id_instance INT NOT NULL,
				tx_type VARCHAR(7) NOT NULL,    -- what the run will do
				id_reversed_run INT NULL,       -- the reversed run, null if the type is 'Execute'
				tx_machine VARCHAR(128) NOT NULL,
				dt_start DATETIME NOT NULL,     -- time the run began
				dt_end DATETIME NULL,           -- time the run finished
				tx_status VARCHAR(10) NOT NULL, -- status of the run
				tx_detail VARCHAR(2048) NULL,   -- any details relating to the result of the action
				CONSTRAINT PK1_t_recevent_run PRIMARY KEY (id_run),
				CONSTRAINT FK1_t_recevent_run FOREIGN KEY (id_instance) REFERENCES t_recevent_inst (id_instance),
				CONSTRAINT CK1_t_recevent_run CHECK (tx_type IN ('Execute' , 'Reverse')),
				CONSTRAINT CK2_t_recevent_run CHECK (tx_status IN ('InProgress', 'Succeeded', 'Failed'))
				)
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_RUN_DETAILS_TABLE__</query_tag>
			 <query_string>
			 <![CDATA[
				CREATE TABLE t_recevent_run_details
				(
				id_detail INT IDENTITY(1000,1) NOT NULL,
				id_run INT NOT NULL,
				tx_type CHAR(7) NOT NULL,      -- type of detail: info, warning
				tx_detail VARCHAR(8000) NOT NULL, -- details generated by adapter
				dt_crt DATETIME NOT NULL, 
				CONSTRAINT PK1_t_recevent_run_details PRIMARY KEY (id_detail),
				CONSTRAINT FK1_t_recevent_run_details FOREIGN KEY (id_run) REFERENCES t_recevent_run (id_run),
				CONSTRAINT CK1_t_recevent_run_details CHECK (tx_type IN ('Debug', 'Info', 'Warning'))
				)
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
			<query_tag>__CREATE_T_BATCH_TEMP__</query_tag>
			<query_string>
			 <![CDATA[
				CREATE TABLE t_batch_temp (
				id_batch int identity (1,1) NOT NULL,	
				tx_batch varbinary (16) NOT NULL,
				tx_batch_encoded varchar (255) NOT NULL,
				tx_source varchar(255),
				tx_sequence varchar(255) NULL,
				tx_name varchar(255) NOT NULL,
				tx_namespace varchar(255) NOT NULL,
				tx_status char(1) NOT NULL,
				dt_crt_source datetime,
				dt_crt datetime NOT NULL,
				dt_first datetime,
				dt_last datetime,
				n_completed int NOT NULL,
				n_failed int NOT NULL,
				n_expected int,
				n_metered int,
        CONSTRAINT tx_status_check CHECK (
				  UPPER(tx_status) = 'A' OR 
				  UPPER(tx_status) = 'B' OR 
					UPPER(tx_status) = 'F' OR 
					UPPER(tx_status) = 'D' OR 
					UPPER(tx_status) = 'C'),
				CONSTRAINT UK_1_t_batch UNIQUE (tx_batch_encoded),
				CONSTRAINT UK_2_t_batch UNIQUE (tx_name, tx_namespace, tx_sequence))
				]]>
			</query_string>
			<num_params>0</num_params>
		</query>

		<query>
			<query_tag>__UPDATE_T_BATCH_TEMP__</query_tag>
			<query_string>
			 <![CDATA[
				insert into t_batch_temp(tx_batch,tx_batch_encoded,tx_source,tx_sequence,tx_name,tx_namespace,tx_status,dt_crt_source,dt_crt,dt_first
				,dt_last,n_completed,n_failed,n_expected,n_metered)
				select tx_uid,'upgrade',null,null,cast(id_batch as varchar),'upgrade','C',null,'01-01-1970',null,null,n_completed,0,NULL,NULL from
				t_batch ba inner join t_batch_status bs
				on ba.tx_uid=bs.tx_batch
				]]>
			</query_string>
			<num_params>0</num_params>
		</query>


	<query>
		<query_tag>__DROP_OLD_BATCH__</query_tag>
	<query_string>
			 <![CDATA[
				drop table t_batch
				drop table t_batch_status
				]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__RENAME_BATCH__</query_tag>
	<query_string>
			 <![CDATA[
				exec sp_rename 't_batch_temp','t_batch'
				]]>
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__ADD_PK_BATCH__</query_tag>
	<query_string>
			 <![CDATA[
				alter table t_batch add constraint PK_t_batch PRIMARY KEY CLUSTERED (id_batch)
				]]>
  </query_string>
   <num_params>0</num_params>
	</query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_RUN_BATCH_TABLE__</query_tag>
			 <query_string>
			 <![CDATA[
				CREATE TABLE t_recevent_run_batch (
			  id_run INT NOT NULL,
				tx_batch_encoded VARCHAR(255) NOT NULL,
				CONSTRAINT FK1_t_recevent_run_batch FOREIGN KEY (id_run) 
				REFERENCES t_recevent_run (id_run),
				CONSTRAINT FK2_t_recevent_run_batch FOREIGN KEY (tx_batch_encoded) 
				REFERENCES t_batch (tx_batch_encoded))
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
		   <query_tag>__CREATE_T_RECEVENT_SCHEDULE_TABLE__</query_tag>
			 <query_string>
			 <![CDATA[
				CREATE TABLE t_recevent_schedule
				(
				id_event INT NOT NULL,			-- foreign key to t_recevent
				id_cycle_type INT NULL,			-- foreign key to t_usage_cycle_type
				id_cycle INT NULL,					-- foreign key to t_usage_cycle
				n_minutes INT NULL,					-- amount of minutes between running the event
				CONSTRAINT FK2_t_recevent_schedule FOREIGN KEY (id_event) REFERENCES t_recevent (id_event)
				)
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

		<query>
		   <query_tag>__CREATE_T_SERVICE_ENDPOINT__</query_tag>
			 <query_string>
		<![CDATA[
        CREATE TABLE t_service_endpoint
        (
        id_se int not null,
        id_prop int not null,
        dt_start datetime,
        dt_end datetime
        )
        alter table t_service_endpoint
        ADD CONSTRAINT t_service_endpoint_PK primary key (id_se)
				]]>
			 </query_string>
			 <num_params>0</num_params>
		</query>

    <query>
      <query_tag>__CREATE_T_SERVICE_ENDPOINT_PARENT__</query_tag>
      <query_string>
		<![CDATA[
        CREATE TABLE t_se_parent
        (
        id_se int not null,
  	    id_acc int not null,
  	    dt_start datetime not null,
        dt_end datetime not null
        )
				]]>
      </query_string>
    </query>
    
    <query>
      <query_tag>__CREATE_T_SERVICE_ENDPOINT_MAPPER__</query_tag>
      <query_string>
		<![CDATA[
        CREATE TABLE t_se_mapper
        (
        id_se int not null,
        id_corp int,
        nm_space varchar(40) not null,
        nm_login varchar(255) not null,
        b_primary varchar(1) not null
        )
        alter table t_se_mapper
        ADD CONSTRAINT t_se_mapper_PK primary key (id_se, nm_space, nm_login)
				]]>
        </query_string>
    </query>

		<query>
			<query_tag>__CREATE_T_SUSPENDED_TXN__</query_tag>
        <query_string>
			<![CDATA[
				create table t_suspended_txn
				(
				tx_UID_encoded varchar(24),
				dt_found datetime
				)
				]]>
		  </query_string>
			<num_params>0</num_params>
		</query>

  <query>
    <query_tag>__CREATE_T_CALC_ENGINE__</query_tag>
    <query_string>
		<![CDATA[
				create table t_calc_engine (
				id_engine int primary key identity(1, 1) not null,
				nm_name VARCHAR(255)
				)
		]]>
		</query_string>
   <num_params>0</num_params>
  </query>

  <query>
		<query_tag>__CREATE_T_CALC_FORMULA__</query_tag>
    <query_string>
		<![CDATA[
				create table t_calc_formula(
				id_formula int primary key identity(1, 1) not null,
				tx_formula text not null,
				id_engine INT NOT NULL
				)
		]]>
</query_string>
   <num_params>0</num_params>
  </query>

		<query>
			<query_tag>__ALTER_T_ACC_USAGE__</query_tag>
        <query_string>
		<![CDATA[
				alter table t_acc_usage add id_se int null
				alter table t_acc_usage add constraint fk4_t_acc_usage foreign key(id_se)
				references t_service_endpoint(id_se)
				]]>
		  </query_string>
			<num_params>0</num_params>
		</query>

		<query>
			<query_tag>__ALTER_T_AV_CONTACT__</query_tag>
        <query_string>
		<![CDATA[
				alter table t_av_contact alter column c_email varchar(100) null
				alter table t_av_contact alter column c_address1 varchar(100) null
				alter table t_av_contact alter column c_address2 varchar(100) null
				alter table t_av_contact alter column c_address3 varchar(100) null
				alter table t_av_contact alter column c_city varchar(20) null
				]]>
		  </query_string>
			<num_params>0</num_params>
		</query>

	<query>
		<query_tag>__CREATE_TEMP_COUNTER_PARAMS_TABLE__</query_tag>
	<query_string>
		<![CDATA[
        create table t_counter_params_temp(id_counter_param int NOT NULL,
																				id_counter int NULL,
																				"Value" varchar(255) NULL,
																				id_counter_param_meta int null)
       ]]>					
	</query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_COUNTER_PARAMS_TABLE_1__</query_tag>
	<query_string>
		<![CDATA[
				insert into t_counter_params_temp select * from t_counter_params
       ]]>					
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_COUNTER_PARAMS_TABLE_2__</query_tag>
	<query_string>
		<![CDATA[
				drop table t_counter_params
				drop table t_pv_error        --move to end 
       ]]>					
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_COUNTER_PARAMS_TABLE_3__</query_tag>
	<query_string>
		<![CDATA[
				exec sp_rename 't_counter_params_temp','t_counter_params'
       ]]>					
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__INSERT_AND_RENAME_COUNTER_PARAMS_TABLE_4__</query_tag>
	<query_string>
		<![CDATA[
				alter table t_counter_params add constraint t_counter_params_PK primary key (id_counter_param)
				alter table t_counter_params	add constraint fk1_t_counter_params foreign key (id_counter) references t_counter (id_prop)  	
				alter table t_counter_params add constraint fk2_t_counter_params foreign key (id_counter_param_meta)	
				references t_counter_params_metadata (id_prop)
				create index fk1idx_t_counter_params on t_counter_params (id_counter_param_meta) 
       ]]>					
  </query_string>
   <num_params>0</num_params>
	</query>

  <query>
      	<query_tag>__CREATE_T_COUNTER_PARAM_PREDICATE__</query_tag>
        <query_string>
				<![CDATA[
     		CREATE TABLE t_counter_param_predicate
        (
        id_prop int identity (1,1) not null,
        id_counter_param INT,
        id_pv_prop INT,
        nm_op NVARCHAR(2),
        nm_value NVARCHAR(255)
        )
        alter table t_counter_param_predicate
				add constraint t_counter_param_predicate_PK primary key (id_prop)   
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

  <query>
    <query_tag>__CREATE_T_COUNTER_PARAM_MAP__</query_tag>
    <query_string>
			<![CDATA[
        CREATE TABLE t_counter_param_map
        (
        id_counter_param INT NOT NULL,
        id_counter INT NOT NULL,
        id_counter_param_meta INT NOT NULL
        )
        alter table t_counter_param_map
				add constraint t_counter_param_map_PK primary key (id_counter_param, id_counter)
         ]]>  
			 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__CREATE_T_GSUB_RECUR_MAP__</query_tag>
        <query_string>
			<![CDATA[
		create table t_gsub_recur_map ( 
			id_group int not null,
			id_prop int not null,
			id_acc int not null,
			vt_start datetime not null,
			vt_end datetime not null,
			tt_start datetime not null,
			tt_end datetime not null
      PRIMARY KEY (id_group, id_prop, vt_start, vt_end)
        )  
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>


	<query>
      	<query_tag>__ALTER_INVOICE_1__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_invoice add payment_ttl_amt numeric (18,6) NULL
				alter table t_invoice add postbill_adj_ttl_amt numeric (18,6) NULL	
				alter table t_invoice add ar_adj_ttl_amt numeric (18,6) NULL	
				alter table t_invoice add tax_ttl_amt numeric (18,6) NULL
				alter table t_invoice add current_balance numeric (18,6) NULL
				alter table t_invoice add id_payer int NULL
				alter table t_invoice add id_payer_interval int NULL
				alter table t_invoice add sample_flag varchar(1) NULL
				alter table t_invoice add balance_forward_date DATETIME NULL
				alter table t_invoice alter column namespace nvarchar(40) not null
				alter table t_invoice alter column invoice_string nvarchar(50) not null
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__UPDATE_INVOICE__</query_tag>
        <query_string>
			<![CDATA[
				update t_invoice set payment_ttl_amt=0
				update t_invoice set postbill_adj_ttl_amt=0
				update t_invoice set ar_adj_ttl_amt=0
				update t_invoice set tax_ttl_amt=0
				update t_invoice set current_balance=0
				update t_invoice set id_payer=id_acc
				update t_invoice set id_payer_interval=id_interval
				update t_invoice set sample_flag='N'
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__ALTER_INVOICE_2__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_invoice alter column payment_ttl_amt numeric (18,6) NOT NULL	
				alter table t_invoice alter column postbill_adj_ttl_amt numeric (18,6) NOT NULL
				alter table t_invoice alter column ar_adj_ttl_amt numeric (18,6) NOT NULL
				alter table t_invoice alter column tax_ttl_amt numeric (18,6) NOT NULL
				alter table t_invoice alter column current_balance numeric (18,6) NOT NULL
				alter table t_invoice alter column id_payer int NOT NULL
				alter table t_invoice alter column id_payer_interval int NOT NULL
				alter table t_invoice alter column sample_flag varchar(1)NOT NULL
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

		<query>
		    <query_tag>__CREATE_T_INVOICE_RANGE__</query_tag>
			<query_string>
			    CREATE TABLE t_invoice_range_temp 
			    (
					id_interval int NOT NULL,
					namespace nvarchar(40) NOT NULL, 
					id_invoice_num_first int NOT NULL,
					id_invoice_num_last int NOT NULL,
					id_run int NULL
				)
			</query_string>
			<num_params>0</num_params>
		</query>

	<query>
      	<query_tag>__INSERT_INVOICE_RANGE__</query_tag>
        <query_string>
			<![CDATA[
				insert into t_invoice_range_temp(id_interval,namespace,id_invoice_num_first,id_invoice_num_last,id_run) 
				select id_interval,'mt',id_invoice_first,id_invoice_last,null from t_invoice_range
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__UPDATE_INVOICE_RANGE_1__</query_tag>
        <query_string>
			<![CDATA[
				update t_invoice_range_temp
				set id_invoice_num_first=id_invoice_num
				from t_invoice
				where id_invoice=id_invoice_num_first		
		  ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__UPDATE_INVOICE_RANGE_2__</query_tag>
        <query_string>
			<![CDATA[
				update t_invoice_range_temp
				set id_invoice_num_last=id_invoice_num
				from t_invoice
				where id_invoice=id_invoice_num_last		
		  ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>


	<query>
      	<query_tag>__DROP_INVOICE_RANGE__</query_tag>
        <query_string>
			<![CDATA[
				drop table t_invoice_range 
	    ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

<query>
      	<query_tag>__RENAME_INVOICE_RANGE_TEMP__</query_tag>
        <query_string>
			<![CDATA[
				exec sp_rename 't_invoice_range_temp','t_invoice_range'
	    ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>


	<query>
      	<query_tag>__CREATE_T_RECUR_ENUM__</query_tag>
        <query_string>
			<![CDATA[
			create table t_recur_enum ( 
			id_prop int not null,
			enum_value decimal(18,6) not null
			)  
		alter table t_recur_enum
			add constraint pk_t_recur_enum primary key (id_prop, enum_value)
		alter table t_recur_enum
		  add constraint fk1_t_recur_enum foreign key (id_prop) references t_recur(id_prop)
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__CREATE_T_RECUR_VALUE__</query_tag>
        <query_string>
			<![CDATA[
			create table t_recur_value ( 
			id_prop int not null,
			id_sub int not null,
			n_value numeric(18,6) not null,
			vt_start datetime not null,
			vt_end datetime not null,
			tt_start datetime not null,
			tt_end datetime not null
			)  
		alter table t_recur_value
			add constraint t_recur_value_PK primary key (id_prop, id_sub, vt_start, vt_end, tt_start, tt_end)
		alter table t_recur_value
			add constraint t_recur_value_FK1 foreign key (id_prop) references t_recur(id_prop)
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

		<query>
			<query_tag>__CREATE_T_RERUN__</query_tag>
        <query_string>
			<![CDATA[
				create table t_rerun
				(
				  id_rerun int IDENTITY (1, 1) primary key clustered,
					tx_filter varchar(255),
					tx_tag varchar(255) UNIQUE
				)
       ]]>					
        </query_string>
			<num_params>0</num_params>
		</query>

		<query>
			<query_tag>__CREATE_T_RERUN_HISTORY__</query_tag>
        <query_string>
			<![CDATA[
				create table t_rerun_history
				(
				  id_rerun int REFERENCES t_rerun(id_rerun),
					dt_action datetime not null,
					tx_action varchar(16) not null,
					id_acc int,
					tx_comment varchar(255)
				)
       ]]>					
        </query_string>
			<num_params>0</num_params>
		</query>

		<query>
			<query_tag>__CREATE_T_RERUN_SESSIONS__</query_tag>
        <query_string>
			<![CDATA[
				create table t_rerun_sessions
				(
				  id_rerun int REFERENCES t_rerun(id_rerun),
					tx_UID varbinary(16) NOT NULL,
					id_sess int,
					id_parent int,
					id_root int,
					id_interval int,
					id_view int,
					tx_state char NOT NULL
				)
       ]]>					
        </query_string>
			<num_params>0</num_params>
		</query>

	<query>
      	<query_tag>__ALTER_USAGE_CYCLE_TYPE_1__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_usage_cycle_type add n_grace_period int null
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__UPDATE_USAGE_CYCLE_TYPE__</query_tag>
        <query_string>
			<![CDATA[
				update t_usage_cycle_type set n_grace_period=3
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__ALTER_T_PRICELIST_1__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_pricelist add n_type int null
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__UPDATE_T_PRICELIST__</query_tag>
        <query_string>
			<![CDATA[
				update t_pricelist set n_type=(select case b_shareable when 'N' then 0 else 1 end)
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__ALTER_T_PRICELIST_2__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_pricelist alter column n_type int not null
				alter table t_pricelist drop column b_shareable
	    ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__ALTER_T_RECUR_1__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_recur add b_charge_per_participant char(1) null
				alter table t_recur add nm_unit_name nvarchar(255) null
				alter table t_recur add n_rating_type int null
				alter table t_recur add b_integral char(1) null
				alter table t_recur add max_unit_value decimal(18,6) null 
				alter table t_recur add min_unit_value decimal(18,6) null
	    ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__UPDATE_T_RECUR__</query_tag>
        <query_string>
			<![CDATA[
				update t_recur
				set  b_charge_per_participant = 'Y',
					nm_unit_name = ' ',
					n_rating_type = 0,
					b_integral = 'N',
					max_unit_value = 999999999.000000,
					min_unit_value = -999999999.000000
	    ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

	<query>
      	<query_tag>__ALTER_T_RECUR_2__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_recur alter column b_charge_per_participant char(1) not null
				alter table t_recur alter column nm_unit_name nvarchar(255) not null
				alter table t_recur alter column n_rating_type int not null
				alter table t_recur alter column b_integral char(1) not null
				alter table t_recur alter column max_unit_value decimal(18,6) not null 
				alter table t_recur alter column min_unit_value decimal(18,6) not null
	    ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

   <query>
    <query_tag>__CREATE_T_AJ_TYPE_APPLIC_MAP__</query_tag>
    <query_string>
		<![CDATA[
      create table t_aj_type_applic_map
      (
	      id_adjustment_type int not null,
	      id_applicability_rule int not null
      )
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>


	<query>
      	<query_tag>__ALTER_T_PO_1__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_po add id_nonshared_pl int null
				alter table t_po add b_hidden char(1) not null constraint df_po_hidden default 'N' WITH VALUES
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

	<query>
      	<query_tag>__UPDATE_T_PO_1__</query_tag>
        <query_string>
			<![CDATA[
				update t_po set id_nonshared_pl = (select top 1 id_pricelist from t_pricelist)
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

	<query>
      	<query_tag>__ALTER_T_PO_2__</query_tag>
        <query_string>
			<![CDATA[
				alter table t_po alter column id_nonshared_pl int not null
		]]>
   </query_string>
   <num_params>0</num_params>
  </query>

	<query>
      	    <query_tag>__INSERT_ROWS_IN_T_CURRENT_ID_TABLE__</query_tag>
        	<query_string>
			<![CDATA[
        insert into t_current_id values (1,'adjustment')
        insert into t_current_id values (1000, 'recevent')
        insert into t_current_id values (1000, 'receventrun')
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

		<query>
      	    <query_tag>__FOREIGN KEYS__</query_tag>
        	<query_string>
			<![CDATA[
				alter table t_acc_usage_tax_detail ADD CONSTRAINT fk1_t_acc_usage_tax_detail FOREIGN KEY (id_tax_type) REFERENCES t_tax_type
				alter table t_acc_usage_tax_detail ADD CONSTRAINT fk2_t_acc_usage_tax_detail FOREIGN KEY (gl_cd) REFERENCES t_gl_cd
				alter table t_acc_usage_tax_detail ADD CONSTRAINT fk3_t_acc_usage_tax_detail FOREIGN KEY (id_sess, id_taxbl) REFERENCES t_acc_usage_tax_param
				alter table t_acc_usage_tax_detail ADD CONSTRAINT fk4_t_acc_usage_tax_detail FOREIGN KEY (id_tax_juris_lvl) REFERENCES t_tax_juris_lvl
				alter table t_acc_usage_tax_param ADD CONSTRAINT fk1_t_acc_usage_tax_param FOREIGN KEY (id_taxbl) REFERENCES t_taxbl
			  alter table t_adjustment ADD CONSTRAINT t_adjustment_fk1 FOREIGN KEY (id_pi_instance) references t_base_props(id_prop)  
				alter table t_adjustment ADD CONSTRAINT t_adjustment_fk2 FOREIGN KEY (id_pi_template) references t_pi_template(id_template)
				alter table t_adjustment ADD CONSTRAINT t_adjustment_fk3 FOREIGN KEY (id_adjustment_type) references t_adjustment_type(id_prop)
				alter table t_adjustment_transaction ADD CONSTRAINT t_adjustment_trx_fk1 foreign key (id_sess) references t_acc_usage(id_sess)	  
				alter table t_adjustment_transaction add constraint t_adjustment_trx_fk2 foreign key (id_parent_sess) references t_acc_usage(id_sess)
  			alter table t_adjustment_transaction add constraint t_adjustment_trx_fk3 foreign key (id_aj_template) references t_adjustment(id_prop)   
				alter table t_adjustment_transaction add constraint t_adjustment_trx_fk4 foreign key (id_aj_instance) references t_adjustment(id_prop)
				alter table t_adjustment_type ADD CONSTRAINT adjustment_type_fk1 FOREIGN KEY (id_prop) references t_base_props(id_prop)
				alter table t_adjustment_type ADD CONSTRAINT adjustment_type_fk2 FOREIGN KEY (id_pi_type) references t_pi(id_pi)
				alter table t_adjustment_type_prop ADD CONSTRAINT adjustment_type_prop_fk1 FOREIGN KEY (id_adjustment_type) references t_adjustment_type(id_prop)
				alter table t_adjustment_type_prop ADD CONSTRAINT adjustment_type_prop_fk2 FOREIGN KEY (id_prop) references t_base_props(id_prop)
        alter table t_counter_param_map add constraint fk_param_map_counter_params foreign key(id_counter_param) references t_counter_params(id_counter_param)
        alter table t_counter_param_map add constraint fk_param_map_counter foreign key(id_counter) references t_counter(id_prop)
        alter table t_counter_param_map add constraint fk_param_map_counter_params_metadata foreign key(id_counter_param_meta) references t_counter_params_metadata(id_prop)
        alter table t_counter_param_predicate add constraint fk_t_counter_params foreign key(id_counter_param) references t_counter_params(id_counter_param)
        alter table t_counter_param_predicate add constraint fk_t_prod_view_prop foreign key(id_pv_prop) references t_prod_view_prop(id_prod_view_prop)
        alter table t_prod_view ADD CONSTRAINT t_prod_view_FK1 FOREIGN KEY (id_view) REFERENCES t_enum_data (id_enum_data)
        alter table t_prod_view_prop ADD CONSTRAINT t_prod_view_prop_FK1 FOREIGN KEY (id_prod_view) REFERENCES t_prod_view (id_prod_view)
        alter table t_se_mapper ADD CONSTRAINT t_se_mapper_FK1 FOREIGN KEY (id_se) REFERENCES t_service_endpoint (id_se)     
		    alter table t_se_mapper ADD CONSTRAINT t_se_mapper_FK2 FOREIGN KEY (id_corp) REFERENCES t_account (id_acc)
        alter table t_se_parent ADD CONSTRAINT t_se_parent_FK1 FOREIGN KEY (id_acc) REFERENCES t_account (id_acc)
        alter table t_service_endpoint ADD CONSTRAINT t_service_endpoint_FK1 FOREIGN KEY (id_prop) REFERENCES t_base_props (id_prop)
				alter table t_tax_type ADD CONSTRAINT fk1_t_tax_type FOREIGN KEY (gl_cd) REFERENCES t_gl_cd
				alter table t_taxrule_ctm_2outof3 ADD CONSTRAINT fk1_t_taxrule_ctm_2outof3 FOREIGN KEY (access_method_cd) REFERENCES t_access_method_cd
				alter table t_taxrule_ctm_prod_chrg ADD CONSTRAINT fk1_t_taxrule_ctm_prod_chrg FOREIGN KEY (id_taxbl) REFERENCES t_taxbl
				alter table t_taxrule_ctm_telco_chrg ADD CONSTRAINT fk1_t_taxrule_ctm_telco_chrg FOREIGN KEY (id_taxbl) REFERENCES t_taxbl
        alter table t_charge ADD CONSTRAINT t_charge_FK1 FOREIGN KEY (id_pi) REFERENCES t_pi (id_pi)
        alter table t_charge ADD CONSTRAINT t_charge_FK2 FOREIGN KEY (id_amt_prop) REFERENCES t_prod_view_prop (id_prod_view_prop)
        alter table t_charge_prop ADD CONSTRAINT t_charge_prop_FK1 FOREIGN KEY (id_charge) REFERENCES t_charge (id_charge)
        alter table t_charge_prop ADD CONSTRAINT t_charge_prop_FK2 FOREIGN KEY (id_prod_view_prop) REFERENCES t_prod_view_prop (id_prod_view_prop)
				alter table t_po add constraint t_po_fk1 foreign key(id_nonshared_pl) REFERENCES t_pricelist (id_pricelist)
				alter table t_gsub_recur_map add constraint t_gsub_recur_map_fk1 
				foreign key (id_group) references t_group_sub(id_group)
				alter table t_gsub_recur_map add constraint t_gsub_recur_map_fk2 
				foreign key (id_prop) references t_recur(id_prop)
				alter table t_gsub_recur_map add constraint t_gsub_recur_map_fk3 
				foreign key (id_acc) references t_account(id_acc)
        create index t_charge_FK1IDX on t_charge (id_pi)
        create index t_charge_FK2IDX on t_charge (id_amt_prop)
        create index t_charge_prop_FK1IDX on t_charge_prop (id_charge)
        create index t_charge_prop_FK2IDX on t_charge_prop (id_prod_view_prop)
    		create index t_gsub_recur_map_FK2IDX on t_gsub_recur_map (id_prop)
    		create index t_gsub_recur_map_FK3IDX on t_gsub_recur_map (id_acc)
    		create index t_recur_value_FK2IDX on t_recur_value (id_sub)
        create index t_se_parent_FK1IDX on t_se_parent (id_acc)     
        create index t_se_mapper_FK2IDX on t_se_mapper (id_corp)
				create index fk4idx_t_acc_usage  on t_acc_usage(id_se)
				create index t_adjustment_fk1idx on t_adjustment(id_pi_instance)
				create index t_adjustment_fk2idx on t_adjustment(id_pi_template)
				create index t_adjustment_fk3idx on t_adjustment(id_adjustment_type)
				create index t_adjustment_transaction_fk1idx on t_adjustment_transaction(id_aj_template)
				create index t_adjustment_transaction_fk2idx on t_adjustment_transaction(id_aj_instance)
				create index t_adjustment_transaction_fk3idx on t_adjustment_transaction(id_sess)
				create index t_adjustment_transaction_fk4idx on t_adjustment_transaction(id_parent_sess)
				create index t_adjustment_type_fk1idx on t_adjustment_type(id_pi_type)
				create index t_adjustment_type_prop_fk1idx on t_adjustment_type_prop(id_adjustment_type)
				create index t_counter_param_map_fk1idx on t_counter_param_map(id_counter)
				create index t_counter_param_map_fk2idx on t_counter_param_map(id_counter_param_meta)
				create index t_counter_param_predicate_fk1idx on t_counter_param_predicate(id_counter_param)
				create index t_counter_param_predicate_fk2idx on t_counter_param_predicate(id_pv_prop)
				create index t_failed_transaction_msix_fk1idx on t_failed_transaction_msix(id_failed_transaction)
				create index t_po_fk4idx on t_po(id_nonshared_pl)
				create index t_recevent_dep_fk1idx on t_recevent_dep(id_event)
				create index t_recevent_inst_fk1idx on t_recevent_inst(id_event)
				create index t_recevent_inst_audit_fk1idx on t_recevent_inst_audit(id_instance)
				create index t_recevent_run_fk1idx on t_recevent_run(id_instance)
				create index t_recevent_run_batch_fk1idx on t_recevent_run_batch(tx_batch_encoded)
				create index t_recevent_run_batch_fk2idx on t_recevent_run_batch(id_run)
				create index t_recevent_run_details_fk1idx on t_recevent_run_details(id_run)
				create index t_recevent_schedule_fk1idx on t_recevent_schedule(id_event)
				create index t_rerun_history_fk1idx on t_rerun_history(id_rerun)
				create index t_rerun_sessions_fk1idx on t_rerun_sessions(id_rerun)
				create index t_service_endpoint_fk1idx on t_service_endpoint(id_prop)
				create clustered index t_invoice_range_idx on t_invoice_range(id_interval)
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

		<query>
      	    <query_tag>__UPDATE_PV_TABLES__</query_tag>
        	<query_string>
			<![CDATA[
				alter table t_pv_groupdiscount_temp drop column c_amount
				alter table t_pv_groupdiscount_temp add c_GroupDiscountIntervalID int 
				alter table t_pv_groupdiscount_temp alter column c_GroupDiscountIntervalID int not null
				alter table t_pv_groupdiscount_temp add c_GroupDiscountAmount numeric(18,6)
				alter table t_pv_groupdiscount_temp alter column c_GroupDiscountAmount numeric(18,6) not null
				alter table t_pv_accountcredit drop column c_auto 
				alter table t_pv_accountcreditreques drop column c_auto
				alter table t_pv_accountcreditreques alter column c_other nvarchar(255) null
				alter table t_pv_audioconfcall alter column c_ScheduledTimeGMTOffset numeric(18,6) not null
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

  		<query>
  		<query_tag>__CREATE_T_USAGE_SERVER_TABLE__</query_tag>
  		<query_string>
  			<![CDATA[
				CREATE TABLE t_usage_server
				(
  				n_adv_interval_creation INT NOT NULL,    -- number of days to create intervals in advance
  				dt_last_interval_creation DATETIME NULL  -- date of last interval creation
				)
  			]]>
  		</query_string>
  		<num_params>0</num_params>
		</query>

		  <query>
  		<query_tag>__INSERT_ROW_IN_T_USAGE_SERVER__</query_tag>
  		<query_string> 
  		<![CDATA[
			INSERT INTO t_usage_server VALUES (0, NULL)
  		]]>
  		</query_string>
  		<num_params>0</num_params>
		</query>

		<query>
      	    <query_tag>__DROP_CONSTRAINT_BASE_PROPS__</query_tag>
        	<query_string>
			<![CDATA[
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
					@name = ctu.CONSTRAINT_NAME 
					from information_schema.referential_constraints rc
				inner join information_schema.constraint_table_usage ctu
						on ctu.constraint_catalog = rc.constraint_catalog
						and ctu.constraint_schema = rc.constraint_schema
						and ctu.constraint_name = rc.constraint_name
				inner join information_schema.table_constraints tc
						on tc.constraint_catalog = rc.unique_constraint_catalog
						and tc.constraint_schema = rc.unique_constraint_schema
						and tc.constraint_name = rc.unique_constraint_name
				inner join information_schema.constraint_column_usage ccu
						on ctu.constraint_catalog = ccu.constraint_catalog
						and ctu.constraint_schema = ccu.constraint_schema
						and ctu.constraint_name = ccu.constraint_name
				where tc.TABLE_NAME = 'T_PRINCIPALS'
				and ctu.table_name='T_BASE_PROPS'

				select @stmt = N'alter table t_base_props drop constraint ' + @name
				exec sp_executesql @stmt
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

		<query>
      	    <query_tag>__UPDATE_MISC__</query_tag>
        	<query_string>
			<![CDATA[
				update t_object_history set n_version=0 where not exists (select 1 from t_pi where t_pi.id_pi=t_object_history.id_prop)
				update t_product_view_log set id_revision=0
				update t_usage_interval set tx_interval_status='O' where tx_interval_status='N'
				update t_usage_interval set tx_interval_status='C' where tx_interval_status='E'
				update t_usage_interval set tx_interval_status='C' where tx_interval_status='S'
				update t_av_internal set c_taxexempt='0' where c_taxexempt='N'
				update t_av_internal set c_taxexempt='1' where c_taxexempt='Y'
				update t_av_internal set c_billable='0' where c_billable='N'
				update t_av_internal set c_billable='1' where c_billable='Y'
				update t_av_internal set c_folder='0' where c_folder='N'
				update t_av_internal set c_folder='1' where c_folder='Y'
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>


		<query>
      	    <query_tag>__ALTER_MISC__</query_tag>
        	<query_string>
			<![CDATA[
				alter table t_av_internal alter column c_language int null
				alter table t_av_internal alter column c_currency varchar(10) null
				alter table t_usage_interval add constraint CK1_t_usage_interval CHECK (tx_interval_status IN ('O', 'C', 'H'))
				alter table t_acc_template alter column tx_name varchar(255) null
				alter table t_acc_template alter column tx_desc varchar(255) null
				alter table t_acc_usage alter column dt_crt datetime not null
				alter table t_account alter column dt_crt datetime not null
				alter table t_audit alter column dt_crt datetime not null
				alter table t_pv_addcharge alter column c_invoicecomment nvarchar(255) not null
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

	<query>
		<query_tag>__DROP_DEF_CONSTRAINT_T_ACC_USAGE__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_ACC_USAGE'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_acc_usage drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_ACC_TEMPLATE__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_ACC_TEMPLATE'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_acc_template drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>

	<query>
		<query_tag>__DROP_CONSTRAINT_T_NONRECURRING_EVENT_RUN__</query_tag>
	<query_string>
				declare @name varchar(1000)
				declare @stmt nvarchar(2000) 
				select @name = a.name from sysobjects a, sysobjects b,sysconstraints c
				where a.xtype='D'
				and b.xtype='U'
				and b.name='T_NONRECURRING_EVENT_RUN'
				and a.id=c.constid
				and b.id=c.id
				
				select @stmt = N'alter table t_nonrecurring_event_run drop constraint ' + @name
				exec sp_executesql @stmt
  </query_string>
   <num_params>0</num_params>
	</query>


		<query>
     	      	    <query_tag>__DROP_INDEX_CAPABILITY__</query_tag>
			<query_string>
			<![CDATA[
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select  
					@name = ind.name from sysindexes ind inner join sysobjects obj on ind.id=obj.id
					where indid=1 and obj.name='T_ENUM_CAPABILITY'
				select @stmt = N'drop index t_enum_capability.' + @name
				exec sp_executesql @stmt
				select  
					@name = ind.name from sysindexes ind inner join sysobjects obj on ind.id=obj.id
					where indid=1 and obj.name='T_DECIMAL_CAPABILITY'
				select @stmt = N'drop index t_decimal_capability.' + @name
				exec sp_executesql @stmt
				select  
					@name = ind.name from sysindexes ind inner join sysobjects obj on ind.id=obj.id
					where indid=1 and obj.name='T_PATH_CAPABILITY'
				select @stmt = N'drop index t_path_capability.' + @name
				exec sp_executesql @stmt
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>


		<query>
      	    <query_tag>__END_UPGRADE__</query_tag>
        	<query_string>
			<![CDATA[
				insert into t_principals values (400,'t_service_endpoint','id_se','GetServiceEndpointPropDefs',NULL)
				alter table t_pv_testpi add c_EndpointLogin nvarchar(255) null
				alter table t_pv_testpi add c_EndpointNamespace nvarchar(255) null
				alter table t_pv_testpi add c_CorporateLogin nvarchar(255) null
				alter table t_pv_testpi add c_CorporateNamespace nvarchar(255) null
				alter table t_enum_capability add constraint pk_t_enum_capability primary key(id_cap_instance)
				alter table t_decimal_capability add constraint pk_t_decimal_capability primary key(id_cap_instance)
				alter table t_path_capability add constraint pk_t_path_capability primary key(id_cap_instance)
				UPDATE t_sys_upgrade
				SET db_upgrade_status = 'C',
		    dt_end_db_upgrade = getdate()
				WHERE upgrade_id = (SELECT MAX(upgrade_id) FROM t_sys_upgrade)	
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>


	</mtconfigdata>
</queryfile>
     
