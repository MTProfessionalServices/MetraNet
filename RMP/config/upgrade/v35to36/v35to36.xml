<queryfile>
	<mtconfigdata>
	
	<filename>v35to36.xml</filename>	


	<query>
      	<query_tag>__START_UPGRADE__</query_tag>
        <query_string>
			<![CDATA[
				INSERT INTO t_sys_upgrade
				(target_db_version, dt_start_db_upgrade, db_upgrade_status)
				VALUES
				(3.6, getdate(), 'R')
       ]]>					
	 </query_string>
		<num_params>0</num_params>
	</query>

		<query>
	    <query_tag>__DROP_INDEX_USAGE__</query_tag>
 			<query_string>
			<![CDATA[
				DECLARE @name varchar(1000)
				declare @stmt nvarchar(2000)
				select @name = a.name from sysindexkeys c,sysindexes a,syscolumns b,sysobjects d
				where c.indid=a.indid
				and c.colid=b.colid
				and a.id=d.id
				and b.id=d.id
				and d.xtype='U'
				and c.id=d.id
				and b.name='ID_ACC'
				and d.name='T_ACC_USAGE'
				and keyno=1
				select @stmt = N'drop index t_acc_usage.' + @name
				exec sp_executesql @stmt
				select @name = a.name from sysindexkeys c,sysindexes a,syscolumns b,sysobjects d
				where c.indid=a.indid
				and c.colid=b.colid
				and a.id=d.id
				and b.id=d.id
				and d.xtype='U'
				and c.id=d.id
				and b.name='ID_PAYEE'
				and d.name='T_ACC_USAGE'
				and keyno=1
				select @stmt = N'drop index t_acc_usage.' + @name
				exec sp_executesql @stmt
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

		<query>
 	    <query_tag>__ALTER_TABLES__</query_tag>
     	<query_string>
			<![CDATA[
			alter table t_batch add	CONSTRAINT UK_3_t_batch CHECK (n_completed >= 0),
			CONSTRAINT UK_4_t_batch CHECK (n_failed >= 0),
			CONSTRAINT UK_5_t_batch CHECK (n_expected >= 0),
			CONSTRAINT UK_6_t_batch CHECK (n_metered >= 0)
			alter table t_recevent_inst_audit drop constraint CK1_t_recevent_inst_audit
			alter table  t_recevent_inst_audit add CONSTRAINT CK1_t_recevent_inst_audit CHECK (tx_action IN ('SubmitForExecution', 'SubmitForReversal',
      'Acknowledge', 'Unacknowledge','Cancel', 'MarkAsSucceeded', 'MarkAsFailed','MarkAsNotYetRun'))
			alter table t_language add n_order int,tx_description varchar(255)
     	]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

		<query>
 	    <query_tag>__UPDATE_LANGUAGE__</query_tag>
     	<query_string>
			<![CDATA[
				set nocount on
				declare @var1 int
				declare @i int
				set @i=20
				DECLARE c1 CURSOR
				FOR SELECT id_lang_code FROM t_language
				OPEN c1
				FETCH NEXT FROM c1 into @var1
				WHILE @@FETCH_STATUS = 0
				begin 
				if (@var1 = 840)
				update t_language set n_order = 10 where current of c1
				else
				update t_language set n_order = @i where current of c1
				set @i=@i+10
				FETCH NEXT FROM c1 into @var1
				end
				close c1
				deallocate c1
     	]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>
		
		<query>
 	    <query_tag>__NEW_INDEXES__</query_tag>
     	<query_string>
			<![CDATA[
				create clustered index idx_t_rerun_sessions on t_rerun_sessions(id_sess)
				CREATE  INDEX idx1_T_CAPABILITY_INSTANCE ON t_capability_instance(id_cap_instance)
				CREATE  INDEX idx2_T_CAPABILITY_INSTANCE ON t_capability_instance(id_parent_cap_instance)
				CREATE  INDEX parent_idx_t_acc_usage  on t_acc_usage(id_parent_sess)
				CREATE  INDEX idx_acc_ui_view_ind ON t_acc_usage(id_acc,id_usage_interval,id_view,id_pi_instance,id_parent_sess,id_se)
 				CREATE INDEX idx_payee_ind ON t_acc_usage(id_payee, dt_session, id_pi_instance, id_view, id_parent_sess, id_se)
     	]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

		<query>
 	    <query_tag>__NEW_INDEXED_VIEWS__</query_tag>
     	<query_string>
			<![CDATA[
create view t_vw_allrateschedules_po_noicb
(
id_po, 
id_paramtable, 
id_pi_instance,
id_pi_template,
id_sub, 
id_sched,
dt_mod,
rs_begintype, 
rs_beginoffset, 
rs_beginbase,
rs_endtype, 
rs_endoffset, 
rs_endbase, 
id_pricelist)
with SCHEMABINDING
as
select
tmInner.id_po as id_po,
tmInner.id_paramtable as id_paramtable,
tmInner.id_pi_instance as id_pi_instance,
tmInner.id_pi_template as id_pi_template,
NULL as id_sub,
rschedInner.id_sched as id_sched,
rschedInner.dt_mod as dt_mod,
teInner.n_begintype as rs_begintype, 
teInner.n_beginoffset as rs_beginoffset,
teInner.dt_start as rs_beginbase, 
teInner.n_endtype as rs_endtype,
teInner.n_endoffset as rs_endoffset,
teInner.dt_end as rs_endbase,
rschedInner.id_pricelist as id_pricelist
from
dbo.t_pl_map tmInner
INNER JOIN dbo.t_rsched rschedInner on 
 rschedInner.id_pricelist = tmInner.id_pricelist 
 AND rschedInner.id_pt =tmInner.id_paramtable 
 AND rschedInner.id_pi_template = tmInner.id_pi_template
INNER JOIN dbo.t_effectivedate teInner on teInner.id_eff_date = rschedInner.id_eff_date
where tmInner.id_sub is null
GO
create view t_vw_allrateschedules_po_icb
(
id_po, 
id_paramtable, 
id_pi_instance,
id_pi_template,
id_sub, 
id_sched,
dt_mod,
rs_begintype, 
rs_beginoffset, 
rs_beginbase,
rs_endtype, 
rs_endoffset, 
rs_endbase, 
id_pricelist)
with SCHEMABINDING
as
select
tmInner.id_po as id_po,
tmInner.id_paramtable as id_paramtable,
tmInner.id_pi_instance as id_pi_instance,
tmInner.id_pi_template as id_pi_template,
tmInner.id_sub as id_sub,
rschedInner.id_sched as id_sched,
rschedInner.dt_mod as dt_mod,
teInner.n_begintype as rs_begintype, 
teInner.n_beginoffset as rs_beginoffset,
teInner.dt_start as rs_beginbase, 
teInner.n_endtype as rs_endtype,
teInner.n_endoffset as rs_endoffset,
teInner.dt_end as rs_endbase,
rschedInner.id_pricelist as id_pricelist
from
dbo.t_pl_map tmInner
INNER JOIN dbo.t_rsched rschedInner on 
 rschedInner.id_pricelist = tmInner.id_pricelist 
 AND rschedInner.id_pt =tmInner.id_paramtable 
 AND rschedInner.id_pi_template = tmInner.id_pi_template
INNER JOIN dbo.t_effectivedate teInner on teInner.id_eff_date = rschedInner.id_eff_date
where tmInner.id_sub is not null
GO
CREATE UNIQUE CLUSTERED INDEX idx_t_vw_allrateschedules_po_icb ON t_vw_allrateschedules_po_icb (id_sched, id_pi_instance)
create index idx_t_vw_allrateschedules_po_icb_sub on t_vw_allrateschedules_po_icb (id_pi_template, id_sub, id_po)
CREATE UNIQUE CLUSTERED INDEX idx_t_vw_allrateschedules_po_noicb ON t_vw_allrateschedules_po_noicb (id_sched, id_pi_instance)
create index idx_t_vw_allrateschedules_po_noicb_pi on t_vw_allrateschedules_po_noicb (id_pi_template, id_po)
GO
CREATE STATISTICS Statistic_id_sub ON dbo.t_vw_allrateschedules_po_icb (id_sub)  
CREATE STATISTICS Statistic_id_po ON dbo.t_vw_allrateschedules_po_icb (id_po) 
CREATE STATISTICS Statistic_id_sub ON dbo.t_vw_allrateschedules_po_noicb (id_sub)  
CREATE STATISTICS Statistic_id_po ON dbo.t_vw_allrateschedules_po_noicb (id_po) 
     	]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

	<query>
      	<query_tag>__CREATE_INDEXED_VIEW_STATISTICS__</query_tag>
        <query_string><![CDATA[
				declare @sql varchar(8000)
				set nocount on
				select @sql = 'if not exists (select 1 from sysindexkeys c,sysindexes a,syscolumns b,sysobjects d
				where c.indid=a.indid
				and c.colid=b.colid
				and a.id=d.id
				and b.id=d.id
				and c.id=d.id
				and d.name=''t_vw_allrateschedules_po''
				and b.name=''id_sub'' and keyno=1) CREATE STATISTICS Statistic_id_sub ON dbo.t_vw_allrateschedules_po (id_sub)'
				execute (@sql) 
				select @sql = 'if not exists (select 1 from sysindexkeys c,sysindexes a,syscolumns b,sysobjects d
				where c.indid=a.indid
				and c.colid=b.colid
				and a.id=d.id
				and b.id=d.id
				and c.id=d.id
				and d.name=''t_vw_allrateschedules_po''
				and b.name=''id_po'' and keyno=1) CREATE STATISTICS Statistic_id_po ON dbo.t_vw_allrateschedules_po (id_po)'
				execute (@sql) 
				select @sql = 'if not exists (select 1 from sysindexkeys c,sysindexes a,syscolumns b,sysobjects d
				where c.indid=a.indid
				and c.colid=b.colid
				and a.id=d.id
				and b.id=d.id
				and c.id=d.id
				and d.name=''t_vw_allrateschedules_pl''
				and b.name=''id_pricelist'' and keyno=1) CREATE STATISTICS Statistic_id_pricelist ON dbo.t_vw_allrateschedules_pl (id_pricelist)'
				execute (@sql) 
				select @sql = 'if not exists (select 1 from sysindexkeys c,sysindexes a,syscolumns b,sysobjects d
				where c.indid=a.indid
				and c.colid=b.colid
				and a.id=d.id
				and b.id=d.id
				and c.id=d.id
				and d.name=''t_vw_i_acc_mapper''
				and b.name=''id_enum_data'' and keyno=1) CREATE STATISTICS Statistic_id_enum_data ON dbo.t_vw_i_acc_mapper (id_enum_data)'
				execute (@sql) 
				select @sql = 'if not exists (select 1 from sysindexkeys c,sysindexes a,syscolumns b,sysobjects d
				where c.indid=a.indid
				and c.colid=b.colid
				and a.id=d.id
				and b.id=d.id
				and c.id=d.id
				and d.name=''t_vw_i_acc_mapper''
				and b.name=''tx_typ_space'' and keyno=1) CREATE STATISTICS Statistic_tx_typ_space ON dbo.t_vw_i_acc_mapper (tx_typ_space)'
				execute (@sql)
		]]>
	 </query_string>
		<num_params>0</num_params>
	</query>
	
	 		<query>
			<query_tag>__CREATE_T_DM_ACCOUNT__</query_tag>
			<query_string>
			<![CDATA[
					create table t_dm_account
					(id_dm_acc integer identity(1000,1),
					id_acc int,
					vt_start datetime,
					vt_end datetime)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

 		<query>
			<query_tag>__INDEX_T_DM_ACCOUNT__</query_tag>
			<query_string>
			<![CDATA[
				create clustered index idx_dm_account on t_dm_account(id_acc,id_dm_acc)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

 		<query>
			<query_tag>__CREATE_T_DM_ACCOUNT_ANCESTOR__</query_tag>
			<query_string>
			<![CDATA[
					create table t_dm_account_ancestor
					(id_dm_ancestor integer,
					id_dm_descendent integer,
					num_generations integer)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

 		<query>
			<query_tag>__INDEX_T_DM_ACCOUNT_ANCESTOR__</query_tag>
			<query_string>
			<![CDATA[
				create clustered index idx_dm_account_ancestor on t_dm_account_ancestor(id_dm_ancestor, id_dm_descendent)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>
 		
 		<query>
			<query_tag>__CREATE_T_DM_PAYER_INTERVAL__</query_tag>
			<query_string>
			<![CDATA[
	CREATE TABLE [dbo].[t_dm_payer_interval] (
	[id_acc] [int] NOT NULL ,
	[id_dm_acc] [int] NOT NULL ,
	[id_usage_interval] [int] NOT NULL ,
	[id_prod] [int] NULL ,
	[id_view] [int] NOT NULL ,
	[id_pi_instance] [int] NULL ,
	[id_pi_template] [int] NULL ,
	[am_currency] [varchar] (3) NOT NULL ,
	[id_se] [int] NULL ,
	[TotalAmount] [numeric](38, 6) NULL ,
	[TotalFederalTax] [numeric](38, 6) NULL ,
	[TotalStateTax] [numeric](38, 6) NULL ,
	[TotalTax] [numeric](38, 6) NULL ,
	[PrebillAdjustmentAmount] [numeric](38, 6) NULL ,
	[PostbillAdjustmentAmount] [numeric](38, 6) NULL ,
	[PrebillAdjustedAmount] [numeric](38, 6) NULL ,
	[PostbillAdjustedAmount] [numeric](38, 6) NULL ,
	[NumPrebillAdjustments] [int] NULL ,
	[NumPostbillAdjustments] [int] NULL ,
	[NumTransactions] [int] NULL)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

 		<query>
			<query_tag>__INDEX1_T_DM_PAYER_INTERVAL__</query_tag>
			<query_string>
			<![CDATA[
					create clustered index idx_payer_interval on t_dm_payer_interval(id_acc,id_usage_interval,id_dm_acc)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

 		<query>
			<query_tag>__INDEX2_T_DM_PAYER_INTERVAL__</query_tag>
			<query_string>
			<![CDATA[
					create index idx_se_payer_interval on t_dm_payer_interval(id_se)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

 		<query>
			<query_tag>__CREATE_T_DM_PAYEE_SESSION__</query_tag>
			<query_string>
			<![CDATA[
  CREATE TABLE [dbo].[t_dm_payee_session] (
	[id_dm_acc] [int] NOT NULL ,
	[id_prod] [int] NULL ,
	[id_view] [int] NOT NULL ,
	[id_pi_template] [int] NULL ,
	[id_pi_instance] [int] NULL ,
	[am_currency] [varchar] (3),
	[id_se] [int] NULL ,
	[dt_session] [datetime] NULL ,
	[TotalAmount] [numeric](38, 6) NULL ,
	[TotalFederalTax] [numeric](38, 6) NULL ,
	[TotalStateTax] [numeric](38, 6) NULL ,
	[TotalTax] [numeric](38, 6) NULL ,
	[PrebillAdjustmentAmount] [numeric](38, 6) NULL ,
	[PostbillAdjustmentAmount] [numeric](38, 6) NULL ,
	[PrebillAdjustedAmount] [numeric](38, 6) NULL ,
	[PostbillAdjustedAmount] [numeric](38, 6) NULL ,
	[NumPrebillAdjustments] [int] NULL ,
	[NumPostbillAdjustments] [int] NULL ,
	[NumTransactions] [int] NULL)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

	 		<query>
			<query_tag>__INDEX_T_DM_PAYEE_SESSION__</query_tag>
			<query_string>
			<![CDATA[
				create clustered index idx_payee_session on t_dm_payee_session(id_dm_acc,dt_session)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

 		<query>
			<query_tag>__CREATE_T_DM_SESS__</query_tag>
			<query_string>
			<![CDATA[
				create table t_dm_sess(id_sess int)
			]]>
			</query_string>
			<num_params>0</num_params>
		</query>

    <query>
      <query_tag>__CREATE_ADJUSTMENT_SUMMARY_DATAMART_VIEW__</query_tag>
      <query_string>
        <![CDATA[
				CREATE view VW_ADJUSTMENT_SUMMARY_DATAMART as
        select
          ajtrx.id_acc_payer id_acc,
          ajtrx.id_usage_interval,
          ajtrx.am_currency,
          ajui.dt_start,
          ajui.dt_end,
        --add info about adjustments
        SUM (CASE WHEN ajtrx.n_adjustmenttype=0  THEN ajtrx.AdjustmentAmount ELSE 0 END)  AS PrebillAdjustmentAmount
        ,SUM (CASE WHEN ajtrx.n_adjustmenttype=1  THEN ajtrx.AdjustmentAmount ELSE 0 END)  AS PostbillAdjustmentAmount
        ,SUM (CASE WHEN ajtrx.n_adjustmenttype=1  THEN 1 ELSE 0 END)  AS NumPostbillAdjustments
        ,SUM (CASE WHEN ajtrx.n_adjustmenttype=0  THEN 1 ELSE 0 END)  AS NumPrebillAdjustments
        FROM t_acc_usage au
        INNER JOIN t_adjustment_transaction ajtrx ON au.id_sess = ajtrx.id_sess
        INNER JOIN t_usage_interval ajui on ajui.id_interval = ajtrx.id_usage_interval
        WHERE  ajtrx.c_status = 'A'
        AND au.id_sess <=(select id_sess from t_dm_sess)
        GROUP BY
          ajtrx.id_acc_payer,
          ajtrx.id_usage_interval,
          ajtrx.am_currency,
          ajtrx.c_status,
          ajui.dt_start,
          ajui.dt_end
				]]> 
        </query_string>
      <num_params>0</num_params>
    </query>

		<query>
   	    <query_tag>__RENAME_ACCOUNTCREDITREQUES__</query_tag>
      	<query_string>
			<![CDATA[
				]]>
				sp_rename 't_pv_accountcreditreques.c_reason','c_reason_1'
				alter table t_pv_accountcreditreques add c_reason int
        </query_string>
      <num_params>0</num_params>
    </query>

		<query>
   	    <query_tag>__RENAME_ACCOUNTCREDIT__</query_tag>
      	<query_string>
			<![CDATA[
				]]>
				sp_rename 't_pv_accountcredit.c_reason','c_reason_1'
				alter table t_pv_accountcredit add c_reason int
        </query_string>
      <num_params>0</num_params>
    </query>
    
		<query>
      	    <query_tag>__UPDATE_ACCOUNTCREDIT__</query_tag>
        	<query_string>
			<![CDATA[
				update t_pv_accountcreditreques set c_reason = id_enum_data
				from t_pv_accountcreditreques inner join t_enum_data on 
				reverse(substring(reverse(nm_enum_data),1,charindex('/',reverse(nm_enum_data))-1))=c_reason_1
				where nm_enum_data like 'metratech.com/SubscriberCreditAccountRequestReason/%' 
				update t_pv_accountcredit set c_reason = id_enum_data
				from t_pv_accountcredit inner join t_enum_data on 
				reverse(substring(reverse(nm_enum_data),1,charindex('/',reverse(nm_enum_data))-1))=c_reason_1
				where nm_enum_data like 'metratech.com/SubscriberCreditAccountRequestReason/%' 
				]]> 
        </query_string>
      <num_params>0</num_params>
    </query>

		<query>
      	    <query_tag>__ALTER_ACCOUNTCREDIT__</query_tag>
        	<query_string>
			<![CDATA[
				alter table t_pv_accountcreditreques drop column c_reason_1
				alter table t_pv_accountcreditreques alter column c_reason int not null
				alter table t_pv_accountcredit drop column c_reason_1
				alter table t_pv_accountcredit alter column c_reason int not null
				]]> 
        </query_string>
      <num_params>0</num_params>
    </query>

		<query>
      	    <query_tag>__END_UPGRADE__</query_tag>
        	<query_string>
			<![CDATA[
				UPDATE t_sys_upgrade
				SET db_upgrade_status = 'C',
		    dt_end_db_upgrade = getdate()
				WHERE upgrade_id = (SELECT MAX(upgrade_id) FROM t_sys_upgrade)	
		]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>

		<query>
 	    <query_tag>__DROP_TMP_TABLES__</query_tag>
     	<query_string>
			<![CDATA[
				set nocount on
				declare @var1 varchar(1000)
				DECLARE c1 CURSOR
				FOR select table_name from information_schema.tables
				where table_type='BASE TABLE'
				and table_name like 'tmp%'
				OPEN c1
				FETCH NEXT FROM c1 into @var1
				WHILE @@FETCH_STATUS = 0
				begin 
				execute ('drop table ' + @var1)
				FETCH NEXT FROM c1 into @var1
				end
				close c1
				deallocate c1
     	]]>
			</query_string>
			<num_params>0</num_params>  <!-- not used -->
		</query>
		
	</mtconfigdata>
</queryfile>
     
