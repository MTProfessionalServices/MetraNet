Using SSL with the Java SDK

Download Sun's Java Secure Socket Extension (JSSE) 1.0.2 API

You'll find it at:

  http://www.sun.com/products/jsse

  Download the package, follow the instructions on installing it for
  your platform.  Be sure jar files:

    jcert.jar
    jnet.jar
    jsse.jar

  are in your CLASSPATH.

MetraTech provides a sample:

  com\metratech\sdk\samples\SSLMeter.java

You'll need the following lines in your program before instantiating the
MTHTTPConnection object:

  Security.addProvider(new sun.security.provider.Sun());
  Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
  java.lang.System.setProperty("java.protocol.handler.pkgs",
                               "com.sun.net.ssl.internal.www.protocol");

These calls register a handler for the "https" URL scheme.  Now when
you create an MTHTTPConnection object, you can specify "https" for the
URL scheme.  Be sure to also specify the port that your server is
using for secure connections -- most likely
MTHTTPConnection.DEFAULT_HTTPS_PORT.

  new MTHTTPConnection("TEST", new URL("https",
                                       host,
                                       MTHTTPConnection.DEFAULT_HTTPS_PORT,
                                       MTHTTPConnection.DEFAULT_LISTENER));

That's all it takes!

--------
Testing with an untrusted certificate
--------

In order to test against a working server, you need to configure the
server to support SSL.

1. Ask around -- see if anyone has the Option Pack Certificate Server
installed.  If so, you can avoid installing it yourself.

2. If you can't find anyone, install the Certificate Server from the
NT Option Pack.  Make sure it works.  If it doesn't you're SOL. 

3. Go to the IIS Console and select the Default Web Site.  Bring up
the Key Manager (it's on the tool bar).  Select WWW, right click, and
Create New Key.  Tell it to Put the request in a file that you will
send to an authority.

Go through the dialogues, typing your information.

Be sure to type your machine name for the Common Name.  If you're
on machine "dyoung" type "dyoung."  Don't type "www.metratech.org" as
they seem to suggest.

LEAVE THE KEY MANAGER UP!!

Now send the file you've created to the person running the Certificate
Server.  Ask them to sign it.  When they mail back the blob,
right-click your key in the Key Manger and tell it to "Install Key
Certificate."  Give it the location of the file you received from your
buddy.

4.  Test out your server.  You should be able to open
"https://localhost/msix/listener.dll"

5.  If you don't tell Java about your new cert, it will complain that
it is a "untrusted server cert chain."  Clue it in with:

  cd to $(JAVA_HOME)\jre\lib\security
  $(JAVA_HOME)\bin\keytool -import -file $$$YOUR SIGNED CERT FILE$$$
     -alias iistrust -keystore .\woopa

(6) Add the following line to SSLMeter.java (or whatever other thing
you are going to test with) after the other
java.lang.System.setProperty call:

  java.lang.System.setProperty("javax.net.ssl.trustStore",
                               "d:\\jdk1.2.2\\jre\\lib\\security\\woopa");

                                      ^^^^ Your JAVA_HOME

Remake SSLMeter.class.

If all went well, the Java client should now trust your cert.  Buena
suerte!

--------
Using other JSSE Implementations
--------

The Java SDK should be compatible with any JSSE-compliant SSL
implementation.  Simply follow the vendor's instructions for
installing their JSSE classes, be sure the classes are in your
CLASSPATH, and follow their vendor-specific instructions for adding
their HTTPS security provider.

Release Notes -- upgrading from Metering SDK V. 3.0

Two constructors:

  public MTHTTPConnection (String name, String host, int port) throws IOException
  public MTHTTPConnection (String name, String host) throws IOException

Have been removed.  Use:

  public MTHTTPConnection (String name, URL url) throws IOException

instead.  Create a URL object as described above.
