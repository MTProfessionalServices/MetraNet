using System;
using System.Collections.Generic;

using MetraTech.ActivityServices.Common;
using MetraTech.BusinessEntity.Core.Model;
using MetraTech.BusinessEntity.DataAccess.Metadata;
using MetraTech.BusinessEntity.DataAccess.Persistence;
using MetraTech.BusinessEntity.Service.ClientProxies;
using MetraTech.DomainModel.Enums.Account.Metratech_com_accountcreation;
using NUnit.Framework;

using Core.UI;

//
// To run the this test fixture:
// nunit-console /fixture:MetraTech.BusinessEntity.Test.Service.RepositoryServiceTest /assembly:O:\debug\bin\MetraTech.BusinessEntity.Test.dll
//
namespace MetraTech.BusinessEntity.Test.Service
{
  [TestFixture]
  public class RepositoryServiceTest
  {
    [TestFixtureSetUp]
    public void Setup()
    {
    }

    [Test]
    [Category("SaveLoadAndUpdateSite")]
    public void SaveLoadAndUpdateSite()
    {
      var random = new Random();

      // Create a new Site
      var site = new Site();
      site.SiteBusinessKey.SiteName = "Site - " + random.Next();
      site.Culture = "abcde";

      // Save it
      var saveClient = new RepositoryService_SaveInstance_Client();
      saveClient.UserName = userName;
      saveClient.Password = password;

      saveClient.InOut_dataObject = site;
      saveClient.Invoke();

      // Load the site
      var loadClient = new RepositoryService_LoadInstance_Client();
      loadClient.UserName = userName;
      loadClient.Password = password;

      // Set the entity name. This is the namespace qualified type name.
      loadClient.In_entityName = site.GetType().FullName;

      // Specify the Id of the instance to load.
      // This Id was generated by the backend when the site instance was saved.
      loadClient.In_id = saveClient.InOut_dataObject.Id;

      loadClient.Invoke();

      // Get the output from the loadClient
      var loadedSite = loadClient.Out_dataObject as Site;
      Assert.IsNotNull(loadedSite);
      Assert.AreEqual(loadedSite.SiteBusinessKey.SiteName, site.SiteBusinessKey.SiteName);

      // Update it
      loadedSite.Description = "Site Description";
      loadedSite.LogoImage = "Some image";

      // Save it again
      saveClient.InOut_dataObject = loadedSite;
      saveClient.Invoke();
    }

    [Test]
    [Category("SaveLoadAndUpdateSiteAndDashboard")]
    public void SaveLoadAndUpdateSiteAndDashboard()
    {
      var random = new Random();

      // Create a new Site
      var site = new Site();
      site.SiteBusinessKey.SiteName = "Site - " + random.Next();
      site.Culture = "culture";

      // Save it
      var saveClient = new RepositoryService_SaveInstance_Client();
      saveClient.UserName = userName;
      saveClient.Password = password;

      saveClient.InOut_dataObject = site;
      saveClient.Invoke();

      // Create the Dashboard for the Site
      var dashboard = new Dashboard();
      dashboard.DashboardBusinessKey.Name = "Dashboard - " + random.Next();
      dashboard.Description = "Some Dashboard";

      var createInstanceForClient = new RepositoryService_CreateInstanceFor_Client();
      createInstanceForClient.UserName = userName;
      createInstanceForClient.Password = password;
      createInstanceForClient.In_forEntityName = site.GetType().FullName;
      createInstanceForClient.In_forEntityId = saveClient.InOut_dataObject.Id;
      createInstanceForClient.InOut_dataObject = dashboard;
      createInstanceForClient.Invoke();


      // Load the Dashboard
      var loadClient = new RepositoryService_LoadInstance_Client();
      loadClient.UserName = userName;
      loadClient.Password = password;

      // Set the entity name. This is the namespace qualified type name.
      loadClient.In_entityName = dashboard.GetType().FullName;

      // Specify the Id of the instance to load.
      // This Id was generated by the backend when the site instance was saved.
      loadClient.In_id = createInstanceForClient.InOut_dataObject.Id;

      loadClient.Invoke();

      // Get the output from the loadClient
      var loadedDashboard = loadClient.Out_dataObject as Dashboard;
      Assert.IsNotNull(loadedDashboard);
      Assert.AreEqual(loadedDashboard.DashboardBusinessKey.Name, dashboard.DashboardBusinessKey.Name);

      // Update it
      loadedDashboard.Title = "Title";

      // Save it again
      saveClient.InOut_dataObject = loadedDashboard;
      saveClient.Invoke();
    }

    [Test]
    [Category("CreateSelfRelationship")]
    public void CreateSelfRelationship()
    {
      Random random = new Random();
      // Create a new Site
      var parentSite = new Site();
      parentSite.SiteBusinessKey.SiteName = "Site - " + random.Next();
      parentSite.Culture = "parent culture";

      // Save it
      var saveClient = new RepositoryService_SaveInstance_Client();
      saveClient.UserName = userName;
      saveClient.Password = password;

      saveClient.InOut_dataObject = parentSite;
      saveClient.Invoke();

      // Create a child Site
      var childSite = new Site();
      childSite.SiteBusinessKey.SiteName = "Site - " + random.Next();
      childSite.Culture = "child culture";

      // Create parent/child relationship and save
      var createChildClient = new RepositoryService_CreateChild_Client();
      createChildClient.UserName = userName;
      createChildClient.Password = password;
      createChildClient.In_parentId = saveClient.InOut_dataObject.Id;
      createChildClient.InOut_child = childSite;
      createChildClient.Invoke();

      // Load child site for parent site
      var loadChildrenClient = new RepositoryService_LoadChildren_Client();
      loadChildrenClient.UserName = userName;
      loadChildrenClient.Password = password;
      loadChildrenClient.In_parentEntityName = parentSite.GetType().FullName;
      loadChildrenClient.In_parentId = saveClient.InOut_dataObject.Id;
      loadChildrenClient.InOut_mtList = new MTList<DataObject>();
      loadChildrenClient.Invoke();

    }

    [Test]
    [Category("LoadConnectedInstances")]
    public void LoadConnectedInstances()
    {
      var metadataAccess = MetadataAccess.Instance;
      var standardRepository = RepositoryAccess.Instance.GetRepository();
      MTList<DataObject> dataObjects =
        standardRepository.LoadInstancesFor
          ("Core.UI.Parameter",
           "Core.UI.Dashboard",
           new Guid("61448645-9192-4C06-A299-9D5100DCE4B7"),
           new MTList<DataObject>());
    }
    #region Data
   
    private static string userName = "su";
    private static string password = "su123";
    #endregion
  }
}
