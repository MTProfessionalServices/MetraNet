using System;
using MetraTech.DomainModel.Enums.Account.Metratech_com_accountcreation;
using MetraTech.DomainModel.Enums.Core.Global;
using NUnit.Framework;

//
// To run the this test fixture:
// nunit-console /fixture:MetraTech.Core.Workflows.Test.WorkflowTests /assembly:O:\debug\bin\MetraTech.Core.Workflows.Test.dll
//
// Prior to running these test you must make sure that either the ActivityServices host
// is running or run the ConsoleHost.exe is running.
//
// Classes used here to access the workflows are generated by MASClientProxyHook.exe
// http://metrawiki/wiki/index.php?title=Design_Notes#Directory_and_assembly_structure
// Therefore, MASClientProxyHook.exe must be run first for each extension with 
// workflows that will be tested by these nunit tests.
// e.g. reference: MetraTech.Account.ClientProxies.dll is generated using the hook.
//
namespace MetraTech.Core.Workflows.Test
{
  using MetraTech.Test;
  using MetraTech.DomainModel.Common;
  using MetraTech.Account.ClientProxies;
  using System.ServiceModel;
  using MetraTech.ActivityServices.Common;
  using MetraTech.DomainModel.AccountTypes;
  using MetraTech.DomainModel.Enums;
  using MetraTech.DomainModel.BaseTypes;

  [TestFixture]
  public class WorkflowTests
  {
    [TestFixtureSetUp]
    public void Setup()
    {
    }

    [TestFixtureTearDown]
    public void TearDown()
    {
    }

    public void CreateAccountWorkflowTest()
    {
        AccountCreationClient acc = null;
      try
      {
        TestLibrary.Trace("Running CreateAccountWorkflowTest.");

        // Create an instance of account object.
        CoreSubscriber account = new CoreSubscriber();
        account.DayOfWeek = DayOfTheWeek.Monday;
        account.AccountStatus = AccountStatus.Active;

        // Create the account.
        acc = new AccountCreationClient();
        Account tmp = account as Account;
        acc.AddAccount(ref tmp, false);
        
        //xxx TODO: Check if the Account is created.  This should most likely fail.
        //xxx Use load account
      }
      catch(FaultException<MASBasicFaultDetail> fe)
      {
        TestLibrary.Trace("Unable to add account, error: " + fe.Detail.ErrorMessages[0]);
        Assert.Fail();
      }
      catch (Exception e)
      {
        Console.WriteLine(e.Message);
        throw e;
      }
      finally
      {
          if (acc != null)
          {
              if (acc.State == CommunicationState.Opened)
              {
                  acc.Close();
              }
              else
              {
                  acc.Abort();
              }
          }
      }
    }

    public void CreateAccountWorkflowWithInternalViewTest()
    {
        AccountCreationClient acc = null;
      try
      {
        TestLibrary.Trace("Running CreateAccountWorkflowWithInternalViewTest.");

        // Create one internal view.
        InternalView internalView = new InternalView();
        internalView.Billable = true;
        internalView.Language = LanguageCode.FR;
        internalView.SecurityQuestion = SecurityQuestion.MothersMaidenName;
        internalView.SecurityAnswer = "6B334A16E0474289BEED62A16ED887A4";
        // Using unique identifier to be able to find entry in database.

        // Create an instance of account object.
        CoreSubscriber account = new CoreSubscriber();
        account.DayOfWeek = DayOfTheWeek.Monday;
        account.AccountStatus = AccountStatus.Active;
        account.Internal = internalView;

        // Create the account.
        acc = new AccountCreationClient();
        Account tmp = account as Account;
        acc.AddAccount(ref tmp, false);

        //xxx TODO: Check if the Account and internal entry is in the database.
      }
      catch (FaultException<MASBasicFaultDetail> fe)
      {
        TestLibrary.Trace("Unable to add account, error: " + fe.Detail.ErrorMessages[0]);
        Assert.Fail();
      }
      catch (Exception e)
      {
        Console.WriteLine(e.Message);
        throw e;
      }
      finally
      {
          if (acc != null)
          {
              if (acc.State == CommunicationState.Opened)
              {
                  acc.Close();
              }
              else
              {
                  acc.Abort();
              }
          }
      }
    }

    /// <summary>
    /// Test CreateAccount workflow with a single account.
    /// </summary>
    [Test]
    public void CreateAccountWorkflowWithInternalAndContactsTest()
    {
        AccountCreationClient acc = null;
      try
      {
        TestLibrary.Trace("Running CreateAccountWorkflowWithInternalAndContactsTest.");

        // Create one contact view.
        ContactView contactView1 = new ContactView();
        contactView1.ContactType = ContactType.Bill_To;
        contactView1.FirstName = "John";
        contactView1.LastName = "BD915D82905440bc99F302E80AC048B3";
        // Using unique identifier to be able to find entry in database.

        // Create one contact view.
        ContactView contactView2 = new ContactView();
        contactView2.ContactType = ContactType.Bill_To;
        contactView2.FirstName = "John2";
        contactView2.LastName = "BD915D82905440bc99F302E80AC048B4";
        // Using unique identifier to be able to find entry in database.

        // Create one internal view.
        InternalView internalView = new InternalView();
        internalView.Billable = true;
        internalView.Language = LanguageCode.FR;
        internalView.SecurityQuestion = SecurityQuestion.MothersMaidenName;
        internalView.SecurityAnswer = "BD915D82905440bc99F302E80AC048B5";
        // Using unique identifier to be able to find entry in database.

        // Create an instance of account object.
        CoreSubscriber account = new CoreSubscriber();
        account.DayOfWeek = DayOfTheWeek.Monday;
        account.AccountStatus = AccountStatus.Active;
        account.LDAP.Add(contactView1);
        account.LDAP.Add(contactView2);
        account.Internal = internalView;

        // Create the account.
        acc = new AccountCreationClient();
        Account tmp = account as Account;
        acc.AddAccount(ref tmp, false);

        //xxx TODO: Check if the Account with views was added.
      }
      catch (FaultException<MASBasicFaultDetail> fe)
      {
        TestLibrary.Trace("Unable to add account, error: " + fe.Detail.ErrorMessages[0]);
        Assert.Fail();
      }
      catch (Exception e)
      {
        Console.WriteLine(e.Message);
        throw e;
      }
      finally
      {
          if (acc != null)
          {
              if (acc.State == CommunicationState.Opened)
              {
                  acc.Close();
              }
              else
              {
                  acc.Abort();
              }
          }
      }
    }
  
    //xxx TODO:
    // - Test account update
    // - Test account update with views
    // - Test updating a view only
    // - Test account update with time based data changed.
  }
}

// EOF