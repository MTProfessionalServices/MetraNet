<SCRIPT LANGUAGE="VBScript" RUNAT="Server"> ' This comment fixes the formating issue: <%

' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
' MAM 3.5
' In MAM 3.5 we load the dictionary not from the global.asa but from default.asp
' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Option Explicit
CONST MDM_CACHE_SESSION_NAME     = "MDM.CACHE"
CONST DEFAULT_LANGUAGE = "en-us"
'-----------------------
Function FolderExists(fldr)
   Dim fso
   Set fso = CreateObject("Scripting.FileSystemObject")
      FolderExists = fso.FolderExists(fldr)
End Function
'
' ---------------------------------------------------------------------------------------------------------------------------------------
' FUNCTION 		: Application_OnStart
' PARAMETERS	:
' DESCRIPTION :
' RETURNS		  :
Sub Application_OnStart

    'Set Application("cache_enumconfig") = server.CreateObject("Metratech.MTEnumConfig.1")
    'Enable Performance Tests
    'Application("PERF_GENERATE_RESULTS") = false
    
    'If performance testing, create and initialize the performance manager
    'if Application("PERF_GENERATE_RESULTS") then
    '  Set Application("PERF_TIMER_MANAGER") = server.CreateObject("MTUIPerfMon.TimerManager")
    '  
    '  'Call Initialize(AppName, UniqueID)
    '  '  AppName corresponds with the entry in [dev]\config\UIPerfMon\UIPerfMonConfig.xml
    '  '  UniqueID identifies this set of results -- Date & " " Time
    '  Call Application("PERF_TIMER_MANAGER").Initialize("MAM", Date & " " & Time)
    'end if
    
    'Create the endpoint manager object
End Sub

' ---------------------------------------------------------------------------------------------------------------------------------------
' FUNCTION 		: Application_OnEnd
' PARAMETERS	:
' DESCRIPTION :
' RETURNS		  :
Sub Application_OnEnd
'   Call Application("PERF_TIMER_MANAGER").WriteOutputXMLFile()
End Sub
'-----------------------
Function FolderExists(fldr)
   Dim fso
   Set fso = CreateObject("Scripting.FileSystemObject")
      FolderExists = fso.FolderExists(fldr)
End Function
' ---------------------------------------------------------------------------------------------------------------------------------------
' FUNCTION 		: Session_OnStart
' PARAMETERS	:
' DESCRIPTION :
' RETURNS		  :
Sub Session_OnStart

 '   if Application("PERF_GENERATE_RESULTS") then
  '    Set session("PERF_TIMER_SCRIPT_TIMER") =  server.CreateObject("MTScriptTimer.ASPTimer")
'
 '     'Initialize timer XML for this session, pass a unique ID
  '    'Date & " " & Time & "[" & sessionID & "]"
   '   Call session("PERF_TIMER_SCRIPT_TIMER").Init(Application("PERF_TIMER_MANAGER").InitializeTimerXML(Date & " " & Time & " [" & Session.SessionID & "]"))
    'end if
     if(instr(1, request.ServerVariables("QUERY_STRING"), "language%3d")=0) then
      Dim userLocale
      userLocale = request.ServerVariables("HTTP_ACCEPT_LANGUAGE")
      dim Languages
      if (not(IsNull(userLocale)) and not(IsEmpty(userLocale))) then
          Languages = Split(userLocale, ",", -1)
          dim L
          L = Languages(0)
          if(IsEmpty(L) or IsNull(L)) then L = DEFAULT_LANGUAGE end if
            Session("PAGE_LANGUAGE")           = L
      else
            Session("PAGE_LANGUAGE")           = DEFAULT_LANGUAGE
      end if 
    else
      dim lang
      lang = mid(Request.ServerVariables("QUERY_STRING"), instr(1, request.ServerVariables("QUERY_STRING"), "language%3d")+11, 2)
      'if(not FolderExists(APP_FOLDER & "\custom\Localized\" & lang)) then
       ' lang = DEFAULT_LANGUAGE
     ' end if
      if (instr(1, lang, "en") <> 0) then
        lang = "en-US"
     end if
      Session("PAGE_LANGUAGE") = lang
    end if


	  Dim objMAM      ' As Object
    DIM APP_FOLDER  ' As String
    
    ' This help the mdm to know when the session time out
    Session("mdm_SESSION_ID")     = "MDM_SESSION_ID=" & Now()

    ' Setup application start page
    Application("startPage")      = mid(request.ServerVariables("SCRIPT_NAME"), 1, instr(2, request.ServerVariables("SCRIPT_NAME"), "/") - 1) ' "
  
    ' Setup application virtual directory path (this may be different than the start page)
    Application("APP_HTTP_PATH")  = mid(request.ServerVariables("SCRIPT_NAME"), 1, instr(2, request.ServerVariables("SCRIPT_NAME"), "/") - 1) ' "
    
    APP_FOLDER                    = server.MapPath(application("startPage"))   ' "

  	Set objMAM                    = Server.CreateObject("MTMAM.MAM")    ' "
    Session("mdm_APP_FOLDER")     = APP_FOLDER ' Store the application folder for the mdm

    if(instr(1, request.ServerVariables("QUERY_STRING"), "language%3d")=0) then      
      Session("PAGE_LANGUAGE")    = DEFAULT_LANGUAGE
    else
      dim lang
      lang = mid(Request.ServerVariables("QUERY_STRING"), instr(1, request.ServerVariables("QUERY_STRING"), "language%3d")+11, 5)
      if(not FolderExists(APP_FOLDER & "\default\Localized\" & lang)) then
        lang = DEFAULT_LANGUAGE
      end if
      Session("PAGE_LANGUAGE") = lang
    end if

    
    ' It is required to load the dictionary before we initialize the MAM componant.
    objMAM.Language= Session("PAGE_LANGUAGE")
    mam_LoadDictionary objMAM, Session("PAGE_LANGUAGE") 

    
	  objMAM.Initialize APP_FOLDER
    '
    ' Store object and string in the session()
    '
    
    Set Session("objMAM")                       = objMAM                    ' Store the MAM Object
    Set Session(mdm_CACHE_SESSION_NAME)         = objMAM.Cache              ' Store the cache object    
    Set Session("mdm_LOCALIZATION_DICTIONARY")  = objMAM.Dictionary         ' Store the dictionary object for the mdm    
    
    objMAM.CSR("Language").Value                = Session("PAGE_LANGUAGE") ' Default value before we log-in

    'Set the server locale
    dim sLCID
    sLCID = Session("mdm_LOCALIZATION_DICTIONARY").Item("SESSION_LCID")
    if len(rtrim(ltrim(sLCID)))>0 then
      Session.LCID = CLng(sLCID)
    end if

    objMAM.Menu.MenuWithGraphics = False ' Turn on FANCY graphical memu 

    objMAM.Log "MetraCare Initialized..."
    stop
End Sub

' TODO:  WE WANT TO INCLUDE THIS FUNCTION FROM MAMLIBRARY - SOMEDAY
PUBLIC FUNCTION mam_LoadDictionary(objMAM,strLanguage) ' As Boolean

    DIM APP_FOLDER
    
    APP_FOLDER          = Session("mdm_APP_FOLDER")    
    mam_LoadDictionary  = FALSE
 
    If UCase(Session("mdm_APP_LANGUAGE")) = UCase(strLanguage) Then
        mam_LoadDictionary = TRUE
        Exit Function
    End If
        
    objMAM.Dictionary.Clear
    ' Read the dictionary entries that do not need to be localized
    ' Generally it is the mam application logical/physical links
    objMAM.Dictionary.LoadFolder APP_FOLDER & "\default\LinkLookUp", TRUE ' MDM V2 We read also the sub folder level 1
    objMAM.Dictionary.LoadFolder APP_FOLDER & "\custom\LinkLookUp", TRUE ' MDM V2 We read also the sub folder level 1
    
    ' Read the DEFAULT dictionary entries that do need to be localized
    objMAM.Dictionary.LoadFolder APP_FOLDER & "\Default\Localized\" & strLanguage & "\TextLookUp", TRUE ' MDM V2 We read also the sub folder level 1 "
    
    ' Read the CUSTOM dictionary entries that do need to be localized
    ' In the default intall this folder is empty, but if SIs add xml file
    ' They will be loaded! That is part of the MAM Customization logic
    objMAM.Dictionary.LoadFolder APP_FOLDER & "\custom\Localized\" & strLanguage & "\TextLookUp" , TRUE ' MDM V2 We read also the sub folder level 1 "
    
    ' Make sure the dictionary entry for APP_HTTP_PATH agrees with or virtual directory
    objMAM.Dictionary.Add "APP_HTTP_PATH", Application("APP_HTTP_PATH") 
    objMAM.Dictionary.Add "APP_PATH"     , Server.MapPath(Application("APP_HTTP_PATH"))
    
    objMAM.Dictionary.Render
    objMAM.Log "MAM Dictionary Loaded"
 
    objMAM.Log "CSR Language = " & strLanguage
    
    Session("mdm_APP_LANGUAGE")                 = strLanguage
    Set Session("mdm_LOCALIZATION_DICTIONARY")  = objMAM.Dictionary         ' Store the dictionary object for the mdm    
    
    ' MAM 3.0 - This allow to use the FrameWork interface. The class CFrameWork appeard in 2.0 but until 3.0 MAM was not using it.
    ' In 3.0 because we need this class for the security support I make it support other feature like FrameWork.GetDictionary().
    Session    ("FRAMEWORK_APP_LANGUAGE")   = strLanguage
    Set Session("FRAMEWORK_APP_DICTIONARY") = objMAM.Dictionary
    
    'In lieu of Framework.SetDictionaryCommonEntries()
    objMAM.Dictionary.Add "HTTP_COMMON", "/MDM/Common"
    objMAM.Dictionary.Add "PATH_COMMON", Server.MapPath("/MDM/Common/")

    mam_LoadDictionary = TRUE
END FUNCTION  

' ---------------------------------------------------------------------------------------------------------------------------------------
' FUNCTION 		: Session_OnEnd
' PARAMETERS	:
' DESCRIPTION :
' RETURNS		  :
Sub Session_OnEnd
    
    ' Store and write performance statistics
    if Application("PERF_GENERATE_RESULTS") then
      Call Application("PERF_TIMER_MANAGER").StoreTimerXML(session("PERF_TIMER_SCRIPT_TIMER").GetXML)
'      Call Application("PERF_TIMER_MANAGER").WriteOutputXMLFile()      
      Set session("PERF_TIMER_SCRIPT_TIMER") = nothing
    end if
    
    mdm_GarbageCollector
End Sub

' ---------------------------------------------------------------------------------------------------------------------------------------
' FUNCTION 		: mdm_GarbageCollector
' PARAMETERS	:
' DESCRIPTION : Free any session objects taking care to delete circular COM references
' RETURNS		  :
PRIVATE FUNCTION mdm_GarbageCollector() ' As Boolean

    Dim itm         ' As Variant
    Dim subitm

    ' Try to free circular references in objects and sub objects 
    For Each itm in Session.Contents
        
        If(IsObject(Session(itm)))Then
          
          On Error Resume Next
            For Each subitm in Session(itm)
              subitm.Delete
              subitm.Clean  
              subitm.Clear
              Set subitm = Nothing
              subitm = Empty
            Next

            Session(itm).Delete
            Session(itm).Clean  
            Session(itm).Clear
          On Error Goto 0     
        End If
    Next

    ' Take a second pass at freeing circular references in case of dependency in order... 
    ' Next free the objects in session
    For Each itm in Session.Contents
    
        If(IsObject(Session(itm)))Then
          On Error Resume Next
            For Each subitm in Session(itm)
              subitm.Delete
              subitm.Clean  
              subitm.Clear
              Set subitm = Nothing
              subitm = Empty
            Next
          On Error Goto 0
          
          Set Session(itm) = Nothing
        End If

        Session(itm) = Empty
    Next
    
    mdm_GarbageCollector = TRUE
END FUNCTION


</SCRIPT>
