/**************************************************************************
 * @doc HOOKHANDLER
 *
 * Copyright 1998 by MetraTech Corporation
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS", AND MetraTech Corporation MAKES
 * NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. By way of
 * example, but not limitation, MetraTech Corporation MAKES NO
 * REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY
 * PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE OR
 * DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
 * COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
 *
 * Title to copyright in this software and any associated
 * documentation shall at all times remain with MetraTech Corporation,
 * and USER agrees to preserve the same.
 *
 * Created by: Carl Shimer
 * $Header$
 *
 * This file will be processed by the MIDL tool to
 * produce the type library (Hook.tlb) and marshalling code.
 *
 * Implement this interface to provide the capabilities of a Metratech hook
 *
 ***************************************************************************/
 

import "oaidl.idl";
import "ocidl.idl";

midl_pragma warning( disable: 2400 ) // disable warning for oleautomation, optional parameters should be VARIANT or VARIANT

import "MTConfigPropSet.idl";
import "IMTAuth.idl";

	[
		object,
		uuid(3A58B7D4-00DA-11D3-A59C-00C04F579C39),
		dual,
		helpstring("IMTHookHandler Interface"),
		pointer_default(unique)
	]
	interface IMTHookHandler : IDispatch
	{
		[id(1), helpstring("method Read")] HRESULT Read([in] IMTConfigPropSet* pPropSet);
		[id(2), helpstring("method First")] HRESULT First();
		[id(3), helpstring("method Next")] HRESULT Next();
		[id(4), helpstring("method ExecuteAll")] HRESULT ExecuteAll();

		[id(5), helpstring("method FirstHook")] HRESULT FirstHook([in] VARIANT var,[in, out] long* pVal);
		[id(6), helpstring("method NextHook")] HRESULT NextHook([in] VARIANT var,[in, out] long* pVal);
		[id(7), helpstring("method ExecuteAllHooks")] HRESULT ExecuteAllHooks([in] VARIANT var, [in] long val);

		[id(8), helpstring("method ClearHooks")] HRESULT ClearHooks();
	  [id(9), propget, helpstring("property HookCount")]
		  HRESULT HookCount([out, retval] int * count);
		[id(10), helpstring("Run Hooks with progid")] HRESULT RunHookWithProgid([in] BSTR aHookProgid,[in] VARIANT var,[in,out,optional] long* pVal);

		// Pass in a session context that has already been created by a login call.
		// Login credentials are passed to hooks that need it.
		[propput, id(11), helpstring("property SessionContext")]
		HRESULT SessionContext(IMTSessionContext * apSessionContext);
	};
