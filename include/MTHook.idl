/**************************************************************************
 * @doc MTPROCESSOR
 *
 * Copyright 1998 by MetraTech Corporation
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS", AND MetraTech Corporation MAKES
 * NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. By way of
 * example, but not limitation, MetraTech Corporation MAKES NO
 * REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY
 * PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE OR
 * DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
 * COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
 *
 * Title to copyright in this software and any associated
 * documentation shall at all times remain with MetraTech Corporation,
 * and USER agrees to preserve the same.
 *
 * Created by: Carl Shimer
 * $Header$
 *
 * This file will be processed by the MIDL tool to
 * produce the type library (Hook.tlb) and marshalling code.
 *
 * Implement this interface to provide the capabilities of a Metratech hook
 *
 ***************************************************************************/
 

import "oaidl.idl";
import "ocidl.idl";

// ----------------------------------------------------------------
// Interface: IMTHook
// Description: Hooks are called at various points in the system.  All hooks
//              have a consistent interface.  The two arguments to the hook are used
//              for different purposes depending on how the hook is called.
// ----------------------------------------------------------------
	[
		object,
		uuid(39AE18D2-00DE-11D3-A59C-00C04F579C39),
		helpstring("IMTHook Interface"),
		dual,
		pointer_default(unique)
	]
	interface IMTHook : IUnknown
	{	 

	// Description: Perform the hook's function.
        // Arguments: var - passed into the hook by the caller.
	//                  different depending on use.
        //            pVal - passed into the hook by the caller.
	//                   different depending on use.  This value
	//                   can also hold a return value.
		[id(1), helpstring("method Execute")] HRESULT Execute([in] VARIANT var,[in, out] long* pVal);
	};
