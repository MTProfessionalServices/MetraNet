/**************************************************************************
 * @doc MTPROCESSOR
 *
 * Copyright 1998 by MetraTech Corporation
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS", AND MetraTech Corporation MAKES
 * NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. By way of
 * example, but not limitation, MetraTech Corporation MAKES NO
 * REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY
 * PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE OR
 * DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
 * COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
 *
 * Title to copyright in this software and any associated
 * documentation shall at all times remain with MetraTech Corporation,
 * and USER agrees to preserve the same.
 *
 * Created by: Derek Young
 * $Header$
 *
 * interface definition for processor stages.
 ***************************************************************************/

// include standard IDL files
import "oaidl.idl";
import "ocidl.idl";

import "MTSessionSet.idl";

// configuration interface
import "MTConfig.idl";

// ----------------------------------------------------------------
// Interface: IMTPipelinePlugIn
// Description: To be a pipeline plug-in, a COM object can implement the
//              IMTPipelinePlugIn2 interface.  The Pipeline calls the methods
//              of this interface at the appropriate times to process metered
//              session data.
// ----------------------------------------------------------------
[
	object,
	uuid(1CA0D8E0-1622-11D4-A402-00C04F484788),
	dual,
	helpstring("IMTPipelinePlugIn2 Interface"),
	pointer_default(unique)
]
interface IMTPipelinePlugIn2 : IDispatch
{
	// Description: Configure the processor, looking up any necessary property IDs.
	//              The processor can also use this time to do any other
        //              necessary initialization.  This method can be called any
        //              number of times in order to refresh the initialization of
        //              the processor.
        // Arguments: systemContext - interface used to retrieve many objects used by the
        //                            plug-in during processing.
        //            propSet - configuration of this plug-in
	[id(1), helpstring("Configure processor")]
	HRESULT Configure(
	  [in] IDispatch * systemContext,
	  [in] IMTConfigPropSet * propSet);

	// Description: Shutdown the processor.  The processor can release any resources
	//              it no longer needs.
	[id(2), helpstring("Shutdown processor")]
	HRESULT Shutdown();

	// Description: Return information about this processor.  Combine the flags
	//              listed above.
	//              NOTE: This property is currently unused.  Your plug-in should
	//              return E_NOTIMPL
	// Arguments: info - Combination of flags that describe the capabilities
        //                   of the plug-in.
	[propget, id(3), helpstring("Return information about this processor")]
	HRESULT ProcessorInfo([out,retval] long * info);

	// Description: The body of this method works with each of the sessions
	//              within the session set.
	//
	// Arguments: sessions - Set of sessions that the plug in should process.
	[id(4), helpstring("Process a set of sessions")]
	HRESULT ProcessSessions([in] IMTSessionSet * sessions);
};
