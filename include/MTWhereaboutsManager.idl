/**************************************************************************
 * @doc MTTRANSACTION
 *
 * Copyright 2000 by MetraTech Corporation
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS", AND MetraTech Corporation MAKES
 * NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. By way of
 * example, but not limitation, MetraTech Corporation MAKES NO
 * REPRESENTATIONS OR WARRANTIES OF MERCHANTABILITY OR FITNESS FOR ANY
 * PARTICULAR PURPOSE OR THAT THE USE OF THE LICENSED SOFTWARE OR
 * DOCUMENTATION WILL NOT INFRINGE ANY THIRD PARTY PATENTS,
 * COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.
 *
 * Title to copyright in this software and any associated
 * documentation shall at all times remain with MetraTech Corporation,
 * and USER agrees to preserve the same.
 *
 * Created by: Alan Blount
 * 
 * interface definition for sessions and sets
 ***************************************************************************/

// MTTransaction.idl : IDL source for MTTransaction.dll
//

// This file will be processed by the MIDL tool to produce the type
// library (MTTransaction.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

/*
 * Every Distributed Transaction Coordinator in a
 * network has a whereabouts.  This is a blob of data (usually a GUID)
 * that uniquely identifies each DTC.
 * This object provides the ability to lookup whereabouts for any machine
 * including the local machine.
 */
	[
		object,
		uuid(b496928d-5e41-40fc-891b-fbd6868b060a),
		dual,
		helpstring("IMTWhereaboutsManager Interface"),
		pointer_default(unique)
	]
interface IMTWhereaboutsManager : IDispatch
{
	// given a machine, tell me the whereabouts
	[helpstring("method GetWhereaboutsForServer")]
	HRESULT GetWhereaboutsForServer(BSTR aServer, [out, retval] BSTR * aWhereabouts);

	// return the local whereabouts
	[helpstring("method GetLocalWhereabouts")]
	HRESULT GetLocalWhereabouts([out, retval] BSTR * aWhereabouts);
};
